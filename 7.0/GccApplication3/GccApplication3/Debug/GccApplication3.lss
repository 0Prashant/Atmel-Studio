
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a0  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000062  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000ef  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014f  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000044  00000000  00000000  000004f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000053b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	int p=0;
	DDRD = 0x03;
  6c:	83 e0       	ldi	r24, 0x03	; 3
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000101;
  70:	85 e0       	ldi	r24, 0x05	; 5
  72:	82 bb       	out	0x12, r24	; 18
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	int p=0;
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
		   PORTD |= 0b00000100;
		if((bit_is_clear(PIND,2)))
		{
			if (p==0)
			{
				PORTD ^= 0x01;
  78:	71 e0       	ldi	r23, 0x01	; 1
				PORTD ^=0x02;
  7a:	62 e0       	ldi	r22, 0x02	; 2
			}
		p=1;	
  7c:	51 e0       	ldi	r21, 0x01	; 1
  7e:	40 e0       	ldi	r20, 0x00	; 0
		}
		else
		{
			p=0;
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	05 c0       	rjmp	.+10     	; 0x90 <main+0x24>
  86:	83 2f       	mov	r24, r19
  88:	92 2f       	mov	r25, r18
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x24>
			if (p==0)
			{
				PORTD ^= 0x01;
				PORTD ^=0x02;
			}
		p=1;	
  8c:	85 2f       	mov	r24, r21
  8e:	94 2f       	mov	r25, r20
	DDRD = 0x03;
	PORTD = 0b00000101;
	
    while (1) 
       {
		   PORTD |= 0b00000100;
  90:	92 9a       	sbi	0x12, 2	; 18
		if((bit_is_clear(PIND,2)))
  92:	82 99       	sbic	0x10, 2	; 16
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0x1a>
		{
			if (p==0)
  96:	89 2b       	or	r24, r25
  98:	c9 f7       	brne	.-14     	; 0x8c <main+0x20>
			{
				PORTD ^= 0x01;
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	87 27       	eor	r24, r23
  9e:	82 bb       	out	0x12, r24	; 18
				PORTD ^=0x02;
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	86 27       	eor	r24, r22
  a4:	82 bb       	out	0x12, r24	; 18
			}
		p=1;	
  a6:	85 2f       	mov	r24, r21
  a8:	94 2f       	mov	r25, r20
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main+0x24>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
