
reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000468  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000293  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000286  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  74:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_transmit_ch>:
UART_transmit_num(int num)
{
	char a[15];
	itoa(num,a,10);
	UART_transmit_string(a);
}
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <UART_transmit_ch>
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <UART_initialize>:
void UART_initialize(int baud,int Bitsize,int StopBits,char ReceiveInterruptEnable,char TransmitInterruptEnable)
{
  84:	ef 92       	push	r14
  86:	ff 92       	push	r15
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	eb 01       	movw	r28, r22
  92:	7a 01       	movw	r14, r20
  94:	12 2f       	mov	r17, r18
	uint16_t UBRR_value =lrint(F_CPU/(16UL*baud)-1);		//This formula holds for U2X=0 in UCSRA register,if U2X is 1 then the division factor becomes 8
  96:	09 2e       	mov	r0, r25
  98:	00 0c       	add	r0, r0
  9a:	aa 0b       	sbc	r26, r26
  9c:	bb 0b       	sbc	r27, r27
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	aa 1f       	adc	r26, r26
  a4:	bb 1f       	adc	r27, r27
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	aa 1f       	adc	r26, r26
  ac:	bb 1f       	adc	r27, r27
  ae:	9c 01       	movw	r18, r24
  b0:	ad 01       	movw	r20, r26
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	44 1f       	adc	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	44 1f       	adc	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	60 e4       	ldi	r22, 0x40	; 64
  c4:	72 e4       	ldi	r23, 0x42	; 66
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
  ce:	ca 01       	movw	r24, r20
  d0:	b9 01       	movw	r22, r18
  d2:	61 50       	subi	r22, 0x01	; 1
  d4:	71 09       	sbc	r23, r1
  d6:	81 09       	sbc	r24, r1
  d8:	91 09       	sbc	r25, r1
  da:	0e 94 07 01 	call	0x20e	; 0x20e <__floatunsisf>
  de:	0e 94 44 01 	call	0x288	; 0x288 <lrint>
	UBRRH|=1<<URSEL;			                         //enable bit for UBRRH
  e2:	80 b5       	in	r24, 0x20	; 32
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 bd       	out	0x20, r24	; 32
	UBRRH|=(unsigned char)UBRR_value>>8;				//shifts value up to 8th place left
  e8:	80 b5       	in	r24, 0x20	; 32
  ea:	80 bd       	out	0x20, r24	; 32
	UBRRL|=(unsigned char)UBRR_value;					//puts value as it is
  ec:	89 b1       	in	r24, 0x09	; 9
  ee:	68 2b       	or	r22, r24
  f0:	69 b9       	out	0x09, r22	; 9
	//For doubling speed,UCSRA|=(1<<U2X);				//doubles Asynchronous Mode speed
	if(Bitsize==6) UCSRC|=(1<<URSEL)|(1<<UCSZ0);					//for 6-bit data length
  f2:	c6 30       	cpi	r28, 0x06	; 6
  f4:	d1 05       	cpc	r29, r1
  f6:	21 f4       	brne	.+8      	; 0x100 <UART_initialize+0x7c>
  f8:	80 b5       	in	r24, 0x20	; 32
  fa:	82 68       	ori	r24, 0x82	; 130
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	0e c0       	rjmp	.+28     	; 0x11c <UART_initialize+0x98>
	if(Bitsize==7) UCSRC|=(1<<URSEL)|(1<<UCSZ1);				//for 7-bit data length
 100:	c7 30       	cpi	r28, 0x07	; 7
 102:	d1 05       	cpc	r29, r1
 104:	21 f4       	brne	.+8      	; 0x10e <UART_initialize+0x8a>
 106:	80 b5       	in	r24, 0x20	; 32
 108:	84 68       	ori	r24, 0x84	; 132
 10a:	80 bd       	out	0x20, r24	; 32
 10c:	0c c0       	rjmp	.+24     	; 0x126 <UART_initialize+0xa2>
	if(Bitsize==8) UCSRC|=(1<<URSEL)|(3<<UCSZ0);				//for 8-bit data length
 10e:	c8 30       	cpi	r28, 0x08	; 8
 110:	d1 05       	cpc	r29, r1
 112:	21 f4       	brne	.+8      	; 0x11c <UART_initialize+0x98>
 114:	80 b5       	in	r24, 0x20	; 32
 116:	86 68       	ori	r24, 0x86	; 134
 118:	80 bd       	out	0x20, r24	; 32
 11a:	05 c0       	rjmp	.+10     	; 0x126 <UART_initialize+0xa2>
	if(Bitsize==9) UCSRC|=(1<<URSEL)|(7<<UCSZ0);				//for 9-bit data length
 11c:	29 97       	sbiw	r28, 0x09	; 9
 11e:	19 f4       	brne	.+6      	; 0x126 <UART_initialize+0xa2>
 120:	80 b5       	in	r24, 0x20	; 32
 122:	8e 68       	ori	r24, 0x8E	; 142
 124:	80 bd       	out	0x20, r24	; 32
	UCSRB|=1<<RXEN|1<<TXEN;							//enables both receiver and transmitter
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	88 61       	ori	r24, 0x18	; 24
 12a:	8a b9       	out	0x0a, r24	; 10
	//if(ParityMode==EVEN) UCSRC|=1<<UPM1;			//sets parity to even
	//if(ParityMode==ODD) UCSRC|=3<<UPM0;			   //sets parity to odd
	
	if(StopBits==2)		UCSRC|=(1<<USBS);		//sets 2 stop bits	
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	e8 16       	cp	r14, r24
 130:	f1 04       	cpc	r15, r1
 132:	19 f4       	brne	.+6      	; 0x13a <UART_initialize+0xb6>
 134:	80 b5       	in	r24, 0x20	; 32
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 bd       	out	0x20, r24	; 32
	
	if(ReceiveInterruptEnable)		UCSRB|=(1<<RXCIE);    //Receive_Interrupt Enable
 13a:	11 11       	cpse	r17, r1
 13c:	57 9a       	sbi	0x0a, 7	; 10
	if(TransmitInterruptEnable)		UCSRB|=(1<<TXCIE);    //Transmit_Interrupt Enable
 13e:	01 11       	cpse	r16, r1
 140:	56 9a       	sbi	0x0a, 6	; 10

} 
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	08 95       	ret

00000150 <main>:
// unsigned char data= 0x00;
// long int sum =0 ;
// int i=0,freq;
int main(void)
{  
	UART_initialize(9600,8,1,0,0);
 150:	00 e0       	ldi	r16, 0x00	; 0
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	68 e0       	ldi	r22, 0x08	; 8
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	95 e2       	ldi	r25, 0x25	; 37
 160:	0e 94 42 00 	call	0x84	; 0x84 <UART_initialize>
	DDRC = 0x00;
 164:	14 ba       	out	0x14, r1	; 20
	DDRA = 0xFF;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	8a bb       	out	0x1a, r24	; 26
	sei();	
 16a:	78 94       	sei
	TCCR1B = 0x01 ;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0 ;
 170:	1d bc       	out	0x2d, r1	; 45
 172:	1c bc       	out	0x2c, r1	; 44
	GICR = (1<<INT0) ;
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	8b bf       	out	0x3b, r24	; 59
    while (1) 
    {
		for(int k=0;k<255;k++)
 178:	10 e0       	ldi	r17, 0x00	; 0
 17a:	c0 2f       	mov	r28, r16
 17c:	d1 2f       	mov	r29, r17
		{
			UART_transmit_ch(k);	
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_transmit_ch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9d e0       	ldi	r25, 0x0D	; 13
 188:	23 e0       	ldi	r18, 0x03	; 3
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	20 40       	sbci	r18, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x3a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x44>
 194:	00 00       	nop
	TCCR1B = 0x01 ;
	TCNT1 = 0 ;
	GICR = (1<<INT0) ;
    while (1) 
    {
		for(int k=0;k<255;k++)
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	cf 3f       	cpi	r28, 0xFF	; 255
 19a:	d1 05       	cpc	r29, r1
 19c:	81 f7       	brne	.-32     	; 0x17e <main+0x2e>
 19e:	3a e2       	ldi	r19, 0x2A	; 42
 1a0:	80 e5       	ldi	r24, 0x50	; 80
 1a2:	9e ef       	ldi	r25, 0xFE	; 254
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	31 50       	subi	r19, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <main+0x56>
 1b0:	00 00       	nop
 1b2:	e3 cf       	rjmp	.-58     	; 0x17a <main+0x2a>

000001b4 <__vector_1>:
    } 
	return 0; 
}

ISR (INT0_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
	timer = TCNT1;
 1c6:	8c b5       	in	r24, 0x2c	; 44
 1c8:	9d b5       	in	r25, 0x2d	; 45
 1ca:	90 93 65 00 	sts	0x0065, r25
 1ce:	80 93 64 00 	sts	0x0064, r24
	p++;
 1d2:	80 91 60 00 	lds	r24, 0x0060
 1d6:	90 91 61 00 	lds	r25, 0x0061
 1da:	a0 91 62 00 	lds	r26, 0x0062
 1de:	b0 91 63 00 	lds	r27, 0x0063
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	a1 1d       	adc	r26, r1
 1e6:	b1 1d       	adc	r27, r1
 1e8:	80 93 60 00 	sts	0x0060, r24
 1ec:	90 93 61 00 	sts	0x0061, r25
 1f0:	a0 93 62 00 	sts	0x0062, r26
 1f4:	b0 93 63 00 	sts	0x0063, r27
	TCNT1 = 0x00;
 1f8:	1d bc       	out	0x2d, r1	; 45
 1fa:	1c bc       	out	0x2c, r1	; 44
}
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__floatunsisf>:
 20e:	e8 94       	clt
 210:	09 c0       	rjmp	.+18     	; 0x224 <__floatsisf+0x12>

00000212 <__floatsisf>:
 212:	97 fb       	bst	r25, 7
 214:	3e f4       	brtc	.+14     	; 0x224 <__floatsisf+0x12>
 216:	90 95       	com	r25
 218:	80 95       	com	r24
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	8f 4f       	sbci	r24, 0xFF	; 255
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	99 23       	and	r25, r25
 226:	a9 f0       	breq	.+42     	; 0x252 <__floatsisf+0x40>
 228:	f9 2f       	mov	r31, r25
 22a:	96 e9       	ldi	r25, 0x96	; 150
 22c:	bb 27       	eor	r27, r27
 22e:	93 95       	inc	r25
 230:	f6 95       	lsr	r31
 232:	87 95       	ror	r24
 234:	77 95       	ror	r23
 236:	67 95       	ror	r22
 238:	b7 95       	ror	r27
 23a:	f1 11       	cpse	r31, r1
 23c:	f8 cf       	rjmp	.-16     	; 0x22e <__floatsisf+0x1c>
 23e:	fa f4       	brpl	.+62     	; 0x27e <__floatsisf+0x6c>
 240:	bb 0f       	add	r27, r27
 242:	11 f4       	brne	.+4      	; 0x248 <__floatsisf+0x36>
 244:	60 ff       	sbrs	r22, 0
 246:	1b c0       	rjmp	.+54     	; 0x27e <__floatsisf+0x6c>
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	8f 4f       	sbci	r24, 0xFF	; 255
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	16 c0       	rjmp	.+44     	; 0x27e <__floatsisf+0x6c>
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <__floatsisf+0x48>
 256:	96 e9       	ldi	r25, 0x96	; 150
 258:	11 c0       	rjmp	.+34     	; 0x27c <__floatsisf+0x6a>
 25a:	77 23       	and	r23, r23
 25c:	21 f0       	breq	.+8      	; 0x266 <__floatsisf+0x54>
 25e:	9e e8       	ldi	r25, 0x8E	; 142
 260:	87 2f       	mov	r24, r23
 262:	76 2f       	mov	r23, r22
 264:	05 c0       	rjmp	.+10     	; 0x270 <__floatsisf+0x5e>
 266:	66 23       	and	r22, r22
 268:	71 f0       	breq	.+28     	; 0x286 <__floatsisf+0x74>
 26a:	96 e8       	ldi	r25, 0x86	; 134
 26c:	86 2f       	mov	r24, r22
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	2a f0       	brmi	.+10     	; 0x27e <__floatsisf+0x6c>
 274:	9a 95       	dec	r25
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	da f7       	brpl	.-10     	; 0x274 <__floatsisf+0x62>
 27e:	88 0f       	add	r24, r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	97 f9       	bld	r25, 7
 286:	08 95       	ret

00000288 <lrint>:
 288:	0e 94 89 01 	call	0x312	; 0x312 <__fp_splitA>
 28c:	a8 f1       	brcs	.+106    	; 0x2f8 <lrint+0x70>
 28e:	9e 57       	subi	r25, 0x7E	; 126
 290:	b0 f1       	brcs	.+108    	; 0x2fe <lrint+0x76>
 292:	98 51       	subi	r25, 0x18	; 24
 294:	60 f0       	brcs	.+24     	; 0x2ae <lrint+0x26>
 296:	39 f1       	breq	.+78     	; 0x2e6 <lrint+0x5e>
 298:	98 30       	cpi	r25, 0x08	; 8
 29a:	70 f5       	brcc	.+92     	; 0x2f8 <lrint+0x70>
 29c:	09 2e       	mov	r0, r25
 29e:	99 27       	eor	r25, r25
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	d1 f7       	brne	.-12     	; 0x2a0 <lrint+0x18>
 2ac:	1c c0       	rjmp	.+56     	; 0x2e6 <lrint+0x5e>
 2ae:	bb 27       	eor	r27, r27
 2b0:	99 3f       	cpi	r25, 0xF9	; 249
 2b2:	4c f4       	brge	.+18     	; 0x2c6 <lrint+0x3e>
 2b4:	b1 11       	cpse	r27, r1
 2b6:	b1 e0       	ldi	r27, 0x01	; 1
 2b8:	b6 2b       	or	r27, r22
 2ba:	67 2f       	mov	r22, r23
 2bc:	78 2f       	mov	r23, r24
 2be:	88 27       	eor	r24, r24
 2c0:	98 5f       	subi	r25, 0xF8	; 248
 2c2:	b1 f7       	brne	.-20     	; 0x2b0 <lrint+0x28>
 2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <lrint+0x4e>
 2c6:	86 95       	lsr	r24
 2c8:	77 95       	ror	r23
 2ca:	67 95       	ror	r22
 2cc:	b7 95       	ror	r27
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <lrint+0x4a>
 2d0:	b1 60       	ori	r27, 0x01	; 1
 2d2:	93 95       	inc	r25
 2d4:	c1 f7       	brne	.-16     	; 0x2c6 <lrint+0x3e>
 2d6:	bb 0f       	add	r27, r27
 2d8:	30 f4       	brcc	.+12     	; 0x2e6 <lrint+0x5e>
 2da:	11 f4       	brne	.+4      	; 0x2e0 <lrint+0x58>
 2dc:	60 ff       	sbrs	r22, 0
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <lrint+0x5e>
 2e0:	6f 5f       	subi	r22, 0xFF	; 255
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	8f 4f       	sbci	r24, 0xFF	; 255
 2e6:	3e f4       	brtc	.+14     	; 0x2f6 <lrint+0x6e>
 2e8:	90 95       	com	r25
 2ea:	80 95       	com	r24
 2ec:	70 95       	com	r23
 2ee:	61 95       	neg	r22
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	8f 4f       	sbci	r24, 0xFF	; 255
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	08 95       	ret
 2f8:	68 94       	set
 2fa:	0c 94 a4 01 	jmp	0x348	; 0x348 <__fp_szero>
 2fe:	0c 94 a3 01 	jmp	0x346	; 0x346 <__fp_zero>

00000302 <__fp_split3>:
 302:	57 fd       	sbrc	r21, 7
 304:	90 58       	subi	r25, 0x80	; 128
 306:	44 0f       	add	r20, r20
 308:	55 1f       	adc	r21, r21
 30a:	59 f0       	breq	.+22     	; 0x322 <__fp_splitA+0x10>
 30c:	5f 3f       	cpi	r21, 0xFF	; 255
 30e:	71 f0       	breq	.+28     	; 0x32c <__fp_splitA+0x1a>
 310:	47 95       	ror	r20

00000312 <__fp_splitA>:
 312:	88 0f       	add	r24, r24
 314:	97 fb       	bst	r25, 7
 316:	99 1f       	adc	r25, r25
 318:	61 f0       	breq	.+24     	; 0x332 <__fp_splitA+0x20>
 31a:	9f 3f       	cpi	r25, 0xFF	; 255
 31c:	79 f0       	breq	.+30     	; 0x33c <__fp_splitA+0x2a>
 31e:	87 95       	ror	r24
 320:	08 95       	ret
 322:	12 16       	cp	r1, r18
 324:	13 06       	cpc	r1, r19
 326:	14 06       	cpc	r1, r20
 328:	55 1f       	adc	r21, r21
 32a:	f2 cf       	rjmp	.-28     	; 0x310 <__fp_split3+0xe>
 32c:	46 95       	lsr	r20
 32e:	f1 df       	rcall	.-30     	; 0x312 <__fp_splitA>
 330:	08 c0       	rjmp	.+16     	; 0x342 <__fp_splitA+0x30>
 332:	16 16       	cp	r1, r22
 334:	17 06       	cpc	r1, r23
 336:	18 06       	cpc	r1, r24
 338:	99 1f       	adc	r25, r25
 33a:	f1 cf       	rjmp	.-30     	; 0x31e <__fp_splitA+0xc>
 33c:	86 95       	lsr	r24
 33e:	71 05       	cpc	r23, r1
 340:	61 05       	cpc	r22, r1
 342:	08 94       	sec
 344:	08 95       	ret

00000346 <__fp_zero>:
 346:	e8 94       	clt

00000348 <__fp_szero>:
 348:	bb 27       	eor	r27, r27
 34a:	66 27       	eor	r22, r22
 34c:	77 27       	eor	r23, r23
 34e:	cb 01       	movw	r24, r22
 350:	97 f9       	bld	r25, 7
 352:	08 95       	ret

00000354 <__udivmodsi4>:
 354:	a1 e2       	ldi	r26, 0x21	; 33
 356:	1a 2e       	mov	r1, r26
 358:	aa 1b       	sub	r26, r26
 35a:	bb 1b       	sub	r27, r27
 35c:	fd 01       	movw	r30, r26
 35e:	0d c0       	rjmp	.+26     	; 0x37a <__udivmodsi4_ep>

00000360 <__udivmodsi4_loop>:
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	ee 1f       	adc	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	a2 17       	cp	r26, r18
 36a:	b3 07       	cpc	r27, r19
 36c:	e4 07       	cpc	r30, r20
 36e:	f5 07       	cpc	r31, r21
 370:	20 f0       	brcs	.+8      	; 0x37a <__udivmodsi4_ep>
 372:	a2 1b       	sub	r26, r18
 374:	b3 0b       	sbc	r27, r19
 376:	e4 0b       	sbc	r30, r20
 378:	f5 0b       	sbc	r31, r21

0000037a <__udivmodsi4_ep>:
 37a:	66 1f       	adc	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	1a 94       	dec	r1
 384:	69 f7       	brne	.-38     	; 0x360 <__udivmodsi4_loop>
 386:	60 95       	com	r22
 388:	70 95       	com	r23
 38a:	80 95       	com	r24
 38c:	90 95       	com	r25
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	bd 01       	movw	r22, r26
 394:	cf 01       	movw	r24, r30
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
