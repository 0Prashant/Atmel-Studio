
Ram Dai.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c0  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060d  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000107  00000000  00000000  00000efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__vector_1>
   6:	00 00       	nop
   8:	7c c0       	rjmp	.+248    	; 0x102 <__vector_2>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	75 c0       	rjmp	.+234    	; 0x118 <__vector_11>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	53 c0       	rjmp	.+166    	; 0x12e <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:

int count;

int main(void)
{
	TCCR1A |= (1<<COM1A0);
  8a:	e0 e8       	ldi	r30, 0x80	; 128
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 64       	ori	r24, 0x40	; 64
  92:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12)|(1<<CS10)|(1<<WGM02);
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8d 60       	ori	r24, 0x0D	; 13
  9c:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
  9e:	ef e6       	ldi	r30, 0x6F	; 111
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	TIFR1 |= (1<<OCF1A);
  a8:	b1 9a       	sbi	0x16, 1	; 22
	OCR1A = 31248;
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	9a e7       	ldi	r25, 0x7A	; 122
  ae:	90 93 89 00 	sts	0x0089, r25
  b2:	80 93 88 00 	sts	0x0088, r24
	/////////////////////////////////////////////////////////////
	DDRD = 0b00110000;
  b6:	80 e3       	ldi	r24, 0x30	; 48
  b8:	8a b9       	out	0x0a, r24	; 10
	DDRB	= 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	84 b9       	out	0x04, r24	; 4
	//DDRD &= ~(1<<PD0);
	//DDRD &= ~(1<<PD1);
	//DDRD |= (1<<PD4) | (1<<PD5);
	PORTD |= (1<<PIND0);
  be:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~(1<<PIND1);
  c0:	59 98       	cbi	0x0b, 1	; 11
	PORTB = 0x00;
  c2:	15 b8       	out	0x05, r1	; 5
	/////////////////////////////////////////////////////////////
	EICRA |= (1<<ISC01)|(1<<ISC10)|(1<<ISC11);
  c4:	e9 e6       	ldi	r30, 0x69	; 105
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8e 60       	ori	r24, 0x0E	; 14
  cc:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)|(1<<INT1);
  ce:	8d b3       	in	r24, 0x1d	; 29
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (1<<INTF0)|(1<<INTF1);
  d4:	8c b3       	in	r24, 0x1c	; 28
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	8c bb       	out	0x1c, r24	; 28
	////////////////////////////////////////////////////////////////
	sei();
  da:	78 94       	sei
#include <avr/io.h>
#include <avr/interrupt.h>

int count;

int main(void)
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x52>

000000de <__vector_1>:
    {
		
    }
}
ISR(INT0_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	PORTB ^= (1<<0);
  ec:	95 b1       	in	r25, 0x05	; 5
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	89 27       	eor	r24, r25
  f2:	85 b9       	out	0x05, r24	; 5
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_2>:
ISR(INT1_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
	PORTB |= (1<<1);
 10c:	29 9a       	sbi	0x05, 1	; 5
}
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
		PORTB &= ~(1<<1);
 122:	29 98       	cbi	0x05, 1	; 5
	
}
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
