
testMegaPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c83  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7c  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000588  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e4       	ldi	r30, 0x40	; 64
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	95 c0       	rjmp	.+298    	; 0x23c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:

int main(void)
{       
    
    
    DDRB   |= (1<<PINB5);
 114:	25 9a       	sbi	0x04, 5	; 4
    TCCR1A |= (1<<COM1A1)|(0<<COM1A0);
 116:	a0 e8       	ldi	r26, 0x80	; 128
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	8c 91       	ld	r24, X
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	8c 93       	st	X, r24
  
    // Prescale settings -- 256
    TCCR1B |= (1<<CS12)|(0<<CS11)|(0<<CS10);
 120:	e1 e8       	ldi	r30, 0x81	; 129
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	84 60       	ori	r24, 0x04	; 4
 128:	80 83       	st	Z, r24

    // Mode of operation -- Phase Correct Mode
    TCCR1A |= (1<<WGM11)|(0<<WGM10);
 12a:	8c 91       	ld	r24, X
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	8c 93       	st	X, r24
    TCCR1B |= (1<<WGM13)|(0<<WGM12);
 130:	80 81       	ld	r24, Z
 132:	80 61       	ori	r24, 0x10	; 16
 134:	80 83       	st	Z, r24

    // Top value and update
    ICR1   = (F_CPU/(freq1*preScale1)-1);
 136:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <preScale1>
 13a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <preScale1+0x1>
 13e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 142:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 146:	48 9f       	mul	r20, r24
 148:	90 01       	movw	r18, r0
 14a:	49 9f       	mul	r20, r25
 14c:	30 0d       	add	r19, r0
 14e:	58 9f       	mul	r21, r24
 150:	30 0d       	add	r19, r0
 152:	11 24       	eor	r1, r1
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	0f 2e       	mov	r0, r31
 15a:	c1 2c       	mov	r12, r1
 15c:	f4 e2       	ldi	r31, 0x24	; 36
 15e:	df 2e       	mov	r13, r31
 160:	f4 ef       	ldi	r31, 0xF4	; 244
 162:	ef 2e       	mov	r14, r31
 164:	f1 2c       	mov	r15, r1
 166:	f0 2d       	mov	r31, r0
 168:	c7 01       	movw	r24, r14
 16a:	b6 01       	movw	r22, r12
 16c:	2c d0       	rcall	.+88     	; 0x1c6 <__udivmodsi4>
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 176:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
    OCR1A  = (((F_CPU/(freq1*preScale1)-1)*dutyCycle1A)/100); /*Update value for OC1A*/
 17a:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <preScale1>
 17e:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <preScale1+0x1>
 182:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 186:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 18a:	48 9f       	mul	r20, r24
 18c:	90 01       	movw	r18, r0
 18e:	49 9f       	mul	r20, r25
 190:	30 0d       	add	r19, r0
 192:	58 9f       	mul	r21, r24
 194:	30 0d       	add	r19, r0
 196:	11 24       	eor	r1, r1
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	c7 01       	movw	r24, r14
 19e:	b6 01       	movw	r22, r12
 1a0:	12 d0       	rcall	.+36     	; 0x1c6 <__udivmodsi4>
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	31 09       	sbc	r19, r1
 1a6:	41 09       	sbc	r20, r1
 1a8:	51 09       	sbc	r21, r1
 1aa:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <dutyCycle1A>
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	2c d0       	rcall	.+88     	; 0x20a <__muluhisi3>
 1b2:	24 e6       	ldi	r18, 0x64	; 100
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	05 d0       	rcall	.+10     	; 0x1c6 <__udivmodsi4>
 1bc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1c0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
//  uint8_t dutyCycle1B = 25;
//  uint8_t dutyCycle1C = 10;
 uint16_t preScale1 = 256; 
 uint16_t freq1 = 4000;    

int main(void)
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0xb0>

000001c6 <__udivmodsi4>:
 1c6:	a1 e2       	ldi	r26, 0x21	; 33
 1c8:	1a 2e       	mov	r1, r26
 1ca:	aa 1b       	sub	r26, r26
 1cc:	bb 1b       	sub	r27, r27
 1ce:	fd 01       	movw	r30, r26
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <__udivmodsi4_ep>

000001d2 <__udivmodsi4_loop>:
 1d2:	aa 1f       	adc	r26, r26
 1d4:	bb 1f       	adc	r27, r27
 1d6:	ee 1f       	adc	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	a2 17       	cp	r26, r18
 1dc:	b3 07       	cpc	r27, r19
 1de:	e4 07       	cpc	r30, r20
 1e0:	f5 07       	cpc	r31, r21
 1e2:	20 f0       	brcs	.+8      	; 0x1ec <__udivmodsi4_ep>
 1e4:	a2 1b       	sub	r26, r18
 1e6:	b3 0b       	sbc	r27, r19
 1e8:	e4 0b       	sbc	r30, r20
 1ea:	f5 0b       	sbc	r31, r21

000001ec <__udivmodsi4_ep>:
 1ec:	66 1f       	adc	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	88 1f       	adc	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	1a 94       	dec	r1
 1f6:	69 f7       	brne	.-38     	; 0x1d2 <__udivmodsi4_loop>
 1f8:	60 95       	com	r22
 1fa:	70 95       	com	r23
 1fc:	80 95       	com	r24
 1fe:	90 95       	com	r25
 200:	9b 01       	movw	r18, r22
 202:	ac 01       	movw	r20, r24
 204:	bd 01       	movw	r22, r26
 206:	cf 01       	movw	r24, r30
 208:	08 95       	ret

0000020a <__muluhisi3>:
 20a:	09 d0       	rcall	.+18     	; 0x21e <__umulhisi3>
 20c:	a5 9f       	mul	r26, r21
 20e:	90 0d       	add	r25, r0
 210:	b4 9f       	mul	r27, r20
 212:	90 0d       	add	r25, r0
 214:	a4 9f       	mul	r26, r20
 216:	80 0d       	add	r24, r0
 218:	91 1d       	adc	r25, r1
 21a:	11 24       	eor	r1, r1
 21c:	08 95       	ret

0000021e <__umulhisi3>:
 21e:	a2 9f       	mul	r26, r18
 220:	b0 01       	movw	r22, r0
 222:	b3 9f       	mul	r27, r19
 224:	c0 01       	movw	r24, r0
 226:	a3 9f       	mul	r26, r19
 228:	70 0d       	add	r23, r0
 22a:	81 1d       	adc	r24, r1
 22c:	11 24       	eor	r1, r1
 22e:	91 1d       	adc	r25, r1
 230:	b2 9f       	mul	r27, r18
 232:	70 0d       	add	r23, r0
 234:	81 1d       	adc	r24, r1
 236:	11 24       	eor	r1, r1
 238:	91 1d       	adc	r25, r1
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
