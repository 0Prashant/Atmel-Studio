
ds1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000043c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1d  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000263  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ac  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000297  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065c  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000024cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  7a:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdenable>:
	while (!(TWCR & (1<<TWINT)));
}

void i2c_stop()
{
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
  82:	92 9a       	sbi	0x12, 2	; 18
  84:	00 00       	nop
  86:	00 00       	nop
  88:	92 98       	cbi	0x12, 2	; 18
  8a:	08 95       	ret

0000008c <lcdcheck>:
  8c:	17 ba       	out	0x17, r1	; 23
  8e:	91 9a       	sbi	0x12, 1	; 18
  90:	90 98       	cbi	0x12, 0	; 18
  92:	af 9b       	sbis	0x15, 7	; 21
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcdcheck+0x12>
  96:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
  9a:	af 99       	sbic	0x15, 7	; 21
  9c:	fc cf       	rjmp	.-8      	; 0x96 <lcdcheck+0xa>
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	08 95       	ret

000000a4 <lcdcommand>:
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
  a8:	0e 94 46 00 	call	0x8c	; 0x8c <lcdcheck>
  ac:	90 98       	cbi	0x12, 0	; 18
  ae:	91 98       	cbi	0x12, 1	; 18
  b0:	8c 2f       	mov	r24, r28
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
  ba:	8b e2       	ldi	r24, 0x2B	; 43
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcdcommand+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcdcommand+0x20>
  c4:	00 00       	nop
  c6:	c2 95       	swap	r28
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	c8 bb       	out	0x18, r28	; 24
  cc:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
  d0:	8f e2       	ldi	r24, 0x2F	; 47
  d2:	95 e7       	ldi	r25, 0x75	; 117
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcdcommand+0x30>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcdcommand+0x36>
  da:	00 00       	nop
  dc:	18 ba       	out	0x18, r1	; 24
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <lcddata>:
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
  e6:	0e 94 46 00 	call	0x8c	; 0x8c <lcdcheck>
  ea:	91 98       	cbi	0x12, 1	; 18
  ec:	90 9a       	sbi	0x12, 0	; 18
  ee:	8c 2f       	mov	r24, r28
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
  f8:	8b e2       	ldi	r24, 0x2B	; 43
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcddata+0x1a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcddata+0x20>
 102:	00 00       	nop
 104:	c2 95       	swap	r28
 106:	c0 7f       	andi	r28, 0xF0	; 240
 108:	c8 bb       	out	0x18, r28	; 24
 10a:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
 10e:	8f e2       	ldi	r24, 0x2F	; 47
 110:	95 e7       	ldi	r25, 0x75	; 117
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcddata+0x30>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcddata+0x36>
 118:	00 00       	nop
 11a:	18 ba       	out	0x18, r1	; 24
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <lcdinitialise>:
 120:	81 b3       	in	r24, 0x11	; 17
 122:	87 60       	ori	r24, 0x07	; 7
 124:	81 bb       	out	0x11, r24	; 17
 126:	87 ec       	ldi	r24, 0xC7	; 199
 128:	9f ea       	ldi	r25, 0xAF	; 175
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcdinitialise+0xa>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcdinitialise+0x10>
 130:	00 00       	nop
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 138:	8f e6       	ldi	r24, 0x6F	; 111
 13a:	97 e1       	ldi	r25, 0x17	; 23
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdinitialise+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdinitialise+0x22>
 142:	00 00       	nop
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 14a:	98 ec       	ldi	r25, 0xC8	; 200
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcdinitialise+0x2c>
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 156:	88 ec       	ldi	r24, 0xC8	; 200
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcdinitialise+0x38>
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 162:	98 ec       	ldi	r25, 0xC8	; 200
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <lcdinitialise+0x44>
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 16e:	88 ec       	ldi	r24, 0xC8	; 200
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <lcdinitialise+0x50>
 174:	08 95       	ret

00000176 <lcdprint>:
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	59 f0       	breq	.+22     	; 0x19a <lcdprint+0x24>
 184:	8f 01       	movw	r16, r30
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	0e 94 71 00 	call	0xe2	; 0xe2 <lcddata>
 18c:	cf 5f       	subi	r28, 0xFF	; 255
 18e:	f8 01       	movw	r30, r16
 190:	ec 0f       	add	r30, r28
 192:	f1 1d       	adc	r31, r1
 194:	80 81       	ld	r24, Z
 196:	81 11       	cpse	r24, r1
 198:	f7 cf       	rjmp	.-18     	; 0x188 <lcdprint+0x12>
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <lcdgotoxy>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <lcdgotoxy+0x6>
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <lcdgotoxy+0x8>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	90 e8       	ldi	r25, 0x80	; 128
 1b0:	99 83       	std	Y+1, r25	; 0x01
 1b2:	90 ec       	ldi	r25, 0xC0	; 192
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	94 e9       	ldi	r25, 0x94	; 148
 1b8:	9b 83       	std	Y+3, r25	; 0x03
 1ba:	94 ed       	ldi	r25, 0xD4	; 212
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	fe 01       	movw	r30, r28
 1c2:	e6 0f       	add	r30, r22
 1c4:	f1 1d       	adc	r31, r1
 1c6:	90 81       	ld	r25, Z
 1c8:	89 0f       	add	r24, r25
 1ca:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <i2c_start>:
 1dc:	84 ea       	ldi	r24, 0xA4	; 164
 1de:	86 bf       	out	0x36, r24	; 54
 1e0:	06 b6       	in	r0, 0x36	; 54
 1e2:	07 fe       	sbrs	r0, 7
 1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <i2c_start+0x4>
 1e6:	08 95       	ret

000001e8 <i2c_writedata>:
}

void i2c_writedata(unsigned char wdata)
{
	TWDR = wdata;
 1e8:	83 b9       	out	0x03, r24	; 3
	TWCR =  (1<<TWINT) | (1<<TWEN);
 1ea:	84 e8       	ldi	r24, 0x84	; 132
 1ec:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 1ee:	06 b6       	in	r0, 0x36	; 54
 1f0:	07 fe       	sbrs	r0, 7
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <i2c_writedata+0x6>
}
 1f4:	08 95       	ret

000001f6 <i2c_readdata>:

unsigned char i2c_readdata(unsigned char ack)
{
	TWCR =  (1<<TWINT) | (1<<TWEN) | ack <<TWEA;
 1f6:	20 e4       	ldi	r18, 0x40	; 64
 1f8:	82 9f       	mul	r24, r18
 1fa:	c0 01       	movw	r24, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	84 68       	ori	r24, 0x84	; 132
 200:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
 202:	06 b6       	in	r0, 0x36	; 54
 204:	07 fe       	sbrs	r0, 7
 206:	fd cf       	rjmp	.-6      	; 0x202 <i2c_readdata+0xc>
	return TWDR;
 208:	83 b1       	in	r24, 0x03	; 3
}
 20a:	08 95       	ret

0000020c <set_datetime>:


void set_datetime(unsigned char y, unsigned char mo, unsigned char dt, unsigned char dy, unsigned char h, unsigned char mi, unsigned char s)
{
 20c:	cf 92       	push	r12
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	c8 2f       	mov	r28, r24
 21c:	d6 2f       	mov	r29, r22
 21e:	14 2f       	mov	r17, r20
 220:	f2 2e       	mov	r15, r18
	i2c_start();
 222:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_start>
	i2c_writedata(0xD0);
 226:	80 ed       	ldi	r24, 0xD0	; 208
 228:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(0x00);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(s);
 232:	8c 2d       	mov	r24, r12
 234:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(mi);
 238:	8e 2d       	mov	r24, r14
 23a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(h);	
 23e:	80 2f       	mov	r24, r16
 240:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(dy);
 244:	8f 2d       	mov	r24, r15
 246:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(dt);
 24a:	81 2f       	mov	r24, r17
 24c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(mo);
 250:	8d 2f       	mov	r24, r29
 252:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(y);
 256:	8c 2f       	mov	r24, r28
 258:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	while (!(TWCR & (1<<TWINT)));
}

void i2c_stop()
{
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
 25c:	84 e9       	ldi	r24, 0x94	; 148
 25e:	86 bf       	out	0x36, r24	; 54
	i2c_writedata(dy);
	i2c_writedata(dt);
	i2c_writedata(mo);
	i2c_writedata(y);
	i2c_stop();
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	cf 90       	pop	r12
 26e:	08 95       	ret

00000270 <get_datetime>:
void get_datetime(unsigned char *year, unsigned char *month, unsigned char *date, unsigned char *day, unsigned char *hour, unsigned char *minute, unsigned char *second)
{
 270:	5f 92       	push	r5
 272:	6f 92       	push	r6
 274:	7f 92       	push	r7
 276:	8f 92       	push	r8
 278:	9f 92       	push	r9
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
 290:	3b 01       	movw	r6, r22
 292:	5a 01       	movw	r10, r20
 294:	49 01       	movw	r8, r18
	i2c_start();
 296:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_start>
	i2c_writedata(0xD0);
 29a:	80 ed       	ldi	r24, 0xD0	; 208
 29c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(0x00);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	while (!(TWCR & (1<<TWINT)));
}

void i2c_stop()
{
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f4 e9       	ldi	r31, 0x94	; 148
 2aa:	5f 2e       	mov	r5, r31
 2ac:	f0 2d       	mov	r31, r0
 2ae:	56 be       	out	0x36, r5	; 54
	i2c_start();
	i2c_writedata(0xD0);
	i2c_writedata(0x00);
	i2c_stop();
	
	i2c_start();
 2b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_start>
	i2c_writedata(0xD1);
 2b4:	81 ed       	ldi	r24, 0xD1	; 209
 2b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	*second = i2c_readdata(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2c0:	f6 01       	movw	r30, r12
 2c2:	80 83       	st	Z, r24
	*minute = i2c_readdata(1);
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2ca:	f7 01       	movw	r30, r14
 2cc:	80 83       	st	Z, r24
	*hour = i2c_readdata(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2d4:	f8 01       	movw	r30, r16
 2d6:	80 83       	st	Z, r24
	*day = i2c_readdata(1);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2de:	f4 01       	movw	r30, r8
 2e0:	80 83       	st	Z, r24
	*date = i2c_readdata(1);
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2e8:	f5 01       	movw	r30, r10
 2ea:	80 83       	st	Z, r24
	*month = i2c_readdata(1);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2f2:	f3 01       	movw	r30, r6
 2f4:	80 83       	st	Z, r24
	*year = i2c_readdata(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <i2c_readdata>
 2fc:	88 83       	st	Y, r24
	while (!(TWCR & (1<<TWINT)));
}

void i2c_stop()
{
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
 2fe:	56 be       	out	0x36, r5	; 54
	*month = i2c_readdata(1);
	*year = i2c_readdata(0);
	
	i2c_stop();
	
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	bf 90       	pop	r11
 312:	af 90       	pop	r10
 314:	9f 90       	pop	r9
 316:	8f 90       	pop	r8
 318:	7f 90       	pop	r7
 31a:	6f 90       	pop	r6
 31c:	5f 90       	pop	r5
 31e:	08 95       	ret

00000320 <init1307>:
#include <stdlib.h>
#include <avr/interrupt.h>

void i2c_initialize(int TWBR_value, unsigned char prescalar)
{
	TWCR = (1<<TWEN);
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	86 bf       	out	0x36, r24	; 54
	TWSR = prescalar;
 324:	11 b8       	out	0x01, r1	; 1
	TWBR = TWBR_value;
 326:	84 e3       	ldi	r24, 0x34	; 52
 328:	80 b9       	out	0x00, r24	; 0
}

void init1307()
{
	i2c_initialize(52,0);
	i2c_start();
 32a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <i2c_start>
	i2c_writedata(0xD0);
 32e:	80 ed       	ldi	r24, 0xD0	; 208
 330:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(0x07);
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	i2c_writedata(0x00);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <i2c_writedata>
	while (!(TWCR & (1<<TWINT)));
}

void i2c_stop()
{
	TWCR = (1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
 340:	84 e9       	ldi	r24, 0x94	; 148
 342:	86 bf       	out	0x36, r24	; 54
 344:	08 95       	ret

00000346 <send>:
	i2c_writedata(0x00);
	i2c_stop();
}

void send(unsigned char x)
{
 346:	cf 93       	push	r28
 348:	c8 2f       	mov	r28, r24
	lcddata(('0'+(x>>4)));
 34a:	82 95       	swap	r24
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	80 5d       	subi	r24, 0xD0	; 208
 350:	0e 94 71 00 	call	0xe2	; 0xe2 <lcddata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	87 e5       	ldi	r24, 0x57	; 87
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <send+0x12>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <send+0x18>
 35e:	00 00       	nop
	_delay_us(200);
	lcddata(('0'+(x & 0x0F)));
 360:	8c 2f       	mov	r24, r28
 362:	8f 70       	andi	r24, 0x0F	; 15
 364:	80 5d       	subi	r24, 0xD0	; 208
 366:	0e 94 71 00 	call	0xe2	; 0xe2 <lcddata>
	
}
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <main>:
int main(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	27 97       	sbiw	r28, 0x07	; 7
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
	init1307();
 382:	0e 94 90 01 	call	0x320	; 0x320 <init1307>
	lcdinitialise();
 386:	0e 94 90 00 	call	0x120	; 0x120 <lcdinitialise>
	unsigned char year,month,date,day,hour,minute,second;
	//char y[2], mo[2],d[2],h[2],mi[2],s[2];
	set_datetime(0x74,0x07,0x27,0x03,0x23,0x59,0x00);
 38a:	c1 2c       	mov	r12, r1
 38c:	0f 2e       	mov	r0, r31
 38e:	f9 e5       	ldi	r31, 0x59	; 89
 390:	ef 2e       	mov	r14, r31
 392:	f0 2d       	mov	r31, r0
 394:	03 e2       	ldi	r16, 0x23	; 35
 396:	23 e0       	ldi	r18, 0x03	; 3
 398:	47 e2       	ldi	r20, 0x27	; 39
 39a:	67 e0       	ldi	r22, 0x07	; 7
 39c:	84 e7       	ldi	r24, 0x74	; 116
 39e:	0e 94 06 01 	call	0x20c	; 0x20c <set_datetime>
	while (1) 
    {	
		get_datetime(&year, &month, &date, &day, &hour, &minute, &second);
 3a2:	ce 01       	movw	r24, r28
 3a4:	07 96       	adiw	r24, 0x07	; 7
 3a6:	6c 01       	movw	r12, r24
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	7c 01       	movw	r14, r24
 3ac:	8e 01       	movw	r16, r28
 3ae:	0b 5f       	subi	r16, 0xFB	; 251
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	9e 01       	movw	r18, r28
 3b4:	2c 5f       	subi	r18, 0xFC	; 252
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	ae 01       	movw	r20, r28
 3ba:	4d 5f       	subi	r20, 0xFD	; 253
 3bc:	5f 4f       	sbci	r21, 0xFF	; 255
 3be:	be 01       	movw	r22, r28
 3c0:	6e 5f       	subi	r22, 0xFE	; 254
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	05 97       	sbiw	r24, 0x05	; 5
 3c6:	0e 94 38 01 	call	0x270	; 0x270 <get_datetime>
		lcdgotoxy(2,1);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcdgotoxy>
		lcdprint("Date:- ");
 3d2:	80 e6       	ldi	r24, 0x60	; 96
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		lcdprint("20");
 3da:	88 e6       	ldi	r24, 0x68	; 104
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		send(year);
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	0e 94 a3 01 	call	0x346	; 0x346 <send>
		lcdprint ("/");
 3e8:	8b e6       	ldi	r24, 0x6B	; 107
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		send(month);
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	0e 94 a3 01 	call	0x346	; 0x346 <send>
		lcdprint ("/");
 3f6:	8b e6       	ldi	r24, 0x6B	; 107
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		send(date);
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	0e 94 a3 01 	call	0x346	; 0x346 <send>
		lcdgotoxy(2,2);
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcdgotoxy>
		lcdprint("Time:- ");
 40c:	8d e6       	ldi	r24, 0x6D	; 109
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		send(hour);
 414:	8d 81       	ldd	r24, Y+5	; 0x05
 416:	0e 94 a3 01 	call	0x346	; 0x346 <send>
		lcdprint(":");
 41a:	85 e7       	ldi	r24, 0x75	; 117
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		send(minute);
 422:	8e 81       	ldd	r24, Y+6	; 0x06
 424:	0e 94 a3 01 	call	0x346	; 0x346 <send>
		lcdprint(":");
 428:	85 e7       	ldi	r24, 0x75	; 117
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 bb 00 	call	0x176	; 0x176 <lcdprint>
		send(second);
 430:	8f 81       	ldd	r24, Y+7	; 0x07
 432:	0e 94 a3 01 	call	0x346	; 0x346 <send>
    }
 436:	b5 cf       	rjmp	.-150    	; 0x3a2 <main+0x34>

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
