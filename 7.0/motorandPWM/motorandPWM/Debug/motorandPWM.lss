
motorandPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000648  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b9  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>



int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  volatile  uint8_t duty_cycle = 0;
  76:	19 82       	std	Y+1, r1	; 0x01
	
	int P_Scale;
	int i;
	int required_frequency;
	DDRD|=(1<<PIND5);
  78:	8d 9a       	sbi	0x11, 5	; 17
	
	TCCR1A|=(1<<COM1A1)|(1<<WGM11);
  7a:	8f b5       	in	r24, 0x2f	; 47
  7c:	82 68       	ori	r24, 0x82	; 130
  7e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=(1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	8b 61       	ori	r24, 0x1B	; 27
  84:	8e bd       	out	0x2e, r24	; 46
	
	P_Scale = 64;
	required_frequency= 4000;
	ICR1 = (F_CPU/P_Scale*required_frequency)-1;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	99 ec       	ldi	r25, 0xC9	; 201
  8a:	97 bd       	out	0x27, r25	; 39
  8c:	86 bd       	out	0x26, r24	; 38
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	14 e6       	ldi	r17, 0x64	; 100
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	80 e7       	ldi	r24, 0x70	; 112
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
  a4:	41 2f       	mov	r20, r17
  a6:	5f 2f       	mov	r21, r31
		   /*duty_cycle ++;*/
		   
			_delay_ms(50);
			
			for (i=0;i<100;i++){
				duty_cycle++;
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	89 83       	std	Y+1, r24	; 0x01
				OCR1A = (ICR1/100)*duty_cycle;
  ae:	26 b5       	in	r18, 0x26	; 38
  b0:	37 b5       	in	r19, 0x27	; 39
  b2:	e9 81       	ldd	r30, Y+1	; 0x01
  b4:	36 95       	lsr	r19
  b6:	27 95       	ror	r18
  b8:	36 95       	lsr	r19
  ba:	27 95       	ror	r18
  bc:	ab e7       	ldi	r26, 0x7B	; 123
  be:	b4 e1       	ldi	r27, 0x14	; 20
  c0:	0e 94 6f 00 	call	0xde	; 0xde <__umulhisi3>
  c4:	96 95       	lsr	r25
  c6:	87 95       	ror	r24
  c8:	e8 9f       	mul	r30, r24
  ca:	90 01       	movw	r18, r0
  cc:	e9 9f       	mul	r30, r25
  ce:	30 0d       	add	r19, r0
  d0:	11 24       	eor	r1, r1
  d2:	3b bd       	out	0x2b, r19	; 43
  d4:	2a bd       	out	0x2a, r18	; 42
  d6:	41 50       	subi	r20, 0x01	; 1
  d8:	51 09       	sbc	r21, r1
		
		   /*duty_cycle ++;*/
		   
			_delay_ms(50);
			
			for (i=0;i<100;i++){
  da:	31 f7       	brne	.-52     	; 0xa8 <main+0x3c>
  dc:	da cf       	rjmp	.-76     	; 0x92 <main+0x26>

000000de <__umulhisi3>:
  de:	a2 9f       	mul	r26, r18
  e0:	b0 01       	movw	r22, r0
  e2:	b3 9f       	mul	r27, r19
  e4:	c0 01       	movw	r24, r0
  e6:	a3 9f       	mul	r26, r19
  e8:	70 0d       	add	r23, r0
  ea:	81 1d       	adc	r24, r1
  ec:	11 24       	eor	r1, r1
  ee:	91 1d       	adc	r25, r1
  f0:	b2 9f       	mul	r27, r18
  f2:	70 0d       	add	r23, r0
  f4:	81 1d       	adc	r24, r1
  f6:	11 24       	eor	r1, r1
  f8:	91 1d       	adc	r25, r1
  fa:	08 95       	ret

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
