
TWItest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000003ce  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004b  0080006e  0080006e  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f38  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d9  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062e  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d8  00000000  00000000  00002d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_13>
  38:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3b       	cpi	r26, 0xB9	; 185
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8a:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z13HMC5883L_initv>:
   int calculateAngle(){	
   
	//  - Compass heading = atan2(y/x) -> Radian     
	//  - True Heading    = Magnetic Heading + declination Angle -> Radian
	   return ((atan2((double)raw_y,(double)raw_x)* 180 / 3.14159265 + 180.0));
   }
  92:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z8twi_initv>
  96:	8c e3       	ldi	r24, 0x3C	; 60
  98:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z9twi_starth>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z8twi_stopv>
  ac:	8c e3       	ldi	r24, 0x3C	; 60
  ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z9twi_starth>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  b8:	80 ea       	ldi	r24, 0xA0	; 160
  ba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z8twi_stopv>
  c2:	8c e3       	ldi	r24, 0x3C	; 60
  c4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z9twi_starth>
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  d4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z8twi_stopv>
  d8:	08 95       	ret

000000da <_Z13HMC5883L_readv>:
  da:	cf 93       	push	r28
  dc:	8c e3       	ldi	r24, 0x3C	; 60
  de:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z9twi_starth>
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z9twi_writeh>
  e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z8twi_stopv>
  ec:	8d e3       	ldi	r24, 0x3D	; 61
  ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z9twi_starth>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8twi_readh>
  f8:	c8 2f       	mov	r28, r24
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8twi_readh>
 100:	2c 2f       	mov	r18, r28
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	32 2f       	mov	r19, r18
 106:	22 27       	eor	r18, r18
 108:	28 2b       	or	r18, r24
 10a:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <raw_x+0x1>
 10e:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <raw_x>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8twi_readh>
 118:	c8 2f       	mov	r28, r24
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8twi_readh>
 120:	2c 2f       	mov	r18, r28
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	32 2f       	mov	r19, r18
 126:	22 27       	eor	r18, r18
 128:	28 2b       	or	r18, r24
 12a:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__data_end+0x1>
 12e:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__data_end>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8twi_readh>
 138:	c8 2f       	mov	r28, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z8twi_readh>
 140:	2c 2f       	mov	r18, r28
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	32 2f       	mov	r19, r18
 146:	22 27       	eor	r18, r18
 148:	28 2b       	or	r18, r24
 14a:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <raw_y+0x1>
 14e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <raw_y>
 152:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_Z8twi_stopv>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <main>:

int main(void)
{
	
	
	HMC5883L_init();  
 15a:	0e 94 49 00 	call	0x92	; 0x92 <_Z13HMC5883L_initv>
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 15e:	87 e6       	ldi	r24, 0x67	; 103
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10uart0_initj>
	uart0_puts("-----");
 166:	80 e6       	ldi	r24, 0x60	; 96
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 a1 01 	call	0x342	; 0x342 <_Z10uart0_putsPKc>
	
	while (1)
	{
		
		HMC5883L_read();		     
 16e:	0e 94 6d 00 	call	0xda	; 0xda <_Z13HMC5883L_readv>
		
		uart0_putint(raw_x);
 172:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <raw_x>
 176:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <raw_x+0x1>
 17a:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z12uart0_putinti>
		uart0_puts("\t");
 17e:	86 e6       	ldi	r24, 0x66	; 102
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 a1 01 	call	0x342	; 0x342 <_Z10uart0_putsPKc>
		uart0_putint(raw_y);
 186:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <raw_y>
 18a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <raw_y+0x1>
 18e:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z12uart0_putinti>
		uart0_puts("\t \n\r");
 192:	88 e6       	ldi	r24, 0x68	; 104
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 a1 01 	call	0x342	; 0x342 <_Z10uart0_putsPKc>
#include "HMC5883L.h"
#include "uart.h"
#include "TWI.h"


int main(void)
 19a:	e9 cf       	rjmp	.-46     	; 0x16e <main+0x14>

0000019c <_Z8twi_initv>:
#include "TWI.h"


void twi_init(void)
{
        TWBR = ktwbr_val ;                                    // Bit-rate for clock frequency
 19c:	88 e4       	ldi	r24, 0x48	; 72
 19e:	80 b9       	out	0x00, r24	; 0
	TWSR = (0 << TWPS1) | (0<<TWPS0) ;                    // Pre-scale set to 1
 1a0:	11 b8       	out	0x01, r1	; 1
	TWCR = (1 << TWEN) |
 	       (0 << TWEA) |  (0 << TWSTA) | (0 << TWSTO) ;   // No signal request
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	86 bf       	out	0x36, r24	; 54
 1a6:	08 95       	ret

000001a8 <_Z9twi_starth>:
{

   
	TWCR = 	(1 << TWEN)  |				      //  Activate the TWI interface.
		(1 << TWINT) |                                //  Clear the interrupt flag
	        (0 << TWEA)  | (1 << TWSTA) | (0 << TWSTO);   //  Check the bus and generate START condition if bus is free.
 1a8:	94 ea       	ldi	r25, 0xA4	; 164
 1aa:	96 bf       	out	0x36, r25	; 54
	                                     
	while (!(TWCR & (1<<TWINT)));                         // Wait for end of transmission
 1ac:	06 b6       	in	r0, 0x36	; 54
 1ae:	07 fe       	sbrs	r0, 7
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <_Z9twi_starth+0x4>
	
	if(((kTWstatus & 0xF8) != kstart) && ((kTWstatus & 0xF8) != krep_start)) twi_error();	// Check 'Start Condition' transmission (Reset: 0xF8)
 1b2:	91 b1       	in	r25, 0x01	; 1
 1b4:	98 7f       	andi	r25, 0xF8	; 248
 1b6:	98 30       	cpi	r25, 0x08	; 8
 1b8:	09 f0       	breq	.+2      	; 0x1bc <_Z9twi_starth+0x14>
 1ba:	91 b1       	in	r25, 0x01	; 1
	TWDR = address ;                                      // Loads slave address once start condition transmitted    
 1bc:	83 b9       	out	0x03, r24	; 3
	
	TWCR = (1<<TWINT)|(1<<TWEN);                          // Clear flag set during completion of above transmission  
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	86 bf       	out	0x36, r24	; 54
	 					    
	while(!(TWCR & (1<<TWINT)));			      // Wait for end of transmission
 1c2:	06 b6       	in	r0, 0x36	; 54
 1c4:	07 fe       	sbrs	r0, 7
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <_Z9twi_starth+0x1a>
	 
	if (((kTWstatus & 0xF8) != kslave_addr) && ((kTWstatus & 0xF8) !=ksalve_addw )) twi_error();  //Check TWSR ifslave has acknowledged R/W mode 
 1c8:	81 b1       	in	r24, 0x01	; 1
 1ca:	88 7f       	andi	r24, 0xF8	; 248
 1cc:	80 34       	cpi	r24, 0x40	; 64
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <_Z9twi_starth+0x2a>
 1d0:	81 b1       	in	r24, 0x01	; 1
 1d2:	08 95       	ret

000001d4 <_Z8twi_stopv>:
*/
void twi_stop(void)
{
	TWCR = (1 << TWEN)  |                               // Enable TWI interface
	       (1 << TWINT) |                               // Clear Interrupt flag 
	       (0 << TWEA)  | (0 << TWSTA) | (1 << TWSTO);  // Generate STOP condition
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	86 bf       	out	0x36, r24	; 54
	
	while(TWCR & (1<<TWSTO));
 1d8:	06 b6       	in	r0, 0x36	; 54
 1da:	04 fc       	sbrc	r0, 4
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <_Z8twi_stopv+0x4>
}
 1de:	08 95       	ret

000001e0 <_Z8twi_readh>:
  */
unsigned char twi_read(unsigned char ack)
{      
		TWCR = (1 << TWEN)  |                          // Start TWI
		       (1 << TWINT) |                                 // Clear interrupt flag
		      (ack << TWEA) | (0 << TWSTA) | (0 << TWSTO);  //  Acknowledge data on reception	if ack =1 else do not acknowledge
 1e0:	20 e4       	ldi	r18, 0x40	; 64
 1e2:	82 9f       	mul	r24, r18
 1e4:	c0 01       	movw	r24, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	84 68       	ori	r24, 0x84	; 132
 1ea:	86 bf       	out	0x36, r24	; 54

	
	while (!(TWCR & (1<<TWINT)));           // Wait until data is read
 1ec:	06 b6       	in	r0, 0x36	; 54
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <_Z8twi_readh+0xc>
	return TWDR;                            // Return received data
 1f2:	83 b1       	in	r24, 0x03	; 3

}
 1f4:	08 95       	ret

000001f6 <_Z9twi_writeh>:
/*
 *  Send data to previously addressed device  
 */
void twi_write( uint8_t value )
{	
	TWDR = value;                                 // Load data to TWDR to send to the addressed device
 1f6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);                // Clear TWINT bit in TWCR to start transmission of data
 1f8:	84 e8       	ldi	r24, 0x84	; 132
 1fa:	86 bf       	out	0x36, r24	; 54

        while(!(TWCR & (1<<TWINT)));	              // Wait for TWINT flag set i.e. until transmission completed
 1fc:	06 b6       	in	r0, 0x36	; 54
 1fe:	07 fe       	sbrs	r0, 7
 200:	fd cf       	rjmp	.-6      	; 0x1fc <_Z9twi_writeh+0x6>

	if( (kTWstatus & 0xF8) != kdata) twi_error(); // If status different from data_ack, error();
 202:	81 b1       	in	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <__vector_13>:
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	2c b1       	in	r18, 0x0c	; 12
 21e:	88 71       	andi	r24, 0x18	; 24
 220:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <_ZL12UART0_RxHead>
 224:	ef 5f       	subi	r30, 0xFF	; 255
 226:	ef 71       	andi	r30, 0x1F	; 31
 228:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <_ZL12UART0_RxTail>
 22c:	e9 17       	cp	r30, r25
 22e:	39 f0       	breq	.+14     	; 0x23e <__vector_13+0x38>
 230:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <_ZL12UART0_RxHead>
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e7 58       	subi	r30, 0x87	; 135
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	20 83       	st	Z, r18
 23c:	01 c0       	rjmp	.+2      	; 0x240 <__vector_13+0x3a>
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <_ZL17UART0_LastRxError>
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_14>:
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
 26a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <_ZL12UART0_TxHead>
 26e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <_ZL12UART0_TxTail>
 272:	98 17       	cp	r25, r24
 274:	61 f0       	breq	.+24     	; 0x28e <__vector_14+0x36>
 276:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <_ZL12UART0_TxTail>
 27a:	ef 5f       	subi	r30, 0xFF	; 255
 27c:	ef 71       	andi	r30, 0x1F	; 31
 27e:	e0 93 77 00 	sts	0x0077, r30	; 0x800077 <_ZL12UART0_TxTail>
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e7 56       	subi	r30, 0x67	; 103
 286:	ff 4f       	sbci	r31, 0xFF	; 255
 288:	80 81       	ld	r24, Z
 28a:	8c b9       	out	0x0c, r24	; 12
 28c:	01 c0       	rjmp	.+2      	; 0x290 <__vector_14+0x38>
 28e:	55 98       	cbi	0x0a, 5	; 10
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <_Z10uart0_initj>:
 2a2:	78 94       	sei
 2a4:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <_ZL12UART0_TxHead>
 2a8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <_ZL12UART0_TxTail>
 2ac:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <_ZL12UART0_RxHead>
 2b0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <_ZL12UART0_RxTail>
 2b4:	99 23       	and	r25, r25
 2b6:	1c f4       	brge	.+6      	; 0x2be <_Z10uart0_initj+0x1c>
 2b8:	22 e0       	ldi	r18, 0x02	; 2
 2ba:	2b b9       	out	0x0b, r18	; 11
 2bc:	9f 77       	andi	r25, 0x7F	; 127
 2be:	90 bd       	out	0x20, r25	; 32
 2c0:	89 b9       	out	0x09, r24	; 9
 2c2:	88 e9       	ldi	r24, 0x98	; 152
 2c4:	8a b9       	out	0x0a, r24	; 10
 2c6:	86 e8       	ldi	r24, 0x86	; 134
 2c8:	80 bd       	out	0x20, r24	; 32
 2ca:	08 95       	ret

000002cc <_Z10uart0_putch>:
void uart0_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART0_TxHead + 1) & UART_TX_BUFFER_MASK;
 2cc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <_ZL12UART0_TxHead>
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART0_TxTail) {
 2d4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <_ZL12UART0_TxTail>
 2d8:	29 17       	cp	r18, r25
 2da:	e1 f3       	breq	.-8      	; 0x2d4 <_Z10uart0_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART0_TxBuf[tmphead] = data;
 2dc:	e2 2f       	mov	r30, r18
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	e7 56       	subi	r30, 0x67	; 103
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 83       	st	Z, r24
	UART0_TxHead = tmphead;
 2e6:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <_ZL12UART0_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
 2ea:	55 9a       	sbi	0x0a, 5	; 10
 2ec:	08 95       	ret

000002ee <_Z12uart0_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_putint(int input)
{
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	2f 97       	sbiw	r28, 0x0f	; 15
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 306:	4a e0       	ldi	r20, 0x0A	; 10
 308:	be 01       	movw	r22, r28
 30a:	6f 5f       	subi	r22, 0xFF	; 255
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	0e 94 b0 01 	call	0x360	; 0x360 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	88 23       	and	r24, r24
 316:	51 f0       	breq	.+20     	; 0x32c <_Z12uart0_putinti+0x3e>
 318:	8e 01       	movw	r16, r28
 31a:	0e 5f       	subi	r16, 0xFE	; 254
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
	uart0_putc(*s++);
 31e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10uart0_putch>
void uart0_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 322:	f8 01       	movw	r30, r16
 324:	81 91       	ld	r24, Z+
 326:	8f 01       	movw	r16, r30
 328:	81 11       	cpse	r24, r1
 32a:	f9 cf       	rjmp	.-14     	; 0x31e <_Z12uart0_putinti+0x30>
	uart0_putc(*s++);

	}/* uart0_putint */
 32c:	2f 96       	adiw	r28, 0x0f	; 15
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <_Z10uart0_putsPKc>:
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	ec 01       	movw	r28, r24
	while (*s)
 348:	88 81       	ld	r24, Y
 34a:	88 23       	and	r24, r24
 34c:	31 f0       	breq	.+12     	; 0x35a <_Z10uart0_putsPKc+0x18>
 34e:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 350:	0e 94 66 01 	call	0x2cc	; 0x2cc <_Z10uart0_putch>
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
	while (*s)
 354:	89 91       	ld	r24, Y+
 356:	81 11       	cpse	r24, r1
 358:	fb cf       	rjmp	.-10     	; 0x350 <_Z10uart0_putsPKc+0xe>
		uart0_putc(*s++);

}/* uart_puts */
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <__itoa_ncheck>:
 360:	bb 27       	eor	r27, r27
 362:	4a 30       	cpi	r20, 0x0A	; 10
 364:	31 f4       	brne	.+12     	; 0x372 <__itoa_ncheck+0x12>
 366:	99 23       	and	r25, r25
 368:	22 f4       	brpl	.+8      	; 0x372 <__itoa_ncheck+0x12>
 36a:	bd e2       	ldi	r27, 0x2D	; 45
 36c:	90 95       	com	r25
 36e:	81 95       	neg	r24
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	0c 94 bc 01 	jmp	0x378	; 0x378 <__utoa_common>

00000376 <__utoa_ncheck>:
 376:	bb 27       	eor	r27, r27

00000378 <__utoa_common>:
 378:	fb 01       	movw	r30, r22
 37a:	55 27       	eor	r21, r21
 37c:	aa 27       	eor	r26, r26
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	aa 1f       	adc	r26, r26
 384:	a4 17       	cp	r26, r20
 386:	10 f0       	brcs	.+4      	; 0x38c <__utoa_common+0x14>
 388:	a4 1b       	sub	r26, r20
 38a:	83 95       	inc	r24
 38c:	50 51       	subi	r21, 0x10	; 16
 38e:	b9 f7       	brne	.-18     	; 0x37e <__utoa_common+0x6>
 390:	a0 5d       	subi	r26, 0xD0	; 208
 392:	aa 33       	cpi	r26, 0x3A	; 58
 394:	08 f0       	brcs	.+2      	; 0x398 <__utoa_common+0x20>
 396:	a9 5d       	subi	r26, 0xD9	; 217
 398:	a1 93       	st	Z+, r26
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	79 f7       	brne	.-34     	; 0x37c <__utoa_common+0x4>
 39e:	b1 11       	cpse	r27, r1
 3a0:	b1 93       	st	Z+, r27
 3a2:	11 92       	st	Z+, r1
 3a4:	cb 01       	movw	r24, r22
 3a6:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <strrev>

000003aa <strrev>:
 3aa:	dc 01       	movw	r26, r24
 3ac:	fc 01       	movw	r30, r24
 3ae:	67 2f       	mov	r22, r23
 3b0:	71 91       	ld	r23, Z+
 3b2:	77 23       	and	r23, r23
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <strrev+0x4>
 3b6:	32 97       	sbiw	r30, 0x02	; 2
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <strrev+0x18>
 3ba:	7c 91       	ld	r23, X
 3bc:	6d 93       	st	X+, r22
 3be:	70 83       	st	Z, r23
 3c0:	62 91       	ld	r22, -Z
 3c2:	ae 17       	cp	r26, r30
 3c4:	bf 07       	cpc	r27, r31
 3c6:	c8 f3       	brcs	.-14     	; 0x3ba <strrev+0x10>
 3c8:	08 95       	ret

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
