
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e7  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000146  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000
#include <avr/io.h>

int main(void)
{
	DDRD=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b00000011;
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	88 bb       	out	0x18, r24	; 24
	TCCR0=0x07;
  74:	87 e0       	ldi	r24, 0x07	; 7
  76:	83 bf       	out	0x33, r24	; 51
	TCCR1B  = 0x06;
  78:	86 e0       	ldi	r24, 0x06	; 6
  7a:	8e bd       	out	0x2e, r24	; 46
	TCNT1L = 0x00;
  7c:	1c bc       	out	0x2c, r1	; 44
	TCNT0=0;
  7e:	12 be       	out	0x32, r1	; 50
	while(1)
	{
		if(TCNT0>0)
		{
			PORTD=0xFF;	
  80:	9f ef       	ldi	r25, 0xFF	; 255
	TCCR1B  = 0x06;
	TCNT1L = 0x00;
	TCNT0=0;
	while(1)
	{
		if(TCNT0>0)
  82:	82 b7       	in	r24, 0x32	; 50
  84:	88 23       	and	r24, r24
  86:	11 f0       	breq	.+4      	; 0x8c <main+0x20>
		{
			PORTD=0xFF;	
  88:	92 bb       	out	0x12, r25	; 18
			TCNT1L = 0x00;
  8a:	1c bc       	out	0x2c, r1	; 44
		}
		if(TCNT1L > 0)
  8c:	8c b5       	in	r24, 0x2c	; 44
  8e:	88 23       	and	r24, r24
  90:	c1 f3       	breq	.-16     	; 0x82 <main+0x16>
		{
			PORTD=0x00;
  92:	12 ba       	out	0x12, r1	; 18
			TCNT0 = 0x00;
  94:	12 be       	out	0x32, r1	; 50
  96:	f5 cf       	rjmp	.-22     	; 0x82 <main+0x16>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
