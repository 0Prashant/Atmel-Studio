
QTR-8A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080006a  0080006a  00000384  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d67  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  0000120f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000463  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_13>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 00 	call	0xba	; 0xba <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z8ADC_initv>:
#include "ADC.h"
#define F_CPU 16000000UL

void ADC_init(){

	ADMUX  |= (0<<REFS1)|(0<<REFS0);            // External reference voltage from AREF
  92:	87 b1       	in	r24, 0x07	; 7
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);                        // Enable ADC
  96:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // Pre-scale 128
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	08 95       	ret

000000a0 <_Z10ADC_setPinh>:

}

void ADC_setPin(uint8_t pin){
	
	ADCSRA |= (1<<ADEN);                        // Enable ADC
  a0:	37 9a       	sbi	0x06, 7	; 6
	ADMUX |= (pin<<MUX0);		            // Put the pin value to ADC Multiplexer Selection Register
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
	DDRC  = 0;
  a8:	14 ba       	out	0x14, r1	; 20
  aa:	08 95       	ret

000000ac <_Z12ADC_getValuev>:
}

uint16_t ADC_getValue(void){

	ADCSRA |= (1<<ADSC);            // Start conversion
  ac:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1<<ADIF)));  // Waiting for conversion to complete
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <_Z12ADC_getValuev+0x2>
	
	ADCSRA |= (1<<ADIF);            // Clear ADIF flag for next conversion
  b2:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
	ADCSRA |= (0<<ADEN);            // Disable ADC
  b8:	08 95       	ret

000000ba <main>:
#define F_CPU 16000000UL


int main(void)
{
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z10uart0_initj>

	 ADC_init();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <_Z8ADC_initv>
		
	while (1)
	{	
		
 		ADC_setPin(4);
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z10ADC_setPinh>
 		int ADC0_data = ADC_getValue();
  cc:	0e 94 56 00 	call	0xac	; 0xac <_Z12ADC_getValuev>
  d0:	ec 01       	movw	r28, r24
 		uart0_puts("a:");
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z10uart0_putsPKc>
		uart0_putint(ADC0_data);
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 03 01 	call	0x206	; 0x206 <_Z12uart0_putinti>
 		uart0_puts("\n \r");
  e0:	83 e6       	ldi	r24, 0x63	; 99
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z10uart0_putsPKc>

 		ADC_setPin(5);
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z10ADC_setPinh>
 		int ADC1_data = ADC_getValue();
  ee:	0e 94 56 00 	call	0xac	; 0xac <_Z12ADC_getValuev>
  f2:	ec 01       	movw	r28, r24
		uart0_puts("b:");
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z10uart0_putsPKc>
 		uart0_putint(ADC1_data);
  fc:	ce 01       	movw	r24, r28
  fe:	0e 94 03 01 	call	0x206	; 0x206 <_Z12uart0_putinti>
 		uart0_puts("\n \r");
 102:	83 e6       	ldi	r24, 0x63	; 99
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z10uart0_putsPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	81 ee       	ldi	r24, 0xE1	; 225
 10e:	94 e0       	ldi	r25, 0x04	; 4
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x56>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x60>
 11a:	00 00       	nop
 11c:	d4 cf       	rjmp	.-88     	; 0xc6 <main+0xc>

0000011e <__vector_13>:
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	2c b1       	in	r18, 0x0c	; 12
 136:	88 71       	andi	r24, 0x18	; 24
 138:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <_ZL12UART0_RxHead>
 13c:	ef 5f       	subi	r30, 0xFF	; 255
 13e:	ef 71       	andi	r30, 0x1F	; 31
 140:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_ZL12UART0_RxTail>
 144:	e9 17       	cp	r30, r25
 146:	39 f0       	breq	.+14     	; 0x156 <__vector_13+0x38>
 148:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <_ZL12UART0_RxHead>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e1 59       	subi	r30, 0x91	; 145
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	20 83       	st	Z, r18
 154:	01 c0       	rjmp	.+2      	; 0x158 <__vector_13+0x3a>
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_14>:
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
 182:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL12UART0_TxHead>
 186:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL12UART0_TxTail>
 18a:	98 17       	cp	r25, r24
 18c:	61 f0       	breq	.+24     	; 0x1a6 <__vector_14+0x36>
 18e:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <_ZL12UART0_TxTail>
 192:	ef 5f       	subi	r30, 0xFF	; 255
 194:	ef 71       	andi	r30, 0x1F	; 31
 196:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <_ZL12UART0_TxTail>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	e1 57       	subi	r30, 0x71	; 113
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	80 81       	ld	r24, Z
 1a2:	8c b9       	out	0x0c, r24	; 12
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <__vector_14+0x38>
 1a6:	55 98       	cbi	0x0a, 5	; 10
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <_Z10uart0_initj>:
 1ba:	78 94       	sei
 1bc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <_ZL12UART0_TxHead>
 1c0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <_ZL12UART0_TxTail>
 1c4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <_ZL12UART0_RxHead>
 1c8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <_ZL12UART0_RxTail>
 1cc:	99 23       	and	r25, r25
 1ce:	1c f4       	brge	.+6      	; 0x1d6 <_Z10uart0_initj+0x1c>
 1d0:	22 e0       	ldi	r18, 0x02	; 2
 1d2:	2b b9       	out	0x0b, r18	; 11
 1d4:	9f 77       	andi	r25, 0x7F	; 127
 1d6:	90 bd       	out	0x20, r25	; 32
 1d8:	89 b9       	out	0x09, r24	; 9
 1da:	88 e9       	ldi	r24, 0x98	; 152
 1dc:	8a b9       	out	0x0a, r24	; 10
 1de:	86 e8       	ldi	r24, 0x86	; 134
 1e0:	80 bd       	out	0x20, r24	; 32
 1e2:	08 95       	ret

000001e4 <_Z10uart0_putch>:
void uart0_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART0_TxHead + 1) & UART_TX_BUFFER_MASK;
 1e4:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <_ZL12UART0_TxHead>
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART0_TxTail) {
 1ec:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <_ZL12UART0_TxTail>
 1f0:	29 17       	cp	r18, r25
 1f2:	e1 f3       	breq	.-8      	; 0x1ec <_Z10uart0_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART0_TxBuf[tmphead] = data;
 1f4:	e2 2f       	mov	r30, r18
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	e1 57       	subi	r30, 0x71	; 113
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 83       	st	Z, r24
	UART0_TxHead = tmphead;
 1fe:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <_ZL12UART0_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
 202:	55 9a       	sbi	0x0a, 5	; 10
 204:	08 95       	ret

00000206 <_Z12uart0_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_putint(int input)
{
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	2f 97       	sbiw	r28, 0x0f	; 15
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 21e:	4a e0       	ldi	r20, 0x0A	; 10
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	0e 94 3c 01 	call	0x278	; 0x278 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	88 23       	and	r24, r24
 22e:	51 f0       	breq	.+20     	; 0x244 <_Z12uart0_putinti+0x3e>
 230:	8e 01       	movw	r16, r28
 232:	0e 5f       	subi	r16, 0xFE	; 254
 234:	1f 4f       	sbci	r17, 0xFF	; 255
	uart0_putc(*s++);
 236:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Z10uart0_putch>
void uart0_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 23a:	f8 01       	movw	r30, r16
 23c:	81 91       	ld	r24, Z+
 23e:	8f 01       	movw	r16, r30
 240:	81 11       	cpse	r24, r1
 242:	f9 cf       	rjmp	.-14     	; 0x236 <_Z12uart0_putinti+0x30>
	uart0_putc(*s++);

	}/* uart0_putint */
 244:	2f 96       	adiw	r28, 0x0f	; 15
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <_Z10uart0_putsPKc>:
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
	while (*s)
 260:	88 81       	ld	r24, Y
 262:	88 23       	and	r24, r24
 264:	31 f0       	breq	.+12     	; 0x272 <_Z10uart0_putsPKc+0x18>
 266:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 268:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Z10uart0_putch>
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
	while (*s)
 26c:	89 91       	ld	r24, Y+
 26e:	81 11       	cpse	r24, r1
 270:	fb cf       	rjmp	.-10     	; 0x268 <_Z10uart0_putsPKc+0xe>
		uart0_putc(*s++);

}/* uart_puts */
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <__itoa_ncheck>:
 278:	bb 27       	eor	r27, r27
 27a:	4a 30       	cpi	r20, 0x0A	; 10
 27c:	31 f4       	brne	.+12     	; 0x28a <__itoa_ncheck+0x12>
 27e:	99 23       	and	r25, r25
 280:	22 f4       	brpl	.+8      	; 0x28a <__itoa_ncheck+0x12>
 282:	bd e2       	ldi	r27, 0x2D	; 45
 284:	90 95       	com	r25
 286:	81 95       	neg	r24
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	0c 94 48 01 	jmp	0x290	; 0x290 <__utoa_common>

0000028e <__utoa_ncheck>:
 28e:	bb 27       	eor	r27, r27

00000290 <__utoa_common>:
 290:	fb 01       	movw	r30, r22
 292:	55 27       	eor	r21, r21
 294:	aa 27       	eor	r26, r26
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	aa 1f       	adc	r26, r26
 29c:	a4 17       	cp	r26, r20
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__utoa_common+0x14>
 2a0:	a4 1b       	sub	r26, r20
 2a2:	83 95       	inc	r24
 2a4:	50 51       	subi	r21, 0x10	; 16
 2a6:	b9 f7       	brne	.-18     	; 0x296 <__utoa_common+0x6>
 2a8:	a0 5d       	subi	r26, 0xD0	; 208
 2aa:	aa 33       	cpi	r26, 0x3A	; 58
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <__utoa_common+0x20>
 2ae:	a9 5d       	subi	r26, 0xD9	; 217
 2b0:	a1 93       	st	Z+, r26
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	79 f7       	brne	.-34     	; 0x294 <__utoa_common+0x4>
 2b6:	b1 11       	cpse	r27, r1
 2b8:	b1 93       	st	Z+, r27
 2ba:	11 92       	st	Z+, r1
 2bc:	cb 01       	movw	r24, r22
 2be:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <strrev>

000002c2 <strrev>:
 2c2:	dc 01       	movw	r26, r24
 2c4:	fc 01       	movw	r30, r24
 2c6:	67 2f       	mov	r22, r23
 2c8:	71 91       	ld	r23, Z+
 2ca:	77 23       	and	r23, r23
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <strrev+0x4>
 2ce:	32 97       	sbiw	r30, 0x02	; 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <strrev+0x18>
 2d2:	7c 91       	ld	r23, X
 2d4:	6d 93       	st	X+, r22
 2d6:	70 83       	st	Z, r23
 2d8:	62 91       	ld	r22, -Z
 2da:	ae 17       	cp	r26, r30
 2dc:	bf 07       	cpc	r27, r31
 2de:	c8 f3       	brcs	.-14     	; 0x2d2 <strrev+0x10>
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
