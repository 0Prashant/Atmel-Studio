
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000a2  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000062  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e9  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000050f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRD = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  70:	84 bb       	out	0x14, r24	; 20
	unsigned char p,q;
	TCCR0 = 1<<CS12;
  72:	84 e0       	ldi	r24, 0x04	; 4
  74:	83 bf       	out	0x33, r24	; 51
    while (1) 
    {
		if (TCNT0>250)
  76:	82 b7       	in	r24, 0x32	; 50
  78:	8b 3f       	cpi	r24, 0xFB	; 251
  7a:	e8 f3       	brcs	.-6      	; 0x76 <main+0xa>
		{
			TCNT0 = 0;
  7c:	12 be       	out	0x32, r1	; 50
			p++;
  7e:	2f 5f       	subi	r18, 0xFF	; 255
			q++;
  80:	9f 5f       	subi	r25, 0xFF	; 255
			if (p>12)		
  82:	2d 30       	cpi	r18, 0x0D	; 13
  84:	20 f0       	brcs	.+8      	; 0x8e <main+0x22>
			{
				p=0;
				PORTD ^= 0b11111111;
  86:	82 b3       	in	r24, 0x12	; 18
  88:	80 95       	com	r24
  8a:	82 bb       	out	0x12, r24	; 18
			TCNT0 = 0;
			p++;
			q++;
			if (p>12)		
			{
				p=0;
  8c:	20 e0       	ldi	r18, 0x00	; 0
				PORTD ^= 0b11111111;
			}
			if (q>1)
  8e:	92 30       	cpi	r25, 0x02	; 2
  90:	90 f3       	brcs	.-28     	; 0x76 <main+0xa>
			{
				q=0;
				PORTC ^= 0b11111111;
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 95       	com	r24
  96:	85 bb       	out	0x15, r24	; 21
				p=0;
				PORTD ^= 0b11111111;
			}
			if (q>1)
			{
				q=0;
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	ed cf       	rjmp	.-38     	; 0x76 <main+0xa>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
