
communication_ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080013a  0080013a  0000033e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000048d  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f2  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000359  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000409  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  9e:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z11start_timerv>:
	distance_in_cm = ((value / 60)) ;
	final = distance_in_cm;
	itoa(final,distance_in_char,10);
	UART0_writes("  DISTANCE = ");
	UART0_writes(distance_in_char);
	UART0_writes("\n");
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 81 00 	sts	0x0081, r24
  ac:	10 92 85 00 	sts	0x0085, r1
  b0:	10 92 84 00 	sts	0x0084, r1
  b4:	10 92 3c 01 	sts	0x013C, r1
  b8:	08 95       	ret

000000ba <_Z10stop_timerv>:
  ba:	e4 e8       	ldi	r30, 0x84	; 132
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	90 93 3b 01 	sts	0x013B, r25
  c6:	80 93 3a 01 	sts	0x013A, r24
  ca:	10 92 81 00 	sts	0x0081, r1
  ce:	11 82       	std	Z+1, r1	; 0x01
  d0:	10 82       	st	Z, r1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 3c 01 	sts	0x013C, r24
  d8:	08 95       	ret

000000da <_Z18trigger_ultrasonicv>:
  da:	1b b8       	out	0x0b, r1	; 11
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z18trigger_ultrasonicv+0x4>
  e2:	00 00       	nop
  e4:	5b 9a       	sbi	0x0b, 3	; 11
  e6:	80 e4       	ldi	r24, 0x40	; 64
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_Z18trigger_ultrasonicv+0xe>
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z18trigger_ultrasonicv+0x18>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <main>:
}

int main(void)
{
	UART0_init(9600);
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	95 e2       	ldi	r25, 0x25	; 37
  fe:	0e 94 c3 00 	call	0x186	; 0x186 <UART0_init>
	i=1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 3c 01 	sts	0x013C, r24
	DDRD |=1<<trigger;
 108:	53 9a       	sbi	0x0a, 3	; 10
	DDRD &= ~(1<<echo);
 10a:	52 98       	cbi	0x0a, 2	; 10
	
	sei();
 10c:	78 94       	sei
	EICRA = 1<< INT0;
 10e:	80 93 69 00 	sts	0x0069, r24
	MCUCR |= (1<< ISC00);
 112:	85 b7       	in	r24, 0x35	; 53
 114:	81 60       	ori	r24, 0x01	; 1
 116:	85 bf       	out	0x35, r24	; 53
	TCCR1B |= (1<<CS10) ;
 118:	e1 e8       	ldi	r30, 0x81	; 129
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
	
	UART0_writes("**********...Initializing ultrasonic module...**********");
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 e6 00 	call	0x1cc	; 0x1cc <UART0_writes>
	while (1)
	{
		trigger_ultrasonic();
 12a:	0e 94 6d 00 	call	0xda	; 0xda <_Z18trigger_ultrasonicv>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x34>

00000130 <__vector_1>:
		_delay_ms(200);
 	}
	return 0;
}
ISR (INT0_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	if (i==1)
 152:	80 91 3c 01 	lds	r24, 0x013C
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	19 f4       	brne	.+6      	; 0x160 <__vector_1+0x30>
	{
		start_timer();
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11start_timerv>
 15e:	02 c0       	rjmp	.+4      	; 0x164 <__vector_1+0x34>
	}
	else
	{
		stop_timer();
 160:	0e 94 5d 00 	call	0xba	; 0xba <_Z10stop_timerv>
	}
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <UART0_init>:

 uint8_t UART0_read( void ){
	 while(!(UCSR0A & (1 << RXC0)))
	 ;
	 return UDR0;
 }
 186:	9c 01       	movw	r18, r24
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	60 e4       	ldi	r22, 0x40	; 64
 18e:	72 e4       	ldi	r23, 0x42	; 66
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__divmodsi4>
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	31 09       	sbc	r19, r1
 19c:	30 93 c5 00 	sts	0x00C5, r19
 1a0:	20 93 c4 00 	sts	0x00C4, r18
 1a4:	e1 ec       	ldi	r30, 0xC1	; 193
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 61       	ori	r24, 0x18	; 24
 1ac:	80 83       	st	Z, r24
 1ae:	e2 ec       	ldi	r30, 0xC2	; 194
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	86 60       	ori	r24, 0x06	; 6
 1b6:	80 83       	st	Z, r24
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret

000001bc <UART0_write>:
 1bc:	e0 ec       	ldi	r30, 0xC0	; 192
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	95 ff       	sbrs	r25, 5
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <UART0_write+0x4>
 1c6:	80 93 c6 00 	sts	0x00C6, r24
 1ca:	08 95       	ret

000001cc <UART0_writes>:
 void UART0_writes(const char *str){
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
	 while(*str){
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <UART0_writes+0x18>
 1d8:	21 96       	adiw	r28, 0x01	; 1
		 UART0_write(*str++);
 1da:	0e 94 de 00 	call	0x1bc	; 0x1bc <UART0_write>
	 while(!(UCSR0A & (1 << RXC0)))
	 ;
	 return UDR0;
 }
 void UART0_writes(const char *str){
	 while(*str){
 1de:	89 91       	ld	r24, Y+
 1e0:	81 11       	cpse	r24, r1
 1e2:	fb cf       	rjmp	.-10     	; 0x1da <UART0_writes+0xe>
		 UART0_write(*str++);
	 }
 }
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <__divmodsi4>:
 1ea:	05 2e       	mov	r0, r21
 1ec:	97 fb       	bst	r25, 7
 1ee:	1e f4       	brtc	.+6      	; 0x1f6 <__divmodsi4+0xc>
 1f0:	00 94       	com	r0
 1f2:	0e 94 0c 01 	call	0x218	; 0x218 <__negsi2>
 1f6:	57 fd       	sbrc	r21, 7
 1f8:	07 d0       	rcall	.+14     	; 0x208 <__divmodsi4_neg2>
 1fa:	0e 94 14 01 	call	0x228	; 0x228 <__udivmodsi4>
 1fe:	07 fc       	sbrc	r0, 7
 200:	03 d0       	rcall	.+6      	; 0x208 <__divmodsi4_neg2>
 202:	4e f4       	brtc	.+18     	; 0x216 <__divmodsi4_exit>
 204:	0c 94 0c 01 	jmp	0x218	; 0x218 <__negsi2>

00000208 <__divmodsi4_neg2>:
 208:	50 95       	com	r21
 20a:	40 95       	com	r20
 20c:	30 95       	com	r19
 20e:	21 95       	neg	r18
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	4f 4f       	sbci	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255

00000216 <__divmodsi4_exit>:
 216:	08 95       	ret

00000218 <__negsi2>:
 218:	90 95       	com	r25
 21a:	80 95       	com	r24
 21c:	70 95       	com	r23
 21e:	61 95       	neg	r22
 220:	7f 4f       	sbci	r23, 0xFF	; 255
 222:	8f 4f       	sbci	r24, 0xFF	; 255
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__udivmodsi4>:
 228:	a1 e2       	ldi	r26, 0x21	; 33
 22a:	1a 2e       	mov	r1, r26
 22c:	aa 1b       	sub	r26, r26
 22e:	bb 1b       	sub	r27, r27
 230:	fd 01       	movw	r30, r26
 232:	0d c0       	rjmp	.+26     	; 0x24e <__udivmodsi4_ep>

00000234 <__udivmodsi4_loop>:
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	ee 1f       	adc	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	a2 17       	cp	r26, r18
 23e:	b3 07       	cpc	r27, r19
 240:	e4 07       	cpc	r30, r20
 242:	f5 07       	cpc	r31, r21
 244:	20 f0       	brcs	.+8      	; 0x24e <__udivmodsi4_ep>
 246:	a2 1b       	sub	r26, r18
 248:	b3 0b       	sbc	r27, r19
 24a:	e4 0b       	sbc	r30, r20
 24c:	f5 0b       	sbc	r31, r21

0000024e <__udivmodsi4_ep>:
 24e:	66 1f       	adc	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	1a 94       	dec	r1
 258:	69 f7       	brne	.-38     	; 0x234 <__udivmodsi4_loop>
 25a:	60 95       	com	r22
 25c:	70 95       	com	r23
 25e:	80 95       	com	r24
 260:	90 95       	com	r25
 262:	9b 01       	movw	r18, r22
 264:	ac 01       	movw	r20, r24
 266:	bd 01       	movw	r22, r26
 268:	cf 01       	movw	r24, r30
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
