
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f4  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024b  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f7  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f6  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000114d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  7a:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <enable_lcd>:
void set_num(char num)
{
	char n[5];
	itoa(num,n,10);
	set_strings(n);
}
  82:	92 9a       	sbi	0x12, 2	; 18
  84:	00 00       	nop
  86:	00 00       	nop
  88:	92 98       	cbi	0x12, 2	; 18
  8a:	08 95       	ret

0000008c <check_busy>:
  8c:	17 ba       	out	0x17, r1	; 23
  8e:	91 9a       	sbi	0x12, 1	; 18
  90:	90 98       	cbi	0x12, 0	; 18
  92:	c7 9b       	sbis	0x18, 7	; 24
  94:	04 c0       	rjmp	.+8      	; 0x9e <check_busy+0x12>
  96:	0e 94 41 00 	call	0x82	; 0x82 <enable_lcd>
  9a:	c7 99       	sbic	0x18, 7	; 24
  9c:	fc cf       	rjmp	.-8      	; 0x96 <check_busy+0xa>
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	08 95       	ret

000000a4 <set_cmd>:
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
  a8:	0e 94 46 00 	call	0x8c	; 0x8c <check_busy>
  ac:	c8 bb       	out	0x18, r28	; 24
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	0e 94 41 00 	call	0x82	; 0x82 <enable_lcd>
  b8:	18 ba       	out	0x18, r1	; 24
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <set_ch>:
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
  c2:	0e 94 46 00 	call	0x8c	; 0x8c <check_busy>
  c6:	c8 bb       	out	0x18, r28	; 24
  c8:	91 98       	cbi	0x12, 1	; 18
  ca:	90 9a       	sbi	0x12, 0	; 18
  cc:	0e 94 41 00 	call	0x82	; 0x82 <enable_lcd>
  d0:	18 ba       	out	0x18, r1	; 24
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <set_strings>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <set_strings+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0e 94 5f 00 	call	0xbe	; 0xbe <set_ch>
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <set_strings+0xe>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <initilize>:
void initilize()
{
	DDRD |= 1<<rw | 1 << rs | 1<< en;
  f4:	81 b3       	in	r24, 0x11	; 17
  f6:	87 60       	ori	r24, 0x07	; 7
  f8:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	85 ea       	ldi	r24, 0xA5	; 165
  fc:	9e e0       	ldi	r25, 0x0E	; 14
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <initilize+0xa>
 102:	00 c0       	rjmp	.+0      	; 0x104 <initilize+0x10>
 104:	00 00       	nop
	_delay_ms(15);
	set_cmd(0x01);//clear screen
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 52 00 	call	0xa4	; 0xa4 <set_cmd>
 10c:	83 ef       	ldi	r24, 0xF3	; 243
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <initilize+0x1c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <initilize+0x22>
 116:	00 00       	nop
	_delay_ms(2);
	set_cmd(0x38);
 118:	88 e3       	ldi	r24, 0x38	; 56
 11a:	0e 94 52 00 	call	0xa4	; 0xa4 <set_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	90 e1       	ldi	r25, 0x10	; 16
 120:	9a 95       	dec	r25
 122:	f1 f7       	brne	.-4      	; 0x120 <initilize+0x2c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <initilize+0x32>
	_delay_us(50);
	set_cmd(0b00001110);
 126:	8e e0       	ldi	r24, 0x0E	; 14
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <set_cmd>
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <initilize+0x3a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <initilize+0x40>
 134:	08 95       	ret

00000136 <main>:
void set_num(char num);
void initilize(void);


int main(void)
{initilize();
 136:	0e 94 7a 00 	call	0xf4	; 0xf4 <initilize>
 13a:	c5 e0       	ldi	r28, 0x05	; 5
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 char a[5]="sansi";  /* Replace with your application code */
  for(int i=0;i<5;i++)
  {
	   
	   set_strings("sansii");
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 6b 00 	call	0xd6	; 0xd6 <set_strings>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f e3       	ldi	r18, 0x3F	; 63
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	93 e0       	ldi	r25, 0x03	; 3
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x16>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x20>
 156:	00 00       	nop
 158:	21 97       	sbiw	r28, 0x01	; 1


int main(void)
{initilize();
 char a[5]="sansi";  /* Replace with your application code */
  for(int i=0;i<5;i++)
 15a:	89 f7       	brne	.-30     	; 0x13e <main+0x8>
  
    while (1) 
    {
	
		
    }
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x26>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
