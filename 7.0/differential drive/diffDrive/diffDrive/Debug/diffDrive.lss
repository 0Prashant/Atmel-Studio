
diffDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800060  00800060  00000828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb7  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000847  00000000  00000000  00002291  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000675  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006eb  00000000  00000000  00003389  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c2       	rjmp	.+1070   	; 0x464 <__vector_13>
  36:	00 00       	nop
  38:	3e c2       	rjmp	.+1148   	; 0x4b6 <__vector_14>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	04 01       	movw	r0, r8
  56:	09 01       	movw	r0, r18
  58:	10 01       	movw	r2, r0
  5a:	17 01       	movw	r2, r14
  5c:	1e 01       	movw	r2, r28
  5e:	25 01       	movw	r4, r10
  60:	2c 01       	movw	r4, r24
  62:	33 01       	movw	r6, r6
  64:	3a 01       	movw	r6, r20
  66:	41 01       	movw	r8, r2
  68:	48 01       	movw	r8, r16
  6a:	48 01       	movw	r8, r16
  6c:	48 01       	movw	r8, r16
  6e:	48 01       	movw	r8, r16
  70:	48 01       	movw	r8, r16
  72:	48 01       	movw	r8, r16
  74:	48 01       	movw	r8, r16
  76:	48 01       	movw	r8, r16
  78:	b0 00       	.word	0x00b0	; ????
  7a:	48 01       	movw	r8, r16
  7c:	48 01       	movw	r8, r16
  7e:	48 01       	movw	r8, r16
  80:	a3 00       	.word	0x00a3	; ????
  82:	c0 00       	.word	0x00c0	; ????
  84:	48 01       	movw	r8, r16
  86:	d1 00       	.word	0x00d1	; ????
  88:	48 01       	movw	r8, r16
  8a:	48 01       	movw	r8, r16
  8c:	f7 00       	.word	0x00f7	; ????
  8e:	48 01       	movw	r8, r16
  90:	48 01       	movw	r8, r16
  92:	48 01       	movw	r8, r16
  94:	48 01       	movw	r8, r16
  96:	48 01       	movw	r8, r16
  98:	e7 00       	.word	0x00e7	; ????
  9a:	de 00       	.word	0x00de	; ????
  9c:	48 01       	movw	r8, r16
  9e:	48 01       	movw	r8, r16
  a0:	48 01       	movw	r8, r16
  a2:	48 01       	movw	r8, r16
  a4:	48 01       	movw	r8, r16
  a6:	48 01       	movw	r8, r16
  a8:	48 01       	movw	r8, r16
  aa:	48 01       	movw	r8, r16
  ac:	48 01       	movw	r8, r16
  ae:	48 01       	movw	r8, r16
  b0:	48 01       	movw	r8, r16
  b2:	48 01       	movw	r8, r16
  b4:	48 01       	movw	r8, r16
  b6:	48 01       	movw	r8, r16
  b8:	48 01       	movw	r8, r16
  ba:	48 01       	movw	r8, r16
  bc:	48 01       	movw	r8, r16
  be:	48 01       	movw	r8, r16
  c0:	48 01       	movw	r8, r16
  c2:	48 01       	movw	r8, r16
  c4:	48 01       	movw	r8, r16
  c6:	48 01       	movw	r8, r16
  c8:	48 01       	movw	r8, r16
  ca:	48 01       	movw	r8, r16
  cc:	48 01       	movw	r8, r16
  ce:	48 01       	movw	r8, r16
  d0:	48 01       	movw	r8, r16
  d2:	48 01       	movw	r8, r16
  d4:	48 01       	movw	r8, r16
  d6:	4f 01       	movw	r8, r30

000000d8 <__ctors_end>:
  d8:	11 24       	eor	r1, r1
  da:	1f be       	out	0x3f, r1	; 63
  dc:	cf e5       	ldi	r28, 0x5F	; 95
  de:	d8 e0       	ldi	r29, 0x08	; 8
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_clear_bss>:
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	a0 e6       	ldi	r26, 0x60	; 96
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	a1 3b       	cpi	r26, 0xB1	; 177
  f0:	b2 07       	cpc	r27, r18
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	30 d1       	rcall	.+608    	; 0x356 <main>
  f6:	5c c3       	rjmp	.+1720   	; 0x7b0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z7initAllv>:
int Yaw;
int V1,V2;
Motor M1,M2;

void initAll(){
	 M1.Initialise(1);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	81 e6       	ldi	r24, 0x61	; 97
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a3 d1       	rcall	.+838    	; 0x448 <_ZN5Motor10InitialiseEh>
	 M2.Initialise(2);
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9f d1       	rcall	.+830    	; 0x448 <_ZN5Motor10InitialiseEh>

	 robotVelocity = 100;
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 112:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
	 VelX = 0;
 116:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 11a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
	 Yaw = 0;
 11e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 122:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>

	 uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 126:	87 e6       	ldi	r24, 0x67	; 103
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ea d1       	rcall	.+980    	; 0x500 <_Z10uart0_initj>
	 sei();
 12c:	78 94       	sei
 12e:	08 95       	ret

00000130 <_Z23recieveControlCharacterv>:

}

void recieveControlCharacter(){
	char data = uart0_getc();
 130:	fc d1       	rcall	.+1016   	; 0x52a <_Z10uart0_getcv>
 132:	fc 01       	movw	r30, r24
 134:	ff 27       	eor	r31, r31

	switch(data){
 136:	f0 97       	sbiw	r30, 0x30	; 48
 138:	e2 34       	cpi	r30, 0x42	; 66
 13a:	f1 05       	cpc	r31, r1
 13c:	08 f0       	brcs	.+2      	; 0x140 <_Z23recieveControlCharacterv+0x10>
 13e:	a8 c0       	rjmp	.+336    	; 0x290 <_Z23recieveControlCharacterv+0x160>
 140:	e6 5d       	subi	r30, 0xD6	; 214
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	2f c3       	rjmp	.+1630   	; 0x7a4 <__tablejump2__>
		case 'F':{
			VelX = robotVelocity;
 146:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 14a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 14e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 152:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			Yaw = 0;
 156:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 15a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			break;
 15e:	98 c0       	rjmp	.+304    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}

		case 'B':{
			VelX = -robotVelocity;
 160:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 164:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 168:	91 95       	neg	r25
 16a:	81 95       	neg	r24
 16c:	91 09       	sbc	r25, r1
 16e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 172:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			Yaw = 0;
 176:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 17a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			break;
 17e:	88 c0       	rjmp	.+272    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}
		case 'G':{
			Yaw = -robotVelocity;
 180:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 184:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 188:	22 27       	eor	r18, r18
 18a:	33 27       	eor	r19, r19
 18c:	28 1b       	sub	r18, r24
 18e:	39 0b       	sbc	r19, r25
 190:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <Yaw+0x1>
 194:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Yaw>
			VelX = robotVelocity;
 198:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 19c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			break;
 1a0:	77 c0       	rjmp	.+238    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}
		case 'I':{
			 Yaw = robotVelocity;
 1a2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 1a6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 1aa:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 1ae:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			 VelX = robotVelocity;
 1b2:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 1b6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			 break;
 1ba:	6a c0       	rjmp	.+212    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}
		case 'S':{
			Yaw = 0;
 1bc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 1c0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			VelX = 0;
 1c4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 1c8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			break;
 1cc:	61 c0       	rjmp	.+194    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}
		case 'R':{
			 Yaw =-robotVelocity;
 1ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 1d2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 1d6:	91 95       	neg	r25
 1d8:	81 95       	neg	r24
 1da:	91 09       	sbc	r25, r1
 1dc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 1e0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			 VelX =0;
 1e4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 1e8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			 break;
 1ec:	51 c0       	rjmp	.+162    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}


		case 'L':{
			 Yaw = robotVelocity;
 1ee:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 1f2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 1f6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 1fa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			 VelX= 0;
 1fe:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 202:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			   break;
 206:	44 c0       	rjmp	.+136    	; 0x290 <_Z23recieveControlCharacterv+0x160>
		}

		case '0':{
			robotVelocity = 0;
 208:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <robotVelocity+0x1>
 20c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <robotVelocity>
			break;
 210:	4d c0       	rjmp	.+154    	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}
		case '1':{
			robotVelocity = 25;
 212:	89 e1       	ldi	r24, 0x19	; 25
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 21a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 21e:	46 c0       	rjmp	.+140    	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}



		case '2':{
			robotVelocity = 50;
 220:	82 e3       	ldi	r24, 0x32	; 50
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 228:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 22c:	3f c0       	rjmp	.+126    	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}

		case '3':{
			robotVelocity = 75;
 22e:	8b e4       	ldi	r24, 0x4B	; 75
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 236:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 23a:	38 c0       	rjmp	.+112    	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}

		case '4':{
			robotVelocity = 100;
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 244:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 248:	31 c0       	rjmp	.+98     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}
		case '5':{
			robotVelocity = 125;
 24a:	8d e7       	ldi	r24, 0x7D	; 125
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 252:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 256:	2a c0       	rjmp	.+84     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}
		case '6':{
			robotVelocity = 150;
 258:	86 e9       	ldi	r24, 0x96	; 150
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 260:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 264:	23 c0       	rjmp	.+70     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}
		case '7':{
			robotVelocity = 175;
 266:	8f ea       	ldi	r24, 0xAF	; 175
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 26e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 272:	1c c0       	rjmp	.+56     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}
		case '8':{
			robotVelocity = 200;
 274:	88 ec       	ldi	r24, 0xC8	; 200
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 27c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 280:	15 c0       	rjmp	.+42     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
		}
		case '9':{
			robotVelocity = 225;
 282:	81 ee       	ldi	r24, 0xE1	; 225
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 28a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 28e:	0e c0       	rjmp	.+28     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>



		
	}
	 if (robotVelocity>249)
 290:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 294:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 298:	8a 3f       	cpi	r24, 0xFA	; 250
 29a:	91 05       	cpc	r25, r1
 29c:	3c f0       	brlt	.+14     	; 0x2ac <_Z23recieveControlCharacterv+0x17c>
	 {
		 robotVelocity = 249;
 29e:	89 ef       	ldi	r24, 0xF9	; 249
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 2a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
 2aa:	08 95       	ret
	 }
	  if (robotVelocity<0)
 2ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 2b0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 2b4:	99 23       	and	r25, r25
 2b6:	24 f4       	brge	.+8      	; 0x2c0 <_Z23recieveControlCharacterv+0x190>
	  {
		  robotVelocity =0;
 2b8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <robotVelocity+0x1>
 2bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <robotVelocity>
 2c0:	08 95       	ret

000002c2 <_Z14updateVelocityv>:



}

void updateVelocity(){
 2c2:	cf 92       	push	r12
 2c4:	df 92       	push	r13
 2c6:	ef 92       	push	r14
 2c8:	ff 92       	push	r15
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29

	    V1 = 0.5*(VelX+Yaw);
 2d2:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <VelX>
 2d6:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <VelX+0x1>
 2da:	00 91 66 00 	lds	r16, 0x0066	; 0x800066 <Yaw>
 2de:	10 91 67 00 	lds	r17, 0x0067	; 0x800067 <Yaw+0x1>
 2e2:	be 01       	movw	r22, r28
 2e4:	60 0f       	add	r22, r16
 2e6:	71 1f       	adc	r23, r17
 2e8:	07 2e       	mov	r0, r23
 2ea:	00 0c       	add	r0, r0
 2ec:	88 0b       	sbc	r24, r24
 2ee:	99 0b       	sbc	r25, r25
 2f0:	6a d1       	rcall	.+724    	; 0x5c6 <__floatsisf>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	5f e3       	ldi	r21, 0x3F	; 63
 2fa:	c9 d1       	rcall	.+914    	; 0x68e <__mulsf3>
 2fc:	31 d1       	rcall	.+610    	; 0x560 <__fixsfsi>
 2fe:	6b 01       	movw	r12, r22
 300:	7c 01       	movw	r14, r24
 302:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <V1+0x1>
 306:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <V1>
	    V2 = 0.5*(VelX-Yaw);
 30a:	ce 01       	movw	r24, r28
 30c:	80 1b       	sub	r24, r16
 30e:	91 0b       	sbc	r25, r17
 310:	bc 01       	movw	r22, r24
 312:	99 0f       	add	r25, r25
 314:	88 0b       	sbc	r24, r24
 316:	99 0b       	sbc	r25, r25
 318:	56 d1       	rcall	.+684    	; 0x5c6 <__floatsisf>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	b5 d1       	rcall	.+874    	; 0x68e <__mulsf3>
 324:	1d d1       	rcall	.+570    	; 0x560 <__fixsfsi>
 326:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <V2+0x1>
 32a:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <V2>

	    M1.SetOcrValue(V1);
 32e:	b6 01       	movw	r22, r12
 330:	81 e6       	ldi	r24, 0x61	; 97
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	61 d0       	rcall	.+194    	; 0x3f8 <_ZN5Motor11SetOcrValueEi>
	    M2.SetOcrValue(V2);
 336:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <V2>
 33a:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <V2+0x1>
 33e:	80 e6       	ldi	r24, 0x60	; 96
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	5a d0       	rcall	.+180    	; 0x3f8 <_ZN5Motor11SetOcrValueEi>

}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	08 95       	ret

00000356 <main>:



int main(void)
{
      initAll();
 356:	d1 de       	rcall	.-606    	; 0xfa <_Z7initAllv>


    while (1)
    {

	 recieveControlCharacter();
 358:	eb de       	rcall	.-554    	; 0x130 <_Z23recieveControlCharacterv>
	 updateVelocity();
 35a:	b3 df       	rcall	.-154    	; 0x2c2 <_Z14updateVelocityv>

}



int main(void)
 35c:	fd cf       	rjmp	.-6      	; 0x358 <main+0x2>

0000035e <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
 35e:	fc 01       	movw	r30, r24
 360:	80 81       	ld	r24, Z
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	71 f4       	brne	.+28     	; 0x382 <_ZN5Motor7InitPWMEv+0x24>
	{
		OUTPUT(PIN_F1);
 366:	8f 9a       	sbi	0x11, 7	; 17
		OUTPUT(PIN_B1);
 368:	8e 9a       	sbi	0x11, 6	; 17

		OUTPUT(PIN_PWM1);
 36a:	8c 9a       	sbi	0x11, 4	; 17

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
 36c:	8f b5       	in	r24, 0x2f	; 47
 36e:	82 68       	ori	r24, 0x82	; 130
 370:	8f bd       	out	0x2f, r24	; 47
		PWM_TCCRB1	|= (1<<PWM_1WGM2) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
 372:	8e b5       	in	r24, 0x2e	; 46
 374:	8a 61       	ori	r24, 0x1A	; 26
 376:	8e bd       	out	0x2e, r24	; 46
		PWM_ICR1		 =         ICR_TOP;
 378:	89 ef       	ldi	r24, 0xF9	; 249
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	97 bd       	out	0x27, r25	; 39
 37e:	86 bd       	out	0x26, r24	; 38
 380:	08 95       	ret
	}
	else if(num == 2)
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	69 f4       	brne	.+26     	; 0x3a0 <_ZN5Motor7InitPWMEv+0x42>
	{
		OUTPUT(PIN_F2);
 386:	d6 9a       	sbi	0x1a, 6	; 26
		OUTPUT(PIN_B2);
 388:	d7 9a       	sbi	0x1a, 7	; 26

		OUTPUT(PIN_PWM2);
 38a:	8d 9a       	sbi	0x11, 5	; 17

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
 38c:	8f b5       	in	r24, 0x2f	; 47
 38e:	82 62       	ori	r24, 0x22	; 34
 390:	8f bd       	out	0x2f, r24	; 47
		PWM_TCCRB2	|=  (1<<PWM_2WGM2) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
 392:	8e b5       	in	r24, 0x2e	; 46
 394:	8a 61       	ori	r24, 0x1A	; 26
 396:	8e bd       	out	0x2e, r24	; 46
		PWM_ICR2		 =         ICR_TOP;
 398:	89 ef       	ldi	r24, 0xF9	; 249
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	97 bd       	out	0x27, r25	; 39
 39e:	86 bd       	out	0x26, r24	; 38
 3a0:	08 95       	ret

000003a2 <_ZN5Motor19setForwardDirectionEv>:

}

void Motor::setForwardDirection()
{
	switch(num)
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <_ZN5Motor19setForwardDirectionEv+0xe>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	21 f0       	breq	.+8      	; 0x3b6 <_ZN5Motor19setForwardDirectionEv+0x14>
 3ae:	08 95       	ret
	{
		case 1:
			SET	(PIN_F1);
 3b0:	97 9a       	sbi	0x12, 7	; 18
			CLEAR	(PIN_B1);
 3b2:	96 98       	cbi	0x12, 6	; 18
			break;
 3b4:	08 95       	ret
		case 2:
			SET	(PIN_F2);
 3b6:	de 9a       	sbi	0x1b, 6	; 27
			CLEAR	(PIN_B2);
 3b8:	df 98       	cbi	0x1b, 7	; 27
 3ba:	08 95       	ret

000003bc <_ZN5Motor19setReverseDirectionEv>:


}
void Motor::setReverseDirection()
{
	switch(num)
 3bc:	fc 01       	movw	r30, r24
 3be:	80 81       	ld	r24, Z
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	19 f0       	breq	.+6      	; 0x3ca <_ZN5Motor19setReverseDirectionEv+0xe>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <_ZN5Motor19setReverseDirectionEv+0x14>
 3c8:	08 95       	ret
	{
		case 1:
			CLEAR	(PIN_F1);
 3ca:	97 98       	cbi	0x12, 7	; 18
			SET	(PIN_B1);
 3cc:	96 9a       	sbi	0x12, 6	; 18
			break;
 3ce:	08 95       	ret
		case 2:
			CLEAR	(PIN_F2);
 3d0:	de 98       	cbi	0x1b, 6	; 27
			SET	(PIN_B2);
 3d2:	df 9a       	sbi	0x1b, 7	; 27
 3d4:	08 95       	ret

000003d6 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
 3d6:	fc 01       	movw	r30, r24
 3d8:	80 81       	ld	r24, Z
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <_ZN5Motor9StopMotorEv+0xe>
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	31 f0       	breq	.+12     	; 0x3ee <_ZN5Motor9StopMotorEv+0x18>
 3e2:	08 95       	ret
	{
		case 1:
			PWM_OCR1 = 0;
 3e4:	1b bc       	out	0x2b, r1	; 43
 3e6:	1a bc       	out	0x2a, r1	; 42
			SET	(PIN_F1);
 3e8:	97 9a       	sbi	0x12, 7	; 18
			SET	(PIN_B1);
 3ea:	96 9a       	sbi	0x12, 6	; 18
			break;
 3ec:	08 95       	ret

		case 2:
			PWM_OCR2 = 0;
 3ee:	19 bc       	out	0x29, r1	; 41
 3f0:	18 bc       	out	0x28, r1	; 40
			SET	(PIN_F2);
 3f2:	de 9a       	sbi	0x1b, 6	; 27
			SET	(PIN_B2);
 3f4:	df 9a       	sbi	0x1b, 7	; 27
 3f6:	08 95       	ret

000003f8 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	8c 01       	movw	r16, r24
 402:	eb 01       	movw	r28, r22
    if (Ocr > 0)
 404:	1c 16       	cp	r1, r28
 406:	1d 06       	cpc	r1, r29
 408:	0c f4       	brge	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        setForwardDirection();
 40a:	cb df       	rcall	.-106    	; 0x3a2 <_ZN5Motor19setForwardDirectionEv>

	if( Ocr >= MAX_VALUE){
 40c:	c9 3f       	cpi	r28, 0xF9	; 249
 40e:	d1 05       	cpc	r29, r1
 410:	44 f4       	brge	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		Ocr = MAX_VALUE;
	}

	if( Ocr < 0){
 412:	dd 23       	and	r29, r29
 414:	44 f4       	brge	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		Ocr = -Ocr;
 416:	d1 95       	neg	r29
 418:	c1 95       	neg	r28
 41a:	d1 09       	sbc	r29, r1
		setReverseDirection();
 41c:	c8 01       	movw	r24, r16
 41e:	ce df       	rcall	.-100    	; 0x3bc <_ZN5Motor19setReverseDirectionEv>
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
{
    if (Ocr > 0)
        setForwardDirection();

	if( Ocr >= MAX_VALUE){
		Ocr = MAX_VALUE;
 422:	c9 ef       	ldi	r28, 0xF9	; 249
 424:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0){
		Ocr = -Ocr;
		setReverseDirection();
	}

	switch(num)
 426:	f8 01       	movw	r30, r16
 428:	80 81       	ld	r24, Z
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	19 f0       	breq	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	21 f0       	breq	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 432:	05 c0       	rjmp	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		case 1:
			PWM_OCR1	= Ocr;
 434:	db bd       	out	0x2b, r29	; 43
 436:	ca bd       	out	0x2a, r28	; 42
			break;
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		case 2:
			PWM_OCR2	= Ocr;
 43a:	d9 bd       	out	0x29, r29	; 41
 43c:	c8 bd       	out	0x28, r28	; 40
			break;

	}
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	ec 01       	movw	r28, r24
	num = no;
 44e:	68 83       	st	Y, r22
	InitPWM();
 450:	86 df       	rcall	.-244    	; 0x35e <_ZN5Motor7InitPWMEv>

	StopMotor();
 452:	ce 01       	movw	r24, r28
 454:	c0 df       	rcall	.-128    	; 0x3d6 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	ce 01       	movw	r24, r28
 45c:	cd df       	rcall	.-102    	; 0x3f8 <_ZN5Motor11SetOcrValueEi>

}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART0_STATUS;
 478:	8b b1       	in	r24, 0x0b	; 11
	data = UART0_DATA;
 47a:	2c b1       	in	r18, 0x0c	; 12

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
 47c:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#endif

	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;
 47e:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <_ZL12UART0_RxHead>
 482:	ef 5f       	subi	r30, 0xFF	; 255
 484:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART0_RxTail) {
 486:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 48a:	e9 17       	cp	r30, r25
 48c:	39 f0       	breq	.+14     	; 0x49c <__vector_13+0x38>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART0_RxHead = tmphead;
 48e:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <_ZL12UART0_RxHead>
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ef 58       	subi	r30, 0x8F	; 143
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	20 83       	st	Z, r18
 49a:	01 c0       	rjmp	.+2      	; 0x49e <__vector_13+0x3a>
	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART0_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 49c:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART0_RxHead = tmphead;
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
	}
	UART0_LastRxError = lastRxError;
 49e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <_ZL17UART0_LastRxError>
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	ef 93       	push	r30
 4c6:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART0_TxHead != UART0_TxTail) {
 4c8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <_ZL12UART0_TxHead>
 4cc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_ZL12UART0_TxTail>
 4d0:	98 17       	cp	r25, r24
 4d2:	61 f0       	breq	.+24     	; 0x4ec <__vector_14+0x36>
		/* calculate and store new buffer index */
		tmptail = (UART0_TxTail + 1) & UART_TX_BUFFER_MASK;
 4d4:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <_ZL12UART0_TxTail>
 4d8:	ef 5f       	subi	r30, 0xFF	; 255
 4da:	ef 71       	andi	r30, 0x1F	; 31
		UART0_TxTail = tmptail;
 4dc:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <_ZL12UART0_TxTail>
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART0_TxBuf[tmptail];  /* start transmission */
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	ef 56       	subi	r30, 0x6F	; 111
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	80 81       	ld	r24, Z
 4e8:	8c b9       	out	0x0c, r24	; 12
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <__vector_14+0x38>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
 4ec:	55 98       	cbi	0x0a, 5	; 10
	}
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <_Z10uart0_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(unsigned int baudrate)
{
	sei();
 500:	78 94       	sei
	
	UART0_TxHead = 0;
 502:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL12UART0_TxHead>
	UART0_TxTail = 0;
 506:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL12UART0_TxTail>
	UART0_RxHead = 0;
 50a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <_ZL12UART0_RxHead>
	UART0_RxTail = 0;
 50e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <_ZL12UART0_RxTail>
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000)
 512:	99 23       	and	r25, r25
 514:	1c f4       	brge	.+6      	; 0x51c <_Z10uart0_initj+0x1c>
	{
		UART0_STATUS = (1 << U2X);  //Enable 2x speed 
 516:	22 e0       	ldi	r18, 0x02	; 2
 518:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 51a:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (unsigned char)(baudrate >> 8);
 51c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baudrate;
 51e:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
 520:	88 e9       	ldi	r24, 0x98	; 152
 522:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | ( 1 << UCSZ1);
 524:	86 e8       	ldi	r24, 0x86	; 134
 526:	80 bd       	out	0x20, r24	; 32
 528:	08 95       	ret

0000052a <_Z10uart0_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART0_RxHead == UART0_RxTail) {
 52a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL12UART0_RxHead>
 52e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 532:	98 17       	cp	r25, r24
 534:	91 f0       	breq	.+36     	; 0x55a <_Z10uart0_getcv+0x30>
		return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART0_RxTail + 1) & UART_RX_BUFFER_MASK;
 536:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 53a:	ef 5f       	subi	r30, 0xFF	; 255
 53c:	ef 71       	andi	r30, 0x1F	; 31
	UART0_RxTail = tmptail;
 53e:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <_ZL12UART0_RxTail>

	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	ef 58       	subi	r30, 0x8F	; 143
 546:	ff 4f       	sbci	r31, 0xFF	; 255
 548:	20 81       	ld	r18, Z

	return (UART0_LastRxError << 8) + data;
 54a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <_ZL17UART0_LastRxError>
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	98 2f       	mov	r25, r24
 552:	88 27       	eor	r24, r24
 554:	82 0f       	add	r24, r18
 556:	91 1d       	adc	r25, r1
 558:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART0_RxHead == UART0_RxTail) {
		return UART_NO_DATA;   /* no data available */
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 55e:	08 95       	ret

00000560 <__fixsfsi>:
 560:	04 d0       	rcall	.+8      	; 0x56a <__fixunssfsi>
 562:	68 94       	set
 564:	b1 11       	cpse	r27, r1
 566:	8d c0       	rjmp	.+282    	; 0x682 <__fp_szero>
 568:	08 95       	ret

0000056a <__fixunssfsi>:
 56a:	70 d0       	rcall	.+224    	; 0x64c <__fp_splitA>
 56c:	88 f0       	brcs	.+34     	; 0x590 <__fixunssfsi+0x26>
 56e:	9f 57       	subi	r25, 0x7F	; 127
 570:	90 f0       	brcs	.+36     	; 0x596 <__fixunssfsi+0x2c>
 572:	b9 2f       	mov	r27, r25
 574:	99 27       	eor	r25, r25
 576:	b7 51       	subi	r27, 0x17	; 23
 578:	a0 f0       	brcs	.+40     	; 0x5a2 <__fixunssfsi+0x38>
 57a:	d1 f0       	breq	.+52     	; 0x5b0 <__fixunssfsi+0x46>
 57c:	66 0f       	add	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	88 1f       	adc	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	1a f0       	brmi	.+6      	; 0x58c <__fixunssfsi+0x22>
 586:	ba 95       	dec	r27
 588:	c9 f7       	brne	.-14     	; 0x57c <__fixunssfsi+0x12>
 58a:	12 c0       	rjmp	.+36     	; 0x5b0 <__fixunssfsi+0x46>
 58c:	b1 30       	cpi	r27, 0x01	; 1
 58e:	81 f0       	breq	.+32     	; 0x5b0 <__fixunssfsi+0x46>
 590:	77 d0       	rcall	.+238    	; 0x680 <__fp_zero>
 592:	b1 e0       	ldi	r27, 0x01	; 1
 594:	08 95       	ret
 596:	74 c0       	rjmp	.+232    	; 0x680 <__fp_zero>
 598:	67 2f       	mov	r22, r23
 59a:	78 2f       	mov	r23, r24
 59c:	88 27       	eor	r24, r24
 59e:	b8 5f       	subi	r27, 0xF8	; 248
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <__fixunssfsi+0x46>
 5a2:	b9 3f       	cpi	r27, 0xF9	; 249
 5a4:	cc f3       	brlt	.-14     	; 0x598 <__fixunssfsi+0x2e>
 5a6:	86 95       	lsr	r24
 5a8:	77 95       	ror	r23
 5aa:	67 95       	ror	r22
 5ac:	b3 95       	inc	r27
 5ae:	d9 f7       	brne	.-10     	; 0x5a6 <__fixunssfsi+0x3c>
 5b0:	3e f4       	brtc	.+14     	; 0x5c0 <__fixunssfsi+0x56>
 5b2:	90 95       	com	r25
 5b4:	80 95       	com	r24
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	8f 4f       	sbci	r24, 0xFF	; 255
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__floatunsisf>:
 5c2:	e8 94       	clt
 5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <__floatsisf+0x12>

000005c6 <__floatsisf>:
 5c6:	97 fb       	bst	r25, 7
 5c8:	3e f4       	brtc	.+14     	; 0x5d8 <__floatsisf+0x12>
 5ca:	90 95       	com	r25
 5cc:	80 95       	com	r24
 5ce:	70 95       	com	r23
 5d0:	61 95       	neg	r22
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	99 23       	and	r25, r25
 5da:	a9 f0       	breq	.+42     	; 0x606 <__floatsisf+0x40>
 5dc:	f9 2f       	mov	r31, r25
 5de:	96 e9       	ldi	r25, 0x96	; 150
 5e0:	bb 27       	eor	r27, r27
 5e2:	93 95       	inc	r25
 5e4:	f6 95       	lsr	r31
 5e6:	87 95       	ror	r24
 5e8:	77 95       	ror	r23
 5ea:	67 95       	ror	r22
 5ec:	b7 95       	ror	r27
 5ee:	f1 11       	cpse	r31, r1
 5f0:	f8 cf       	rjmp	.-16     	; 0x5e2 <__floatsisf+0x1c>
 5f2:	fa f4       	brpl	.+62     	; 0x632 <__floatsisf+0x6c>
 5f4:	bb 0f       	add	r27, r27
 5f6:	11 f4       	brne	.+4      	; 0x5fc <__floatsisf+0x36>
 5f8:	60 ff       	sbrs	r22, 0
 5fa:	1b c0       	rjmp	.+54     	; 0x632 <__floatsisf+0x6c>
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	16 c0       	rjmp	.+44     	; 0x632 <__floatsisf+0x6c>
 606:	88 23       	and	r24, r24
 608:	11 f0       	breq	.+4      	; 0x60e <__floatsisf+0x48>
 60a:	96 e9       	ldi	r25, 0x96	; 150
 60c:	11 c0       	rjmp	.+34     	; 0x630 <__floatsisf+0x6a>
 60e:	77 23       	and	r23, r23
 610:	21 f0       	breq	.+8      	; 0x61a <__floatsisf+0x54>
 612:	9e e8       	ldi	r25, 0x8E	; 142
 614:	87 2f       	mov	r24, r23
 616:	76 2f       	mov	r23, r22
 618:	05 c0       	rjmp	.+10     	; 0x624 <__floatsisf+0x5e>
 61a:	66 23       	and	r22, r22
 61c:	71 f0       	breq	.+28     	; 0x63a <__floatsisf+0x74>
 61e:	96 e8       	ldi	r25, 0x86	; 134
 620:	86 2f       	mov	r24, r22
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	2a f0       	brmi	.+10     	; 0x632 <__floatsisf+0x6c>
 628:	9a 95       	dec	r25
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	da f7       	brpl	.-10     	; 0x628 <__floatsisf+0x62>
 632:	88 0f       	add	r24, r24
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__mulsf3>:
 68e:	0b d0       	rcall	.+22     	; 0x6a6 <__mulsf3x>
 690:	78 c0       	rjmp	.+240    	; 0x782 <__fp_round>
 692:	69 d0       	rcall	.+210    	; 0x766 <__fp_pscA>
 694:	28 f0       	brcs	.+10     	; 0x6a0 <__mulsf3+0x12>
 696:	6e d0       	rcall	.+220    	; 0x774 <__fp_pscB>
 698:	18 f0       	brcs	.+6      	; 0x6a0 <__mulsf3+0x12>
 69a:	95 23       	and	r25, r21
 69c:	09 f0       	breq	.+2      	; 0x6a0 <__mulsf3+0x12>
 69e:	5a c0       	rjmp	.+180    	; 0x754 <__fp_inf>
 6a0:	5f c0       	rjmp	.+190    	; 0x760 <__fp_nan>
 6a2:	11 24       	eor	r1, r1
 6a4:	ee cf       	rjmp	.-36     	; 0x682 <__fp_szero>

000006a6 <__mulsf3x>:
 6a6:	ca df       	rcall	.-108    	; 0x63c <__fp_split3>
 6a8:	a0 f3       	brcs	.-24     	; 0x692 <__mulsf3+0x4>

000006aa <__mulsf3_pse>:
 6aa:	95 9f       	mul	r25, r21
 6ac:	d1 f3       	breq	.-12     	; 0x6a2 <__mulsf3+0x14>
 6ae:	95 0f       	add	r25, r21
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	55 1f       	adc	r21, r21
 6b4:	62 9f       	mul	r22, r18
 6b6:	f0 01       	movw	r30, r0
 6b8:	72 9f       	mul	r23, r18
 6ba:	bb 27       	eor	r27, r27
 6bc:	f0 0d       	add	r31, r0
 6be:	b1 1d       	adc	r27, r1
 6c0:	63 9f       	mul	r22, r19
 6c2:	aa 27       	eor	r26, r26
 6c4:	f0 0d       	add	r31, r0
 6c6:	b1 1d       	adc	r27, r1
 6c8:	aa 1f       	adc	r26, r26
 6ca:	64 9f       	mul	r22, r20
 6cc:	66 27       	eor	r22, r22
 6ce:	b0 0d       	add	r27, r0
 6d0:	a1 1d       	adc	r26, r1
 6d2:	66 1f       	adc	r22, r22
 6d4:	82 9f       	mul	r24, r18
 6d6:	22 27       	eor	r18, r18
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	62 1f       	adc	r22, r18
 6de:	73 9f       	mul	r23, r19
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	62 1f       	adc	r22, r18
 6e6:	83 9f       	mul	r24, r19
 6e8:	a0 0d       	add	r26, r0
 6ea:	61 1d       	adc	r22, r1
 6ec:	22 1f       	adc	r18, r18
 6ee:	74 9f       	mul	r23, r20
 6f0:	33 27       	eor	r19, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	23 1f       	adc	r18, r19
 6f8:	84 9f       	mul	r24, r20
 6fa:	60 0d       	add	r22, r0
 6fc:	21 1d       	adc	r18, r1
 6fe:	82 2f       	mov	r24, r18
 700:	76 2f       	mov	r23, r22
 702:	6a 2f       	mov	r22, r26
 704:	11 24       	eor	r1, r1
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	8a f0       	brmi	.+34     	; 0x72e <__mulsf3_pse+0x84>
 70c:	e1 f0       	breq	.+56     	; 0x746 <__mulsf3_pse+0x9c>
 70e:	88 23       	and	r24, r24
 710:	4a f0       	brmi	.+18     	; 0x724 <__mulsf3_pse+0x7a>
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	bb 1f       	adc	r27, r27
 718:	66 1f       	adc	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	91 50       	subi	r25, 0x01	; 1
 720:	50 40       	sbci	r21, 0x00	; 0
 722:	a9 f7       	brne	.-22     	; 0x70e <__mulsf3_pse+0x64>
 724:	9e 3f       	cpi	r25, 0xFE	; 254
 726:	51 05       	cpc	r21, r1
 728:	70 f0       	brcs	.+28     	; 0x746 <__mulsf3_pse+0x9c>
 72a:	14 c0       	rjmp	.+40     	; 0x754 <__fp_inf>
 72c:	aa cf       	rjmp	.-172    	; 0x682 <__fp_szero>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	ec f3       	brlt	.-6      	; 0x72c <__mulsf3_pse+0x82>
 732:	98 3e       	cpi	r25, 0xE8	; 232
 734:	dc f3       	brlt	.-10     	; 0x72c <__mulsf3_pse+0x82>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b7 95       	ror	r27
 73e:	f7 95       	ror	r31
 740:	e7 95       	ror	r30
 742:	9f 5f       	subi	r25, 0xFF	; 255
 744:	c1 f7       	brne	.-16     	; 0x736 <__mulsf3_pse+0x8c>
 746:	fe 2b       	or	r31, r30
 748:	88 0f       	add	r24, r24
 74a:	91 1d       	adc	r25, r1
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__fp_inf>:
 754:	97 f9       	bld	r25, 7
 756:	9f 67       	ori	r25, 0x7F	; 127
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	08 95       	ret

00000760 <__fp_nan>:
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	08 95       	ret

00000766 <__fp_pscA>:
 766:	00 24       	eor	r0, r0
 768:	0a 94       	dec	r0
 76a:	16 16       	cp	r1, r22
 76c:	17 06       	cpc	r1, r23
 76e:	18 06       	cpc	r1, r24
 770:	09 06       	cpc	r0, r25
 772:	08 95       	ret

00000774 <__fp_pscB>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	14 06       	cpc	r1, r20
 77e:	05 06       	cpc	r0, r21
 780:	08 95       	ret

00000782 <__fp_round>:
 782:	09 2e       	mov	r0, r25
 784:	03 94       	inc	r0
 786:	00 0c       	add	r0, r0
 788:	11 f4       	brne	.+4      	; 0x78e <__fp_round+0xc>
 78a:	88 23       	and	r24, r24
 78c:	52 f0       	brmi	.+20     	; 0x7a2 <__fp_round+0x20>
 78e:	bb 0f       	add	r27, r27
 790:	40 f4       	brcc	.+16     	; 0x7a2 <__fp_round+0x20>
 792:	bf 2b       	or	r27, r31
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0x18>
 796:	60 ff       	sbrs	r22, 0
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <__fp_round+0x20>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__tablejump2__>:
 7a4:	ee 0f       	add	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	05 90       	lpm	r0, Z+
 7aa:	f4 91       	lpm	r31, Z
 7ac:	e0 2d       	mov	r30, r0
 7ae:	09 94       	ijmp

000007b0 <_exit>:
 7b0:	f8 94       	cli

000007b2 <__stop_program>:
 7b2:	ff cf       	rjmp	.-2      	; 0x7b2 <__stop_program>
