
Mecanum drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800200  00000c22  00000cb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800230  00800230  00000ce6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d75  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fe  00000000  00000000  00002c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7a  00000000  00000000  00003d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  000048c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b1d  00000000  00000000  00004d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6d  00000000  00000000  0000582d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000659a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
   2:	00 00       	nop
   4:	b2 c0       	rjmp	.+356    	; 0x16a <__bad_interrupt>
   6:	00 00       	nop
   8:	b0 c0       	rjmp	.+352    	; 0x16a <__bad_interrupt>
   a:	00 00       	nop
   c:	ae c0       	rjmp	.+348    	; 0x16a <__bad_interrupt>
   e:	00 00       	nop
  10:	ac c0       	rjmp	.+344    	; 0x16a <__bad_interrupt>
  12:	00 00       	nop
  14:	aa c0       	rjmp	.+340    	; 0x16a <__bad_interrupt>
  16:	00 00       	nop
  18:	a8 c0       	rjmp	.+336    	; 0x16a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a6 c0       	rjmp	.+332    	; 0x16a <__bad_interrupt>
  1e:	00 00       	nop
  20:	a4 c0       	rjmp	.+328    	; 0x16a <__bad_interrupt>
  22:	00 00       	nop
  24:	a2 c0       	rjmp	.+324    	; 0x16a <__bad_interrupt>
  26:	00 00       	nop
  28:	a0 c0       	rjmp	.+320    	; 0x16a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9e c0       	rjmp	.+316    	; 0x16a <__bad_interrupt>
  2e:	00 00       	nop
  30:	9c c0       	rjmp	.+312    	; 0x16a <__bad_interrupt>
  32:	00 00       	nop
  34:	9a c0       	rjmp	.+308    	; 0x16a <__bad_interrupt>
  36:	00 00       	nop
  38:	98 c0       	rjmp	.+304    	; 0x16a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	96 c0       	rjmp	.+300    	; 0x16a <__bad_interrupt>
  3e:	00 00       	nop
  40:	94 c0       	rjmp	.+296    	; 0x16a <__bad_interrupt>
  42:	00 00       	nop
  44:	92 c0       	rjmp	.+292    	; 0x16a <__bad_interrupt>
  46:	00 00       	nop
  48:	90 c0       	rjmp	.+288    	; 0x16a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8e c0       	rjmp	.+284    	; 0x16a <__bad_interrupt>
  4e:	00 00       	nop
  50:	8c c0       	rjmp	.+280    	; 0x16a <__bad_interrupt>
  52:	00 00       	nop
  54:	8a c0       	rjmp	.+276    	; 0x16a <__bad_interrupt>
  56:	00 00       	nop
  58:	88 c0       	rjmp	.+272    	; 0x16a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	86 c0       	rjmp	.+268    	; 0x16a <__bad_interrupt>
  5e:	00 00       	nop
  60:	84 c0       	rjmp	.+264    	; 0x16a <__bad_interrupt>
  62:	00 00       	nop
  64:	20 c2       	rjmp	.+1088   	; 0x4a6 <__vector_25>
  66:	00 00       	nop
  68:	80 c0       	rjmp	.+256    	; 0x16a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7e c0       	rjmp	.+252    	; 0x16a <__bad_interrupt>
  6e:	00 00       	nop
  70:	7c c0       	rjmp	.+248    	; 0x16a <__bad_interrupt>
  72:	00 00       	nop
  74:	7a c0       	rjmp	.+244    	; 0x16a <__bad_interrupt>
  76:	00 00       	nop
  78:	78 c0       	rjmp	.+240    	; 0x16a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	76 c0       	rjmp	.+236    	; 0x16a <__bad_interrupt>
  7e:	00 00       	nop
  80:	74 c0       	rjmp	.+232    	; 0x16a <__bad_interrupt>
  82:	00 00       	nop
  84:	72 c0       	rjmp	.+228    	; 0x16a <__bad_interrupt>
  86:	00 00       	nop
  88:	70 c0       	rjmp	.+224    	; 0x16a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6e c0       	rjmp	.+220    	; 0x16a <__bad_interrupt>
  8e:	00 00       	nop
  90:	1a c2       	rjmp	.+1076   	; 0x4c6 <__vector_36>
  92:	00 00       	nop
  94:	6a c0       	rjmp	.+212    	; 0x16a <__bad_interrupt>
  96:	00 00       	nop
  98:	68 c0       	rjmp	.+208    	; 0x16a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	66 c0       	rjmp	.+204    	; 0x16a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	64 c0       	rjmp	.+200    	; 0x16a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	62 c0       	rjmp	.+196    	; 0x16a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	60 c0       	rjmp	.+192    	; 0x16a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5e c0       	rjmp	.+188    	; 0x16a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	5c c0       	rjmp	.+184    	; 0x16a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5a c0       	rjmp	.+180    	; 0x16a <__bad_interrupt>
  b6:	00 00       	nop
  b8:	58 c0       	rjmp	.+176    	; 0x16a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	56 c0       	rjmp	.+172    	; 0x16a <__bad_interrupt>
  be:	00 00       	nop
  c0:	54 c0       	rjmp	.+168    	; 0x16a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	52 c0       	rjmp	.+164    	; 0x16a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	50 c0       	rjmp	.+160    	; 0x16a <__bad_interrupt>
  ca:	00 00       	nop
  cc:	0c c2       	rjmp	.+1048   	; 0x4e6 <__vector_51>
  ce:	00 00       	nop
  d0:	4c c0       	rjmp	.+152    	; 0x16a <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4a c0       	rjmp	.+148    	; 0x16a <__bad_interrupt>
  d6:	00 00       	nop
  d8:	50 c2       	rjmp	.+1184   	; 0x57a <__vector_54>
  da:	00 00       	nop
  dc:	46 c0       	rjmp	.+140    	; 0x16a <__bad_interrupt>
  de:	00 00       	nop
  e0:	44 c0       	rjmp	.+136    	; 0x16a <__bad_interrupt>
  e2:	00 00       	nop
  e4:	32 04       	cpc	r3, r2
  e6:	37 04       	cpc	r3, r7
  e8:	3c 04       	cpc	r3, r12
  ea:	41 04       	cpc	r4, r1
  ec:	46 04       	cpc	r4, r6
  ee:	4d 04       	cpc	r4, r13
  f0:	4d 04       	cpc	r4, r13
  f2:	4d 04       	cpc	r4, r13
  f4:	4d 04       	cpc	r4, r13
  f6:	4d 04       	cpc	r4, r13
  f8:	4d 04       	cpc	r4, r13
  fa:	4d 04       	cpc	r4, r13
  fc:	4d 04       	cpc	r4, r13
  fe:	4d 04       	cpc	r4, r13
 100:	4d 04       	cpc	r4, r13
 102:	4d 04       	cpc	r4, r13
 104:	4d 04       	cpc	r4, r13
 106:	4d 04       	cpc	r4, r13
 108:	fc 03       	fmulsu	r23, r20
 10a:	4d 04       	cpc	r4, r13
 10c:	4d 04       	cpc	r4, r13
 10e:	4d 04       	cpc	r4, r13
 110:	f3 03       	fmuls	r23, r19
 112:	1d 04       	cpc	r1, r13
 114:	4d 04       	cpc	r4, r13
 116:	26 04       	cpc	r2, r6
 118:	4d 04       	cpc	r4, r13
 11a:	4d 04       	cpc	r4, r13
 11c:	14 04       	cpc	r1, r4
 11e:	4d 04       	cpc	r4, r13
 120:	4d 04       	cpc	r4, r13
 122:	4d 04       	cpc	r4, r13
 124:	4d 04       	cpc	r4, r13
 126:	4d 04       	cpc	r4, r13
 128:	08 04       	cpc	r0, r8
 12a:	4b 04       	cpc	r4, r11

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf ef       	ldi	r28, 0xFF	; 255
 132:	d1 e2       	ldi	r29, 0x21	; 33
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	0c bf       	out	0x3c, r16	; 60

0000013c <__do_copy_data>:
 13c:	12 e0       	ldi	r17, 0x02	; 2
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b2 e0       	ldi	r27, 0x02	; 2
 142:	e2 e2       	ldi	r30, 0x22	; 34
 144:	fc e0       	ldi	r31, 0x0C	; 12
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	0b bf       	out	0x3b, r16	; 59
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__do_copy_data+0x14>
 14c:	07 90       	elpm	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	a0 33       	cpi	r26, 0x30	; 48
 152:	b1 07       	cpc	r27, r17
 154:	d9 f7       	brne	.-10     	; 0x14c <__do_copy_data+0x10>

00000156 <__do_clear_bss>:
 156:	22 e0       	ldi	r18, 0x02	; 2
 158:	a0 e3       	ldi	r26, 0x30	; 48
 15a:	b2 e0       	ldi	r27, 0x02	; 2
 15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
 15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
 160:	ae 33       	cpi	r26, 0x3E	; 62
 162:	b2 07       	cpc	r27, r18
 164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
 166:	02 d0       	rcall	.+4      	; 0x16c <main>
 168:	5a c5       	rjmp	.+2740   	; 0xc1e <_exit>

0000016a <__bad_interrupt>:
 16a:	4a cf       	rjmp	.-364    	; 0x0 <__vectors>

0000016c <main>:
#include <avr/interrupt.h>
#include "Wheel.h"
#include "headers.h"

int main(void)
{    
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
 174:	a2 97       	sbiw	r28, 0x22	; 34
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
	sei();
 180:	78 94       	sei
	initUART2();
 182:	7e d1       	rcall	.+764    	; 0x480 <_Z9initUART2v>
	char ch;
	Wheel w;
	w.init();
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	08 d2       	rcall	.+1040   	; 0x59a <_ZN5Wheel4initEv>
	
	while(1)
	{
		ch = '0';
		ch = UART2Receive();
 18a:	88 d1       	rcall	.+784    	; 0x49c <_Z12UART2Receivev>
		w.get_joystick_data(ch);
 18c:	68 2f       	mov	r22, r24
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	19 d3       	rcall	.+1586   	; 0x7c6 <_ZN5Wheel17get_joystick_dataEc>
		w.calculate_wheel_velocity();
 194:	ce 01       	movw	r24, r28
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	28 d2       	rcall	.+1104   	; 0x5ea <_ZN5Wheel24calculate_wheel_velocityEv>
		w.update_wheel_velocity();
 19a:	ce 01       	movw	r24, r28
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	e7 d2       	rcall	.+1486   	; 0x76e <_ZN5Wheel21update_wheel_velocityEv>
	}

	return 0;
 1a0:	f4 cf       	rjmp	.-24     	; 0x18a <main+0x1e>

000001a2 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
 1a2:	fc 01       	movw	r30, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	f1 f4       	brne	.+60     	; 0x1e6 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
 1aa:	e7 e0       	ldi	r30, 0x07	; 7
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
 1b4:	80 81       	ld	r24, Z
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
 1ba:	ea e0       	ldi	r30, 0x0A	; 10
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
 1c4:	e0 e2       	ldi	r30, 0x20	; 32
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	80 81       	ld	r24, Z
 1ca:	8a 60       	ori	r24, 0x0A	; 10
 1cc:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
 1ce:	e1 e2       	ldi	r30, 0x21	; 33
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	80 81       	ld	r24, Z
 1d4:	8a 61       	ori	r24, 0x1A	; 26
 1d6:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
 1d8:	89 ef       	ldi	r24, 0xF9	; 249
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 27 01 	sts	0x0127, r25
 1e0:	80 93 26 01 	sts	0x0126, r24
 1e4:	08 95       	ret
	}
	else if(num==2)
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	f1 f4       	brne	.+60     	; 0x226 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
 1ea:	e7 e0       	ldi	r30, 0x07	; 7
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	80 81       	ld	r24, Z
 1f0:	84 60       	ori	r24, 0x04	; 4
 1f2:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
 1f4:	80 81       	ld	r24, Z
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
 1fa:	ea e0       	ldi	r30, 0x0A	; 10
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	80 81       	ld	r24, Z
 200:	88 60       	ori	r24, 0x08	; 8
 202:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
 204:	e0 e2       	ldi	r30, 0x20	; 32
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	80 81       	ld	r24, Z
 20a:	82 68       	ori	r24, 0x82	; 130
 20c:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
 20e:	e1 e2       	ldi	r30, 0x21	; 33
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	80 81       	ld	r24, Z
 214:	8a 61       	ori	r24, 0x1A	; 26
 216:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
 218:	89 ef       	ldi	r24, 0xF9	; 249
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 27 01 	sts	0x0127, r25
 220:	80 93 26 01 	sts	0x0126, r24
 224:	08 95       	ret
	}
	else if(num==3)
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	f1 f4       	brne	.+60     	; 0x266 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
 22a:	e7 e0       	ldi	r30, 0x07	; 7
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	80 81       	ld	r24, Z
 230:	80 61       	ori	r24, 0x10	; 16
 232:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
 234:	80 81       	ld	r24, Z
 236:	80 62       	ori	r24, 0x20	; 32
 238:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
 23a:	ea e0       	ldi	r30, 0x0A	; 10
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	80 81       	ld	r24, Z
 240:	80 61       	ori	r24, 0x10	; 16
 242:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
 244:	e0 e2       	ldi	r30, 0x20	; 32
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	80 81       	ld	r24, Z
 24a:	82 62       	ori	r24, 0x22	; 34
 24c:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
 24e:	e1 e2       	ldi	r30, 0x21	; 33
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	80 81       	ld	r24, Z
 254:	8a 61       	ori	r24, 0x1A	; 26
 256:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
 258:	89 ef       	ldi	r24, 0xF9	; 249
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 27 01 	sts	0x0127, r25
 260:	80 93 26 01 	sts	0x0126, r24
 264:	08 95       	ret
	} 
	else if(num==4)
 266:	84 30       	cpi	r24, 0x04	; 4
 268:	e9 f4       	brne	.+58     	; 0x2a4 <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
 26a:	e7 e0       	ldi	r30, 0x07	; 7
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	80 81       	ld	r24, Z
 270:	81 60       	ori	r24, 0x01	; 1
 272:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
 27a:	e1 e0       	ldi	r30, 0x01	; 1
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	80 81       	ld	r24, Z
 280:	88 60       	ori	r24, 0x08	; 8
 282:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
 284:	e0 ea       	ldi	r30, 0xA0	; 160
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	82 68       	ori	r24, 0x82	; 130
 28c:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
 28e:	e1 ea       	ldi	r30, 0xA1	; 161
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8a 61       	ori	r24, 0x1A	; 26
 296:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
 298:	89 ef       	ldi	r24, 0xF9	; 249
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 a7 00 	sts	0x00A7, r25
 2a0:	80 93 a6 00 	sts	0x00A6, r24
 2a4:	08 95       	ret

000002a6 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
 2a6:	fc 01       	movw	r30, r24
 2a8:	80 81       	ld	r24, Z
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	91 f0       	breq	.+36     	; 0x2d2 <_ZN5Motor19SetForwardDirectionEv+0x2c>
 2ae:	18 f4       	brcc	.+6      	; 0x2b6 <_ZN5Motor19SetForwardDirectionEv+0x10>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <_ZN5Motor19SetForwardDirectionEv+0x1a>
 2b4:	08 95       	ret
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	a9 f0       	breq	.+42     	; 0x2e4 <_ZN5Motor19SetForwardDirectionEv+0x3e>
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	e1 f0       	breq	.+56     	; 0x2f6 <_ZN5Motor19SetForwardDirectionEv+0x50>
 2be:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
 2c0:	e8 e0       	ldi	r30, 0x08	; 8
 2c2:	f1 e0       	ldi	r31, 0x01	; 1
 2c4:	80 81       	ld	r24, Z
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 77       	andi	r24, 0x7F	; 127
 2ce:	80 83       	st	Z, r24
			break;
 2d0:	08 95       	ret
		case 2:
			SET		(DD_F2);
 2d2:	e8 e0       	ldi	r30, 0x08	; 8
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	80 81       	ld	r24, Z
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
 2dc:	80 81       	ld	r24, Z
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	80 83       	st	Z, r24
			break;
 2e2:	08 95       	ret
		case 3:
			SET		(DD_F3);
 2e4:	e8 e0       	ldi	r30, 0x08	; 8
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	80 81       	ld	r24, Z
 2ea:	80 61       	ori	r24, 0x10	; 16
 2ec:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7d       	andi	r24, 0xDF	; 223
 2f2:	80 83       	st	Z, r24
			break;
 2f4:	08 95       	ret
		case 4:
			SET		(DD_F4);
 2f6:	e8 e0       	ldi	r30, 0x08	; 8
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	80 81       	ld	r24, Z
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
 300:	80 81       	ld	r24, Z
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	80 83       	st	Z, r24
 306:	08 95       	ret

00000308 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 f0       	breq	.+36     	; 0x334 <_ZN5Motor19SetReverseDirectionEv+0x2c>
 310:	18 f4       	brcc	.+6      	; 0x318 <_ZN5Motor19SetReverseDirectionEv+0x10>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	31 f0       	breq	.+12     	; 0x322 <_ZN5Motor19SetReverseDirectionEv+0x1a>
 316:	08 95       	ret
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	a9 f0       	breq	.+42     	; 0x346 <_ZN5Motor19SetReverseDirectionEv+0x3e>
 31c:	84 30       	cpi	r24, 0x04	; 4
 31e:	e1 f0       	breq	.+56     	; 0x358 <_ZN5Motor19SetReverseDirectionEv+0x50>
 320:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
 322:	e8 e0       	ldi	r30, 0x08	; 8
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	80 81       	ld	r24, Z
 328:	8f 7b       	andi	r24, 0xBF	; 191
 32a:	80 83       	st	Z, r24
			SET		(DD_B1);
 32c:	80 81       	ld	r24, Z
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	80 83       	st	Z, r24
			break;
 332:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
 334:	e8 e0       	ldi	r30, 0x08	; 8
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	80 81       	ld	r24, Z
 33a:	8b 7f       	andi	r24, 0xFB	; 251
 33c:	80 83       	st	Z, r24
			SET		(DD_B2);
 33e:	80 81       	ld	r24, Z
 340:	88 60       	ori	r24, 0x08	; 8
 342:	80 83       	st	Z, r24
			break;
 344:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
 346:	e8 e0       	ldi	r30, 0x08	; 8
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	80 81       	ld	r24, Z
 34c:	8f 7e       	andi	r24, 0xEF	; 239
 34e:	80 83       	st	Z, r24
			SET		(DD_B3);
 350:	80 81       	ld	r24, Z
 352:	80 62       	ori	r24, 0x20	; 32
 354:	80 83       	st	Z, r24
			break;
 356:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
 358:	e8 e0       	ldi	r30, 0x08	; 8
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	80 81       	ld	r24, Z
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	80 83       	st	Z, r24
			SET		(DD_B4);
 362:	80 81       	ld	r24, Z
 364:	82 60       	ori	r24, 0x02	; 2
 366:	80 83       	st	Z, r24
 368:	08 95       	ret

0000036a <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
 36a:	fc 01       	movw	r30, r24
 36c:	80 81       	ld	r24, Z
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	b1 f0       	breq	.+44     	; 0x39e <_ZN5Motor9StopMotorEv+0x34>
 372:	18 f4       	brcc	.+6      	; 0x37a <_ZN5Motor9StopMotorEv+0x10>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	31 f0       	breq	.+12     	; 0x384 <_ZN5Motor9StopMotorEv+0x1a>
 378:	08 95       	ret
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	e9 f0       	breq	.+58     	; 0x3b8 <_ZN5Motor9StopMotorEv+0x4e>
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	41 f1       	breq	.+80     	; 0x3d2 <_ZN5Motor9StopMotorEv+0x68>
 382:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
 384:	e8 e0       	ldi	r30, 0x08	; 8
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	80 81       	ld	r24, Z
 38a:	8f 7b       	andi	r24, 0xBF	; 191
 38c:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
 38e:	80 81       	ld	r24, Z
 390:	8f 77       	andi	r24, 0x7F	; 127
 392:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
 394:	10 92 2d 01 	sts	0x012D, r1
 398:	10 92 2c 01 	sts	0x012C, r1
			break;
 39c:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
 39e:	e8 e0       	ldi	r30, 0x08	; 8
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	80 81       	ld	r24, Z
 3a4:	8b 7f       	andi	r24, 0xFB	; 251
 3a6:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
 3a8:	80 81       	ld	r24, Z
 3aa:	87 7f       	andi	r24, 0xF7	; 247
 3ac:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
 3ae:	10 92 29 01 	sts	0x0129, r1
 3b2:	10 92 28 01 	sts	0x0128, r1
			break;
 3b6:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
 3b8:	e8 e0       	ldi	r30, 0x08	; 8
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	80 81       	ld	r24, Z
 3be:	8f 7e       	andi	r24, 0xEF	; 239
 3c0:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
 3c2:	80 81       	ld	r24, Z
 3c4:	8f 7d       	andi	r24, 0xDF	; 223
 3c6:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
 3c8:	10 92 2b 01 	sts	0x012B, r1
 3cc:	10 92 2a 01 	sts	0x012A, r1
			break;
 3d0:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
 3d2:	e8 e0       	ldi	r30, 0x08	; 8
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	80 81       	ld	r24, Z
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
 3dc:	80 81       	ld	r24, Z
 3de:	8d 7f       	andi	r24, 0xFD	; 253
 3e0:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
 3e2:	10 92 a9 00 	sts	0x00A9, r1
 3e6:	10 92 a8 00 	sts	0x00A8, r1
 3ea:	08 95       	ret

000003ec <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	8c 01       	movw	r16, r24
 3f6:	eb 01       	movw	r28, r22
    if (Ocr > 0)
 3f8:	1c 16       	cp	r1, r28
 3fa:	1d 06       	cpc	r1, r29
 3fc:	0c f4       	brge	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
        SetForwardDirection();
 3fe:	53 df       	rcall	.-346    	; 0x2a6 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
 400:	c9 3f       	cpi	r28, 0xF9	; 249
 402:	d1 05       	cpc	r29, r1
 404:	44 f4       	brge	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
 406:	dd 23       	and	r29, r29
 408:	44 f4       	brge	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
        Ocr = -Ocr;
 40a:	d1 95       	neg	r29
 40c:	c1 95       	neg	r28
 40e:	d1 09       	sbc	r29, r1
        SetReverseDirection();
 410:	c8 01       	movw	r24, r16
 412:	7a df       	rcall	.-268    	; 0x308 <_ZN5Motor19SetReverseDirectionEv>
 414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
 416:	c9 ef       	ldi	r28, 0xF9	; 249
 418:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
 41a:	f8 01       	movw	r30, r16
 41c:	80 81       	ld	r24, Z
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	71 f0       	breq	.+28     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 422:	18 f4       	brcc	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	31 f0       	breq	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 428:	18 c0       	rjmp	.+48     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	69 f0       	breq	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	81 f0       	breq	.+32     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 432:	13 c0       	rjmp	.+38     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	{
		case 1:
			PWM_OCR1	= Ocr;
 434:	d0 93 2d 01 	sts	0x012D, r29
 438:	c0 93 2c 01 	sts	0x012C, r28
			break;
 43c:	0e c0       	rjmp	.+28     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		case 2:
			PWM_OCR2	= Ocr;
 43e:	d0 93 29 01 	sts	0x0129, r29
 442:	c0 93 28 01 	sts	0x0128, r28
			break;
 446:	09 c0       	rjmp	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		case 3:
			PWM_OCR3	= Ocr;
 448:	d0 93 2b 01 	sts	0x012B, r29
 44c:	c0 93 2a 01 	sts	0x012A, r28
			break;
 450:	04 c0       	rjmp	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		case 4:
			PWM_OCR4	= Ocr;
 452:	d0 93 a9 00 	sts	0x00A9, r29
 456:	c0 93 a8 00 	sts	0x00A8, r28
			break;
	}
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	ec 01       	movw	r28, r24
	num = no;
 46a:	68 83       	st	Y, r22
	InitPWM();
 46c:	9a de       	rcall	.-716    	; 0x1a2 <_ZN5Motor7InitPWMEv>

	StopMotor();
 46e:	ce 01       	movw	r24, r28
 470:	7c df       	rcall	.-264    	; 0x36a <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	ce 01       	movw	r24, r28
 478:	b9 df       	rcall	.-142    	; 0x3ec <_ZN5Motor11SetOcrValueEi>

}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <_Z9initUART2v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
 480:	10 92 31 02 	sts	0x0231, r1
 484:	10 92 d5 00 	sts	0x00D5, r1
 488:	87 e6       	ldi	r24, 0x67	; 103
 48a:	80 93 d4 00 	sts	0x00D4, r24
 48e:	88 e9       	ldi	r24, 0x98	; 152
 490:	80 93 d1 00 	sts	0x00D1, r24
 494:	86 e0       	ldi	r24, 0x06	; 6
 496:	80 93 d2 00 	sts	0x00D2, r24
 49a:	08 95       	ret

0000049c <_Z12UART2Receivev>:
 49c:	80 91 3a 02 	lds	r24, 0x023A
 4a0:	10 92 3a 02 	sts	0x023A, r1
 4a4:	08 95       	ret

000004a6 <__vector_25>:

ISR(USART0_RX_vect)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	8f 93       	push	r24
	buffer=UDR0;
 4b2:	80 91 c6 00 	lds	r24, 0x00C6
 4b6:	80 93 3d 02 	sts	0x023D, r24
}
 4ba:	8f 91       	pop	r24
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_36>:

ISR(USART1_RX_vect)
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	8f 93       	push	r24
	buffer1=UDR1;
 4d2:	80 91 ce 00 	lds	r24, 0x00CE
 4d6:	80 93 3c 02 	sts	0x023C, r24
	
}
 4da:	8f 91       	pop	r24
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_51>:

ISR(USART2_RX_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	0b b6       	in	r0, 0x3b	; 59
 4f2:	0f 92       	push	r0
 4f4:	8f 93       	push	r24
 4f6:	9f 93       	push	r25
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
	buffer2=UDR2;
 4fc:	90 91 d6 00 	lds	r25, 0x00D6
 500:	90 93 3a 02 	sts	0x023A, r25
		if(rcvflag)
 504:	80 91 30 02 	lds	r24, 0x0230
 508:	88 23       	and	r24, r24
 50a:	29 f1       	breq	.+74     	; 0x556 <__vector_51+0x70>
		{
			if (datacount == 0 || datacount == 1)
 50c:	80 91 31 02 	lds	r24, 0x0231
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	30 f4       	brcc	.+12     	; 0x520 <__vector_51+0x3a>
			rcvdata[datacount] = buffer2;
 514:	e8 2f       	mov	r30, r24
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	ee 5c       	subi	r30, 0xCE	; 206
 51a:	fd 4f       	sbci	r31, 0xFD	; 253
 51c:	90 83       	st	Z, r25
 51e:	11 c0       	rjmp	.+34     	; 0x542 <__vector_51+0x5c>
			else if (datacount == 3 || datacount == 5)
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	11 f0       	breq	.+4      	; 0x528 <__vector_51+0x42>
 524:	85 30       	cpi	r24, 0x05	; 5
 526:	39 f4       	brne	.+14     	; 0x536 <__vector_51+0x50>
			rcvdata[datacount] = buffer2 - 47;
 528:	e8 2f       	mov	r30, r24
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	ee 5c       	subi	r30, 0xCE	; 206
 52e:	fd 4f       	sbci	r31, 0xFD	; 253
 530:	9f 52       	subi	r25, 0x2F	; 47
 532:	90 83       	st	Z, r25
 534:	06 c0       	rjmp	.+12     	; 0x542 <__vector_51+0x5c>
			else 
			rcvdata[datacount] = buffer2 - 50; 
 536:	e8 2f       	mov	r30, r24
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	ee 5c       	subi	r30, 0xCE	; 206
 53c:	fd 4f       	sbci	r31, 0xFD	; 253
 53e:	92 53       	subi	r25, 0x32	; 50
 540:	90 83       	st	Z, r25
			datacount++;
 542:	8f 5f       	subi	r24, 0xFF	; 255
			if(datacount>7)
 544:	88 30       	cpi	r24, 0x08	; 8
 546:	18 f4       	brcc	.+6      	; 0x54e <__vector_51+0x68>
			rcvdata[datacount] = buffer2;
			else if (datacount == 3 || datacount == 5)
			rcvdata[datacount] = buffer2 - 47;
			else 
			rcvdata[datacount] = buffer2 - 50; 
			datacount++;
 548:	80 93 31 02 	sts	0x0231, r24
 54c:	04 c0       	rjmp	.+8      	; 0x556 <__vector_51+0x70>
			if(datacount>7)
			{
				datacount=0;
 54e:	10 92 31 02 	sts	0x0231, r1
				rcvflag = false;
 552:	10 92 30 02 	sts	0x0230, r1
				
			}
			
		}
		if(buffer2==START_BYTE)
 556:	80 91 3a 02 	lds	r24, 0x023A
 55a:	83 3e       	cpi	r24, 0xE3	; 227
 55c:	19 f4       	brne	.+6      	; 0x564 <__vector_51+0x7e>
		rcvflag=true;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	80 93 30 02 	sts	0x0230, r24
		
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	0f 90       	pop	r0
 56e:	0b be       	out	0x3b, r0	; 59
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_54>:
ISR(USART3_RX_vect)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	8f 93       	push	r24
	buffer3=UDR3;
 586:	80 91 36 01 	lds	r24, 0x0136
 58a:	80 93 3b 02 	sts	0x023B, r24
}
 58e:	8f 91       	pop	r24
 590:	0f 90       	pop	r0
 592:	0f be       	out	0x3f, r0	; 63
 594:	0f 90       	pop	r0
 596:	1f 90       	pop	r1
 598:	18 95       	reti

0000059a <_ZN5Wheel4initEv>:
#include "Wheel.h"

float coupling_matrix[4][3] = {{-0.707,0.707,-0.707},{0.707,0.707,0.707},{-0.707,0.707,0.707},{0.707,0.707,-0.707}};

void Wheel::init()
{
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	7c 01       	movw	r14, r24
	
	robot_rpm = 50;
 5a8:	82 e3       	ldi	r24, 0x32	; 50
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	f7 01       	movw	r30, r14
 5ae:	95 83       	std	Z+5, r25	; 0x05
 5b0:	84 83       	std	Z+4, r24	; 0x04
 5b2:	87 01       	movw	r16, r14
 5b4:	0a 5f       	subi	r16, 0xFA	; 250
 5b6:	1f 4f       	sbci	r17, 0xFF	; 255
 5b8:	c1 e0       	ldi	r28, 0x01	; 1
 5ba:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
 5bc:	f8 01       	movw	r30, r16
 5be:	11 92       	st	Z+, r1
 5c0:	11 92       	st	Z+, r1
 5c2:	8f 01       	movw	r16, r30
		velocity_robot[i] = 0;
 5c4:	17 82       	std	Z+7, r1	; 0x07
 5c6:	16 82       	std	Z+6, r1	; 0x06
 5c8:	ce 01       	movw	r24, r28
 5ca:	4d 96       	adiw	r24, 0x1d	; 29
		m[i].Initialise(i+1);
 5cc:	6c 2f       	mov	r22, r28
 5ce:	8e 0d       	add	r24, r14
 5d0:	9f 1d       	adc	r25, r15
 5d2:	48 df       	rcall	.-368    	; 0x464 <_ZN5Motor10InitialiseEh>
 5d4:	21 96       	adiw	r28, 0x01	; 1

void Wheel::init()
{
	
	robot_rpm = 50;
	for(int i=0;i<4;i++)
 5d6:	c5 30       	cpi	r28, 0x05	; 5
 5d8:	d1 05       	cpc	r29, r1
 5da:	81 f7       	brne	.-32     	; 0x5bc <_ZN5Wheel4initEv+0x22>
		//e[i].Initialise(i+1);
		//p[i].Set_Pid(0,0,0);
	}

	
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	08 95       	ret

000005ea <_ZN5Wheel24calculate_wheel_velocityEv>:
	else if (robot_rpm<0)	robot_rpm = 0;

 }

void Wheel::calculate_wheel_velocity()
{
 5ea:	2f 92       	push	r2
 5ec:	3f 92       	push	r3
 5ee:	4f 92       	push	r4
 5f0:	5f 92       	push	r5
 5f2:	6f 92       	push	r6
 5f4:	7f 92       	push	r7
 5f6:	8f 92       	push	r8
 5f8:	9f 92       	push	r9
 5fa:	af 92       	push	r10
 5fc:	bf 92       	push	r11
 5fe:	cf 92       	push	r12
 600:	df 92       	push	r13
 602:	ef 92       	push	r14
 604:	ff 92       	push	r15
 606:	0f 93       	push	r16
 608:	1f 93       	push	r17
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
 612:	60 97       	sbiw	r28, 0x10	; 16
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	3c 01       	movw	r6, r24
    for(i=0;i<4;i++)
 620:	dc 01       	movw	r26, r24
 622:	1d 92       	st	X+, r1
 624:	1c 92       	st	X, r1
 626:	9e 83       	std	Y+6, r25	; 0x06
 628:	8d 83       	std	Y+5, r24	; 0x05
 62a:	e0 e0       	ldi	r30, 0x00	; 0
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	fa 87       	std	Y+10, r31	; 0x0a
 630:	e9 87       	std	Y+9, r30	; 0x09
 632:	41 2c       	mov	r4, r1
 634:	51 2c       	mov	r5, r1
 636:	8c 01       	movw	r16, r24
 638:	02 5f       	subi	r16, 0xF2	; 242
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	0d 87       	std	Y+13, r16	; 0x0d
 63e:	1e 87       	std	Y+14, r17	; 0x0e
    {
        velocity_motor[i] = 0;
        for(j=0;j<3;j++)
 640:	58 86       	std	Y+8, r5	; 0x08
 642:	4f 82       	std	Y+7, r4	; 0x07
 644:	28 01       	movw	r4, r16
 646:	cd 80       	ldd	r12, Y+5	; 0x05
 648:	de 80       	ldd	r13, Y+6	; 0x06

void Wheel::calculate_wheel_velocity()
{
    for(i=0;i<4;i++)
    {
        velocity_motor[i] = 0;
 64a:	d6 01       	movw	r26, r12
 64c:	17 96       	adiw	r26, 0x07	; 7
 64e:	1c 92       	st	X, r1
 650:	1e 92       	st	-X, r1
 652:	16 97       	sbiw	r26, 0x06	; 6
        for(j=0;j<3;j++)
 654:	f3 01       	movw	r30, r6
 656:	13 82       	std	Z+3, r1	; 0x03
 658:	12 82       	std	Z+2, r1	; 0x02
 65a:	4b 86       	std	Y+11, r4	; 0x0b
 65c:	5c 86       	std	Y+12, r5	; 0x0c
 65e:	ed 84       	ldd	r14, Y+13	; 0x0d
 660:	fe 84       	ldd	r15, Y+14	; 0x0e
 662:	29 84       	ldd	r2, Y+9	; 0x09
 664:	3a 84       	ldd	r3, Y+10	; 0x0a
 666:	01 e0       	ldi	r16, 0x01	; 1
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	18 8b       	std	Y+16, r17	; 0x10
 66c:	0f 87       	std	Y+15, r16	; 0x0f
        {
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
 66e:	d7 01       	movw	r26, r14
 670:	0d 91       	ld	r16, X+
 672:	1d 91       	ld	r17, X+
 674:	7d 01       	movw	r14, r26
 676:	f1 01       	movw	r30, r2
 678:	81 90       	ld	r8, Z+
 67a:	91 90       	ld	r9, Z+
 67c:	a1 90       	ld	r10, Z+
 67e:	b1 90       	ld	r11, Z+
 680:	1f 01       	movw	r2, r30
 682:	d6 01       	movw	r26, r12
 684:	16 96       	adiw	r26, 0x06	; 6
 686:	6d 91       	ld	r22, X+
 688:	7c 91       	ld	r23, X
 68a:	17 97       	sbiw	r26, 0x07	; 7
 68c:	07 2e       	mov	r0, r23
 68e:	00 0c       	add	r0, r0
 690:	88 0b       	sbc	r24, r24
 692:	99 0b       	sbc	r25, r25
 694:	a6 d1       	rcall	.+844    	; 0x9e2 <__floatsisf>
 696:	69 83       	std	Y+1, r22	; 0x01
 698:	7a 83       	std	Y+2, r23	; 0x02
 69a:	8b 83       	std	Y+3, r24	; 0x03
 69c:	9c 83       	std	Y+4, r25	; 0x04
 69e:	b8 01       	movw	r22, r16
 6a0:	11 0f       	add	r17, r17
 6a2:	88 0b       	sbc	r24, r24
 6a4:	99 0b       	sbc	r25, r25
 6a6:	9d d1       	rcall	.+826    	; 0x9e2 <__floatsisf>
 6a8:	a5 01       	movw	r20, r10
 6aa:	94 01       	movw	r18, r8
 6ac:	26 d2       	rcall	.+1100   	; 0xafa <__mulsf3>
 6ae:	9b 01       	movw	r18, r22
 6b0:	ac 01       	movw	r20, r24
 6b2:	69 81       	ldd	r22, Y+1	; 0x01
 6b4:	7a 81       	ldd	r23, Y+2	; 0x02
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	fc d0       	rcall	.+504    	; 0x8b4 <__addsf3>
 6bc:	5f d1       	rcall	.+702    	; 0x97c <__fixsfsi>
 6be:	f6 01       	movw	r30, r12
 6c0:	77 83       	std	Z+7, r23	; 0x07
 6c2:	66 83       	std	Z+6, r22	; 0x06
void Wheel::calculate_wheel_velocity()
{
    for(i=0;i<4;i++)
    {
        velocity_motor[i] = 0;
        for(j=0;j<3;j++)
 6c4:	ef 85       	ldd	r30, Y+15	; 0x0f
 6c6:	f8 89       	ldd	r31, Y+16	; 0x10
 6c8:	d3 01       	movw	r26, r6
 6ca:	13 96       	adiw	r26, 0x03	; 3
 6cc:	fc 93       	st	X, r31
 6ce:	ee 93       	st	-X, r30
 6d0:	12 97       	sbiw	r26, 0x02	; 2
 6d2:	31 96       	adiw	r30, 0x01	; 1
 6d4:	f8 8b       	std	Y+16, r31	; 0x10
 6d6:	ef 87       	std	Y+15, r30	; 0x0f
 6d8:	34 97       	sbiw	r30, 0x04	; 4
 6da:	49 f6       	brne	.-110    	; 0x66e <_ZN5Wheel24calculate_wheel_velocityEv+0x84>

 }

void Wheel::calculate_wheel_velocity()
{
    for(i=0;i<4;i++)
 6dc:	8f 81       	ldd	r24, Y+7	; 0x07
 6de:	98 85       	ldd	r25, Y+8	; 0x08
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	98 87       	std	Y+8, r25	; 0x08
 6e4:	8f 83       	std	Y+7, r24	; 0x07
 6e6:	8d 93       	st	X+, r24
 6e8:	9c 93       	st	X, r25
 6ea:	ed 81       	ldd	r30, Y+5	; 0x05
 6ec:	fe 81       	ldd	r31, Y+6	; 0x06
 6ee:	32 96       	adiw	r30, 0x02	; 2
 6f0:	fe 83       	std	Y+6, r31	; 0x06
 6f2:	ed 83       	std	Y+5, r30	; 0x05
 6f4:	89 85       	ldd	r24, Y+9	; 0x09
 6f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 6f8:	0c 96       	adiw	r24, 0x0c	; 12
 6fa:	9a 87       	std	Y+10, r25	; 0x0a
 6fc:	89 87       	std	Y+9, r24	; 0x09
 6fe:	af 81       	ldd	r26, Y+7	; 0x07
 700:	b8 85       	ldd	r27, Y+8	; 0x08
 702:	14 97       	sbiw	r26, 0x04	; 4
 704:	09 f0       	breq	.+2      	; 0x708 <_ZN5Wheel24calculate_wheel_velocityEv+0x11e>
 706:	9f cf       	rjmp	.-194    	; 0x646 <_ZN5Wheel24calculate_wheel_velocityEv+0x5c>
 708:	f3 01       	movw	r30, r6
 70a:	36 96       	adiw	r30, 0x06	; 6
 70c:	eb 84       	ldd	r14, Y+11	; 0x0b
 70e:	fc 84       	ldd	r15, Y+12	; 0x0c
		
    }
	
    for(i=0;i<4;i++)
    {
		ocr_motor[i] = (int(249*velocity_motor[i])/(MAX_RPM));
 710:	49 ef       	ldi	r20, 0xF9	; 249
 712:	00 ef       	ldi	r16, 0xF0	; 240
 714:	10 e0       	ldi	r17, 0x00	; 0
 716:	21 91       	ld	r18, Z+
 718:	31 91       	ld	r19, Z+
 71a:	42 9f       	mul	r20, r18
 71c:	c0 01       	movw	r24, r0
 71e:	43 9f       	mul	r20, r19
 720:	90 0d       	add	r25, r0
 722:	11 24       	eor	r1, r1
 724:	b8 01       	movw	r22, r16
 726:	4c d2       	rcall	.+1176   	; 0xbc0 <__divmodhi4>
 728:	77 87       	std	Z+15, r23	; 0x0f
 72a:	66 87       	std	Z+14, r22	; 0x0e
             velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
        }
		
    }
	
    for(i=0;i<4;i++)
 72c:	ee 15       	cp	r30, r14
 72e:	ff 05       	cpc	r31, r15
 730:	91 f7       	brne	.-28     	; 0x716 <_ZN5Wheel24calculate_wheel_velocityEv+0x12c>
 732:	84 e0       	ldi	r24, 0x04	; 4
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	f3 01       	movw	r30, r6
 738:	91 83       	std	Z+1, r25	; 0x01
 73a:	80 83       	st	Z, r24
		//ocr_motor[i] = velocity_motor[i]*PPR/3000.0;
		//velocity_robot[i] = 0;
		//p[i].Set_SP(ocr_motor[i]);
    }
	  
}
 73c:	60 96       	adiw	r28, 0x10	; 16
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	f8 94       	cli
 742:	de bf       	out	0x3e, r29	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	cd bf       	out	0x3d, r28	; 61
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	ff 90       	pop	r15
 752:	ef 90       	pop	r14
 754:	df 90       	pop	r13
 756:	cf 90       	pop	r12
 758:	bf 90       	pop	r11
 75a:	af 90       	pop	r10
 75c:	9f 90       	pop	r9
 75e:	8f 90       	pop	r8
 760:	7f 90       	pop	r7
 762:	6f 90       	pop	r6
 764:	5f 90       	pop	r5
 766:	4f 90       	pop	r4
 768:	3f 90       	pop	r3
 76a:	2f 90       	pop	r2
 76c:	08 95       	ret

0000076e <_ZN5Wheel21update_wheel_velocityEv>:

void Wheel::update_wheel_velocity()
{
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	ec 01       	movw	r28, r24
		//{
			//m[i].SetOcrValue(p[i].Compute(e[i].Get_Speed()));
		//}
		//pidflag = false;
	//}	  
	for(i = 0; i<4 ; i++)
 774:	19 82       	std	Y+1, r1	; 0x01
 776:	18 82       	st	Y, r1
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
	{
		m[i].SetOcrValue(ocr_motor[i]);
 77c:	fc 01       	movw	r30, r24
 77e:	3b 96       	adiw	r30, 0x0b	; 11
 780:	ee 0f       	add	r30, r30
 782:	ff 1f       	adc	r31, r31
 784:	ec 0f       	add	r30, r28
 786:	fd 1f       	adc	r31, r29
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	4e 96       	adiw	r24, 0x1e	; 30
 78e:	8c 0f       	add	r24, r28
 790:	9d 1f       	adc	r25, r29
 792:	2c de       	rcall	.-936    	; 0x3ec <_ZN5Motor11SetOcrValueEi>
		//{
			//m[i].SetOcrValue(p[i].Compute(e[i].Get_Speed()));
		//}
		//pidflag = false;
	//}	  
	for(i = 0; i<4 ; i++)
 794:	88 81       	ld	r24, Y
 796:	99 81       	ldd	r25, Y+1	; 0x01
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	99 83       	std	Y+1, r25	; 0x01
 79c:	88 83       	st	Y, r24
 79e:	84 30       	cpi	r24, 0x04	; 4
 7a0:	91 05       	cpc	r25, r1
 7a2:	64 f3       	brlt	.-40     	; 0x77c <_ZN5Wheel21update_wheel_velocityEv+0xe>
	{
		m[i].SetOcrValue(ocr_motor[i]);
	}
}
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <_ZN5Wheel12reset_robvelEv>:
	

void Wheel::reset_robvel()
{
 7aa:	fc 01       	movw	r30, r24
	for(i=0;i<4;i++)
	{
		velocity_robot[i] = 0;
 7ac:	17 86       	std	Z+15, r1	; 0x0f
 7ae:	16 86       	std	Z+14, r1	; 0x0e
 7b0:	11 8a       	std	Z+17, r1	; 0x11
 7b2:	10 8a       	std	Z+16, r1	; 0x10
 7b4:	13 8a       	std	Z+19, r1	; 0x13
 7b6:	12 8a       	std	Z+18, r1	; 0x12
 7b8:	15 8a       	std	Z+21, r1	; 0x15
 7ba:	14 8a       	std	Z+20, r1	; 0x14
 7bc:	84 e0       	ldi	r24, 0x04	; 4
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	91 83       	std	Z+1, r25	; 0x01
 7c2:	80 83       	st	Z, r24
 7c4:	08 95       	ret

000007c6 <_ZN5Wheel17get_joystick_dataEc>:

	
}

 void Wheel::get_joystick_data(char data)
 {
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	ec 01       	movw	r28, r24
	
	switch(data)
 7cc:	46 2f       	mov	r20, r22
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	fa 01       	movw	r30, r20
 7d2:	f0 97       	sbiw	r30, 0x30	; 48
 7d4:	e4 32       	cpi	r30, 0x24	; 36
 7d6:	f1 05       	cpc	r31, r1
 7d8:	08 f0       	brcs	.+2      	; 0x7dc <_ZN5Wheel17get_joystick_dataEc+0x16>
 7da:	5f c0       	rjmp	.+190    	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
 7dc:	88 27       	eor	r24, r24
 7de:	ee 58       	subi	r30, 0x8E	; 142
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	00 c2       	rjmp	.+1024   	; 0xbe6 <__tablejump2__>
	{
		case 'F':
		{
			velocity_robot[0] = 0;
 7e6:	1f 86       	std	Y+15, r1	; 0x0f
 7e8:	1e 86       	std	Y+14, r1	; 0x0e
			velocity_robot[1] = robot_rpm;
 7ea:	8c 81       	ldd	r24, Y+4	; 0x04
 7ec:	9d 81       	ldd	r25, Y+5	; 0x05
 7ee:	99 8b       	std	Y+17, r25	; 0x11
 7f0:	88 8b       	std	Y+16, r24	; 0x10
			velocity_robot[2] = 0;
 7f2:	1b 8a       	std	Y+19, r1	; 0x13
 7f4:	1a 8a       	std	Y+18, r1	; 0x12
			break;
 7f6:	51 c0       	rjmp	.+162    	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
		}
		case 'B':
		{
			velocity_robot[0] = 0;
 7f8:	1f 86       	std	Y+15, r1	; 0x0f
 7fa:	1e 86       	std	Y+14, r1	; 0x0e
			velocity_robot[1] = -robot_rpm;
 7fc:	8c 81       	ldd	r24, Y+4	; 0x04
 7fe:	9d 81       	ldd	r25, Y+5	; 0x05
 800:	91 95       	neg	r25
 802:	81 95       	neg	r24
 804:	91 09       	sbc	r25, r1
 806:	99 8b       	std	Y+17, r25	; 0x11
 808:	88 8b       	std	Y+16, r24	; 0x10
			velocity_robot[2] = 0;
 80a:	1b 8a       	std	Y+19, r1	; 0x13
 80c:	1a 8a       	std	Y+18, r1	; 0x12
			break;
 80e:	45 c0       	rjmp	.+138    	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
		}
		case 'R':
		{
			velocity_robot[0] = -robot_rpm;
 810:	8c 81       	ldd	r24, Y+4	; 0x04
 812:	9d 81       	ldd	r25, Y+5	; 0x05
 814:	91 95       	neg	r25
 816:	81 95       	neg	r24
 818:	91 09       	sbc	r25, r1
 81a:	9f 87       	std	Y+15, r25	; 0x0f
 81c:	8e 87       	std	Y+14, r24	; 0x0e
			velocity_robot[1] = 0;
 81e:	19 8a       	std	Y+17, r1	; 0x11
 820:	18 8a       	std	Y+16, r1	; 0x10
			velocity_robot[2] = 0;
 822:	1b 8a       	std	Y+19, r1	; 0x13
 824:	1a 8a       	std	Y+18, r1	; 0x12
			break;
 826:	39 c0       	rjmp	.+114    	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
		}
		case 'L':
		{
			velocity_robot[0] = robot_rpm;
 828:	8c 81       	ldd	r24, Y+4	; 0x04
 82a:	9d 81       	ldd	r25, Y+5	; 0x05
 82c:	9f 87       	std	Y+15, r25	; 0x0f
 82e:	8e 87       	std	Y+14, r24	; 0x0e
			velocity_robot[1] = 0;
 830:	19 8a       	std	Y+17, r1	; 0x11
 832:	18 8a       	std	Y+16, r1	; 0x10
			velocity_robot[2] = 0;
 834:	1b 8a       	std	Y+19, r1	; 0x13
 836:	1a 8a       	std	Y+18, r1	; 0x12
			break;
 838:	30 c0       	rjmp	.+96     	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
		}
		case 'G':
		{
			velocity_robot[0] = 0;
 83a:	1f 86       	std	Y+15, r1	; 0x0f
 83c:	1e 86       	std	Y+14, r1	; 0x0e
			velocity_robot[1] = 0;
 83e:	19 8a       	std	Y+17, r1	; 0x11
 840:	18 8a       	std	Y+16, r1	; 0x10
			velocity_robot[2] = robot_rpm;
 842:	8c 81       	ldd	r24, Y+4	; 0x04
 844:	9d 81       	ldd	r25, Y+5	; 0x05
 846:	9b 8b       	std	Y+19, r25	; 0x13
 848:	8a 8b       	std	Y+18, r24	; 0x12
			break;
 84a:	27 c0       	rjmp	.+78     	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
		}
		case 'I':
		{
			velocity_robot[0] = 0;
 84c:	1f 86       	std	Y+15, r1	; 0x0f
 84e:	1e 86       	std	Y+14, r1	; 0x0e
			velocity_robot[1] = 0;
 850:	19 8a       	std	Y+17, r1	; 0x11
 852:	18 8a       	std	Y+16, r1	; 0x10
			velocity_robot[2] = -robot_rpm;
 854:	8c 81       	ldd	r24, Y+4	; 0x04
 856:	9d 81       	ldd	r25, Y+5	; 0x05
 858:	91 95       	neg	r25
 85a:	81 95       	neg	r24
 85c:	91 09       	sbc	r25, r1
 85e:	9b 8b       	std	Y+19, r25	; 0x13
 860:	8a 8b       	std	Y+18, r24	; 0x12
			break;
 862:	1b c0       	rjmp	.+54     	; 0x89a <_ZN5Wheel17get_joystick_dataEc+0xd4>
		}
		case '0':
		{
			robot_rpm = 80;
 864:	80 e5       	ldi	r24, 0x50	; 80
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	9d 83       	std	Y+5, r25	; 0x05
 86a:	8c 83       	std	Y+4, r24	; 0x04
			break;
 86c:	1f c0       	rjmp	.+62     	; 0x8ac <_ZN5Wheel17get_joystick_dataEc+0xe6>
		}
		case '1':
		{
			robot_rpm = 100;
 86e:	84 e6       	ldi	r24, 0x64	; 100
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	9d 83       	std	Y+5, r25	; 0x05
 874:	8c 83       	std	Y+4, r24	; 0x04
			break;
 876:	1a c0       	rjmp	.+52     	; 0x8ac <_ZN5Wheel17get_joystick_dataEc+0xe6>
		}
		case '2':
		{
			robot_rpm = 120;
 878:	88 e7       	ldi	r24, 0x78	; 120
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	9d 83       	std	Y+5, r25	; 0x05
 87e:	8c 83       	std	Y+4, r24	; 0x04
			break;
 880:	15 c0       	rjmp	.+42     	; 0x8ac <_ZN5Wheel17get_joystick_dataEc+0xe6>
		}
		case '3':
		{
			robot_rpm = 140;
 882:	8c e8       	ldi	r24, 0x8C	; 140
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	9d 83       	std	Y+5, r25	; 0x05
 888:	8c 83       	std	Y+4, r24	; 0x04
			break;
 88a:	10 c0       	rjmp	.+32     	; 0x8ac <_ZN5Wheel17get_joystick_dataEc+0xe6>
		}
		case '4':
		{
			robot_rpm = 180;
 88c:	84 eb       	ldi	r24, 0xB4	; 180
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	9d 83       	std	Y+5, r25	; 0x05
 892:	8c 83       	std	Y+4, r24	; 0x04
			break;
 894:	0b c0       	rjmp	.+22     	; 0x8ac <_ZN5Wheel17get_joystick_dataEc+0xe6>
		}
		case 'S':
		{
			reset_robvel();
 896:	ce 01       	movw	r24, r28
 898:	88 df       	rcall	.-240    	; 0x7aa <_ZN5Wheel12reset_robvelEv>
			break;
		}
	}
	if (robot_rpm>MAX_RPM) robot_rpm = MAX_RPM;
 89a:	8c 81       	ldd	r24, Y+4	; 0x04
 89c:	9d 81       	ldd	r25, Y+5	; 0x05
 89e:	81 3f       	cpi	r24, 0xF1	; 241
 8a0:	91 05       	cpc	r25, r1
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <_ZN5Wheel17get_joystick_dataEc+0xe6>
 8a4:	80 ef       	ldi	r24, 0xF0	; 240
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	9d 83       	std	Y+5, r25	; 0x05
 8aa:	8c 83       	std	Y+4, r24	; 0x04
	else if (robot_rpm<0)	robot_rpm = 0;

 }
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <__subsf3>:
 8b2:	50 58       	subi	r21, 0x80	; 128

000008b4 <__addsf3>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	aa 27       	eor	r26, r26
 8b8:	0e d0       	rcall	.+28     	; 0x8d6 <__addsf3x>
 8ba:	e5 c0       	rjmp	.+458    	; 0xa86 <__fp_round>
 8bc:	d6 d0       	rcall	.+428    	; 0xa6a <__fp_pscA>
 8be:	30 f0       	brcs	.+12     	; 0x8cc <__addsf3+0x18>
 8c0:	db d0       	rcall	.+438    	; 0xa78 <__fp_pscB>
 8c2:	20 f0       	brcs	.+8      	; 0x8cc <__addsf3+0x18>
 8c4:	31 f4       	brne	.+12     	; 0x8d2 <__addsf3+0x1e>
 8c6:	9f 3f       	cpi	r25, 0xFF	; 255
 8c8:	11 f4       	brne	.+4      	; 0x8ce <__addsf3+0x1a>
 8ca:	1e f4       	brtc	.+6      	; 0x8d2 <__addsf3+0x1e>
 8cc:	cb c0       	rjmp	.+406    	; 0xa64 <__fp_nan>
 8ce:	0e f4       	brtc	.+2      	; 0x8d2 <__addsf3+0x1e>
 8d0:	e0 95       	com	r30
 8d2:	e7 fb       	bst	r30, 7
 8d4:	c1 c0       	rjmp	.+386    	; 0xa58 <__fp_inf>

000008d6 <__addsf3x>:
 8d6:	e9 2f       	mov	r30, r25
 8d8:	e7 d0       	rcall	.+462    	; 0xaa8 <__fp_split3>
 8da:	80 f3       	brcs	.-32     	; 0x8bc <__addsf3+0x8>
 8dc:	ba 17       	cp	r27, r26
 8de:	62 07       	cpc	r22, r18
 8e0:	73 07       	cpc	r23, r19
 8e2:	84 07       	cpc	r24, r20
 8e4:	95 07       	cpc	r25, r21
 8e6:	18 f0       	brcs	.+6      	; 0x8ee <__addsf3x+0x18>
 8e8:	71 f4       	brne	.+28     	; 0x906 <__addsf3x+0x30>
 8ea:	9e f5       	brtc	.+102    	; 0x952 <__addsf3x+0x7c>
 8ec:	ff c0       	rjmp	.+510    	; 0xaec <__fp_zero>
 8ee:	0e f4       	brtc	.+2      	; 0x8f2 <__addsf3x+0x1c>
 8f0:	e0 95       	com	r30
 8f2:	0b 2e       	mov	r0, r27
 8f4:	ba 2f       	mov	r27, r26
 8f6:	a0 2d       	mov	r26, r0
 8f8:	0b 01       	movw	r0, r22
 8fa:	b9 01       	movw	r22, r18
 8fc:	90 01       	movw	r18, r0
 8fe:	0c 01       	movw	r0, r24
 900:	ca 01       	movw	r24, r20
 902:	a0 01       	movw	r20, r0
 904:	11 24       	eor	r1, r1
 906:	ff 27       	eor	r31, r31
 908:	59 1b       	sub	r21, r25
 90a:	99 f0       	breq	.+38     	; 0x932 <__addsf3x+0x5c>
 90c:	59 3f       	cpi	r21, 0xF9	; 249
 90e:	50 f4       	brcc	.+20     	; 0x924 <__addsf3x+0x4e>
 910:	50 3e       	cpi	r21, 0xE0	; 224
 912:	68 f1       	brcs	.+90     	; 0x96e <__addsf3x+0x98>
 914:	1a 16       	cp	r1, r26
 916:	f0 40       	sbci	r31, 0x00	; 0
 918:	a2 2f       	mov	r26, r18
 91a:	23 2f       	mov	r18, r19
 91c:	34 2f       	mov	r19, r20
 91e:	44 27       	eor	r20, r20
 920:	58 5f       	subi	r21, 0xF8	; 248
 922:	f3 cf       	rjmp	.-26     	; 0x90a <__addsf3x+0x34>
 924:	46 95       	lsr	r20
 926:	37 95       	ror	r19
 928:	27 95       	ror	r18
 92a:	a7 95       	ror	r26
 92c:	f0 40       	sbci	r31, 0x00	; 0
 92e:	53 95       	inc	r21
 930:	c9 f7       	brne	.-14     	; 0x924 <__addsf3x+0x4e>
 932:	7e f4       	brtc	.+30     	; 0x952 <__addsf3x+0x7c>
 934:	1f 16       	cp	r1, r31
 936:	ba 0b       	sbc	r27, r26
 938:	62 0b       	sbc	r22, r18
 93a:	73 0b       	sbc	r23, r19
 93c:	84 0b       	sbc	r24, r20
 93e:	ba f0       	brmi	.+46     	; 0x96e <__addsf3x+0x98>
 940:	91 50       	subi	r25, 0x01	; 1
 942:	a1 f0       	breq	.+40     	; 0x96c <__addsf3x+0x96>
 944:	ff 0f       	add	r31, r31
 946:	bb 1f       	adc	r27, r27
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	c2 f7       	brpl	.-16     	; 0x940 <__addsf3x+0x6a>
 950:	0e c0       	rjmp	.+28     	; 0x96e <__addsf3x+0x98>
 952:	ba 0f       	add	r27, r26
 954:	62 1f       	adc	r22, r18
 956:	73 1f       	adc	r23, r19
 958:	84 1f       	adc	r24, r20
 95a:	48 f4       	brcc	.+18     	; 0x96e <__addsf3x+0x98>
 95c:	87 95       	ror	r24
 95e:	77 95       	ror	r23
 960:	67 95       	ror	r22
 962:	b7 95       	ror	r27
 964:	f7 95       	ror	r31
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	08 f0       	brcs	.+2      	; 0x96c <__addsf3x+0x96>
 96a:	b3 cf       	rjmp	.-154    	; 0x8d2 <__addsf3+0x1e>
 96c:	93 95       	inc	r25
 96e:	88 0f       	add	r24, r24
 970:	08 f0       	brcs	.+2      	; 0x974 <__addsf3x+0x9e>
 972:	99 27       	eor	r25, r25
 974:	ee 0f       	add	r30, r30
 976:	97 95       	ror	r25
 978:	87 95       	ror	r24
 97a:	08 95       	ret

0000097c <__fixsfsi>:
 97c:	04 d0       	rcall	.+8      	; 0x986 <__fixunssfsi>
 97e:	68 94       	set
 980:	b1 11       	cpse	r27, r1
 982:	b5 c0       	rjmp	.+362    	; 0xaee <__fp_szero>
 984:	08 95       	ret

00000986 <__fixunssfsi>:
 986:	98 d0       	rcall	.+304    	; 0xab8 <__fp_splitA>
 988:	88 f0       	brcs	.+34     	; 0x9ac <__fixunssfsi+0x26>
 98a:	9f 57       	subi	r25, 0x7F	; 127
 98c:	90 f0       	brcs	.+36     	; 0x9b2 <__fixunssfsi+0x2c>
 98e:	b9 2f       	mov	r27, r25
 990:	99 27       	eor	r25, r25
 992:	b7 51       	subi	r27, 0x17	; 23
 994:	a0 f0       	brcs	.+40     	; 0x9be <__fixunssfsi+0x38>
 996:	d1 f0       	breq	.+52     	; 0x9cc <__fixunssfsi+0x46>
 998:	66 0f       	add	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	1a f0       	brmi	.+6      	; 0x9a8 <__fixunssfsi+0x22>
 9a2:	ba 95       	dec	r27
 9a4:	c9 f7       	brne	.-14     	; 0x998 <__fixunssfsi+0x12>
 9a6:	12 c0       	rjmp	.+36     	; 0x9cc <__fixunssfsi+0x46>
 9a8:	b1 30       	cpi	r27, 0x01	; 1
 9aa:	81 f0       	breq	.+32     	; 0x9cc <__fixunssfsi+0x46>
 9ac:	9f d0       	rcall	.+318    	; 0xaec <__fp_zero>
 9ae:	b1 e0       	ldi	r27, 0x01	; 1
 9b0:	08 95       	ret
 9b2:	9c c0       	rjmp	.+312    	; 0xaec <__fp_zero>
 9b4:	67 2f       	mov	r22, r23
 9b6:	78 2f       	mov	r23, r24
 9b8:	88 27       	eor	r24, r24
 9ba:	b8 5f       	subi	r27, 0xF8	; 248
 9bc:	39 f0       	breq	.+14     	; 0x9cc <__fixunssfsi+0x46>
 9be:	b9 3f       	cpi	r27, 0xF9	; 249
 9c0:	cc f3       	brlt	.-14     	; 0x9b4 <__fixunssfsi+0x2e>
 9c2:	86 95       	lsr	r24
 9c4:	77 95       	ror	r23
 9c6:	67 95       	ror	r22
 9c8:	b3 95       	inc	r27
 9ca:	d9 f7       	brne	.-10     	; 0x9c2 <__fixunssfsi+0x3c>
 9cc:	3e f4       	brtc	.+14     	; 0x9dc <__fixunssfsi+0x56>
 9ce:	90 95       	com	r25
 9d0:	80 95       	com	r24
 9d2:	70 95       	com	r23
 9d4:	61 95       	neg	r22
 9d6:	7f 4f       	sbci	r23, 0xFF	; 255
 9d8:	8f 4f       	sbci	r24, 0xFF	; 255
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	08 95       	ret

000009de <__floatunsisf>:
 9de:	e8 94       	clt
 9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <__floatsisf+0x12>

000009e2 <__floatsisf>:
 9e2:	97 fb       	bst	r25, 7
 9e4:	3e f4       	brtc	.+14     	; 0x9f4 <__floatsisf+0x12>
 9e6:	90 95       	com	r25
 9e8:	80 95       	com	r24
 9ea:	70 95       	com	r23
 9ec:	61 95       	neg	r22
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	99 23       	and	r25, r25
 9f6:	a9 f0       	breq	.+42     	; 0xa22 <__floatsisf+0x40>
 9f8:	f9 2f       	mov	r31, r25
 9fa:	96 e9       	ldi	r25, 0x96	; 150
 9fc:	bb 27       	eor	r27, r27
 9fe:	93 95       	inc	r25
 a00:	f6 95       	lsr	r31
 a02:	87 95       	ror	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	b7 95       	ror	r27
 a0a:	f1 11       	cpse	r31, r1
 a0c:	f8 cf       	rjmp	.-16     	; 0x9fe <__floatsisf+0x1c>
 a0e:	fa f4       	brpl	.+62     	; 0xa4e <__floatsisf+0x6c>
 a10:	bb 0f       	add	r27, r27
 a12:	11 f4       	brne	.+4      	; 0xa18 <__floatsisf+0x36>
 a14:	60 ff       	sbrs	r22, 0
 a16:	1b c0       	rjmp	.+54     	; 0xa4e <__floatsisf+0x6c>
 a18:	6f 5f       	subi	r22, 0xFF	; 255
 a1a:	7f 4f       	sbci	r23, 0xFF	; 255
 a1c:	8f 4f       	sbci	r24, 0xFF	; 255
 a1e:	9f 4f       	sbci	r25, 0xFF	; 255
 a20:	16 c0       	rjmp	.+44     	; 0xa4e <__floatsisf+0x6c>
 a22:	88 23       	and	r24, r24
 a24:	11 f0       	breq	.+4      	; 0xa2a <__floatsisf+0x48>
 a26:	96 e9       	ldi	r25, 0x96	; 150
 a28:	11 c0       	rjmp	.+34     	; 0xa4c <__floatsisf+0x6a>
 a2a:	77 23       	and	r23, r23
 a2c:	21 f0       	breq	.+8      	; 0xa36 <__floatsisf+0x54>
 a2e:	9e e8       	ldi	r25, 0x8E	; 142
 a30:	87 2f       	mov	r24, r23
 a32:	76 2f       	mov	r23, r22
 a34:	05 c0       	rjmp	.+10     	; 0xa40 <__floatsisf+0x5e>
 a36:	66 23       	and	r22, r22
 a38:	71 f0       	breq	.+28     	; 0xa56 <__floatsisf+0x74>
 a3a:	96 e8       	ldi	r25, 0x86	; 134
 a3c:	86 2f       	mov	r24, r22
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	2a f0       	brmi	.+10     	; 0xa4e <__floatsisf+0x6c>
 a44:	9a 95       	dec	r25
 a46:	66 0f       	add	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	da f7       	brpl	.-10     	; 0xa44 <__floatsisf+0x62>
 a4e:	88 0f       	add	r24, r24
 a50:	96 95       	lsr	r25
 a52:	87 95       	ror	r24
 a54:	97 f9       	bld	r25, 7
 a56:	08 95       	ret

00000a58 <__fp_inf>:
 a58:	97 f9       	bld	r25, 7
 a5a:	9f 67       	ori	r25, 0x7F	; 127
 a5c:	80 e8       	ldi	r24, 0x80	; 128
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	60 e0       	ldi	r22, 0x00	; 0
 a62:	08 95       	ret

00000a64 <__fp_nan>:
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	80 ec       	ldi	r24, 0xC0	; 192
 a68:	08 95       	ret

00000a6a <__fp_pscA>:
 a6a:	00 24       	eor	r0, r0
 a6c:	0a 94       	dec	r0
 a6e:	16 16       	cp	r1, r22
 a70:	17 06       	cpc	r1, r23
 a72:	18 06       	cpc	r1, r24
 a74:	09 06       	cpc	r0, r25
 a76:	08 95       	ret

00000a78 <__fp_pscB>:
 a78:	00 24       	eor	r0, r0
 a7a:	0a 94       	dec	r0
 a7c:	12 16       	cp	r1, r18
 a7e:	13 06       	cpc	r1, r19
 a80:	14 06       	cpc	r1, r20
 a82:	05 06       	cpc	r0, r21
 a84:	08 95       	ret

00000a86 <__fp_round>:
 a86:	09 2e       	mov	r0, r25
 a88:	03 94       	inc	r0
 a8a:	00 0c       	add	r0, r0
 a8c:	11 f4       	brne	.+4      	; 0xa92 <__fp_round+0xc>
 a8e:	88 23       	and	r24, r24
 a90:	52 f0       	brmi	.+20     	; 0xaa6 <__fp_round+0x20>
 a92:	bb 0f       	add	r27, r27
 a94:	40 f4       	brcc	.+16     	; 0xaa6 <__fp_round+0x20>
 a96:	bf 2b       	or	r27, r31
 a98:	11 f4       	brne	.+4      	; 0xa9e <__fp_round+0x18>
 a9a:	60 ff       	sbrs	r22, 0
 a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <__fp_round+0x20>
 a9e:	6f 5f       	subi	r22, 0xFF	; 255
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	08 95       	ret

00000aa8 <__fp_split3>:
 aa8:	57 fd       	sbrc	r21, 7
 aaa:	90 58       	subi	r25, 0x80	; 128
 aac:	44 0f       	add	r20, r20
 aae:	55 1f       	adc	r21, r21
 ab0:	59 f0       	breq	.+22     	; 0xac8 <__fp_splitA+0x10>
 ab2:	5f 3f       	cpi	r21, 0xFF	; 255
 ab4:	71 f0       	breq	.+28     	; 0xad2 <__fp_splitA+0x1a>
 ab6:	47 95       	ror	r20

00000ab8 <__fp_splitA>:
 ab8:	88 0f       	add	r24, r24
 aba:	97 fb       	bst	r25, 7
 abc:	99 1f       	adc	r25, r25
 abe:	61 f0       	breq	.+24     	; 0xad8 <__fp_splitA+0x20>
 ac0:	9f 3f       	cpi	r25, 0xFF	; 255
 ac2:	79 f0       	breq	.+30     	; 0xae2 <__fp_splitA+0x2a>
 ac4:	87 95       	ror	r24
 ac6:	08 95       	ret
 ac8:	12 16       	cp	r1, r18
 aca:	13 06       	cpc	r1, r19
 acc:	14 06       	cpc	r1, r20
 ace:	55 1f       	adc	r21, r21
 ad0:	f2 cf       	rjmp	.-28     	; 0xab6 <__fp_split3+0xe>
 ad2:	46 95       	lsr	r20
 ad4:	f1 df       	rcall	.-30     	; 0xab8 <__fp_splitA>
 ad6:	08 c0       	rjmp	.+16     	; 0xae8 <__fp_splitA+0x30>
 ad8:	16 16       	cp	r1, r22
 ada:	17 06       	cpc	r1, r23
 adc:	18 06       	cpc	r1, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	f1 cf       	rjmp	.-30     	; 0xac4 <__fp_splitA+0xc>
 ae2:	86 95       	lsr	r24
 ae4:	71 05       	cpc	r23, r1
 ae6:	61 05       	cpc	r22, r1
 ae8:	08 94       	sec
 aea:	08 95       	ret

00000aec <__fp_zero>:
 aec:	e8 94       	clt

00000aee <__fp_szero>:
 aee:	bb 27       	eor	r27, r27
 af0:	66 27       	eor	r22, r22
 af2:	77 27       	eor	r23, r23
 af4:	cb 01       	movw	r24, r22
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <__mulsf3>:
 afa:	0b d0       	rcall	.+22     	; 0xb12 <__mulsf3x>
 afc:	c4 cf       	rjmp	.-120    	; 0xa86 <__fp_round>
 afe:	b5 df       	rcall	.-150    	; 0xa6a <__fp_pscA>
 b00:	28 f0       	brcs	.+10     	; 0xb0c <__mulsf3+0x12>
 b02:	ba df       	rcall	.-140    	; 0xa78 <__fp_pscB>
 b04:	18 f0       	brcs	.+6      	; 0xb0c <__mulsf3+0x12>
 b06:	95 23       	and	r25, r21
 b08:	09 f0       	breq	.+2      	; 0xb0c <__mulsf3+0x12>
 b0a:	a6 cf       	rjmp	.-180    	; 0xa58 <__fp_inf>
 b0c:	ab cf       	rjmp	.-170    	; 0xa64 <__fp_nan>
 b0e:	11 24       	eor	r1, r1
 b10:	ee cf       	rjmp	.-36     	; 0xaee <__fp_szero>

00000b12 <__mulsf3x>:
 b12:	ca df       	rcall	.-108    	; 0xaa8 <__fp_split3>
 b14:	a0 f3       	brcs	.-24     	; 0xafe <__mulsf3+0x4>

00000b16 <__mulsf3_pse>:
 b16:	95 9f       	mul	r25, r21
 b18:	d1 f3       	breq	.-12     	; 0xb0e <__mulsf3+0x14>
 b1a:	95 0f       	add	r25, r21
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	55 1f       	adc	r21, r21
 b20:	62 9f       	mul	r22, r18
 b22:	f0 01       	movw	r30, r0
 b24:	72 9f       	mul	r23, r18
 b26:	bb 27       	eor	r27, r27
 b28:	f0 0d       	add	r31, r0
 b2a:	b1 1d       	adc	r27, r1
 b2c:	63 9f       	mul	r22, r19
 b2e:	aa 27       	eor	r26, r26
 b30:	f0 0d       	add	r31, r0
 b32:	b1 1d       	adc	r27, r1
 b34:	aa 1f       	adc	r26, r26
 b36:	64 9f       	mul	r22, r20
 b38:	66 27       	eor	r22, r22
 b3a:	b0 0d       	add	r27, r0
 b3c:	a1 1d       	adc	r26, r1
 b3e:	66 1f       	adc	r22, r22
 b40:	82 9f       	mul	r24, r18
 b42:	22 27       	eor	r18, r18
 b44:	b0 0d       	add	r27, r0
 b46:	a1 1d       	adc	r26, r1
 b48:	62 1f       	adc	r22, r18
 b4a:	73 9f       	mul	r23, r19
 b4c:	b0 0d       	add	r27, r0
 b4e:	a1 1d       	adc	r26, r1
 b50:	62 1f       	adc	r22, r18
 b52:	83 9f       	mul	r24, r19
 b54:	a0 0d       	add	r26, r0
 b56:	61 1d       	adc	r22, r1
 b58:	22 1f       	adc	r18, r18
 b5a:	74 9f       	mul	r23, r20
 b5c:	33 27       	eor	r19, r19
 b5e:	a0 0d       	add	r26, r0
 b60:	61 1d       	adc	r22, r1
 b62:	23 1f       	adc	r18, r19
 b64:	84 9f       	mul	r24, r20
 b66:	60 0d       	add	r22, r0
 b68:	21 1d       	adc	r18, r1
 b6a:	82 2f       	mov	r24, r18
 b6c:	76 2f       	mov	r23, r22
 b6e:	6a 2f       	mov	r22, r26
 b70:	11 24       	eor	r1, r1
 b72:	9f 57       	subi	r25, 0x7F	; 127
 b74:	50 40       	sbci	r21, 0x00	; 0
 b76:	8a f0       	brmi	.+34     	; 0xb9a <__mulsf3_pse+0x84>
 b78:	e1 f0       	breq	.+56     	; 0xbb2 <__mulsf3_pse+0x9c>
 b7a:	88 23       	and	r24, r24
 b7c:	4a f0       	brmi	.+18     	; 0xb90 <__mulsf3_pse+0x7a>
 b7e:	ee 0f       	add	r30, r30
 b80:	ff 1f       	adc	r31, r31
 b82:	bb 1f       	adc	r27, r27
 b84:	66 1f       	adc	r22, r22
 b86:	77 1f       	adc	r23, r23
 b88:	88 1f       	adc	r24, r24
 b8a:	91 50       	subi	r25, 0x01	; 1
 b8c:	50 40       	sbci	r21, 0x00	; 0
 b8e:	a9 f7       	brne	.-22     	; 0xb7a <__mulsf3_pse+0x64>
 b90:	9e 3f       	cpi	r25, 0xFE	; 254
 b92:	51 05       	cpc	r21, r1
 b94:	70 f0       	brcs	.+28     	; 0xbb2 <__mulsf3_pse+0x9c>
 b96:	60 cf       	rjmp	.-320    	; 0xa58 <__fp_inf>
 b98:	aa cf       	rjmp	.-172    	; 0xaee <__fp_szero>
 b9a:	5f 3f       	cpi	r21, 0xFF	; 255
 b9c:	ec f3       	brlt	.-6      	; 0xb98 <__mulsf3_pse+0x82>
 b9e:	98 3e       	cpi	r25, 0xE8	; 232
 ba0:	dc f3       	brlt	.-10     	; 0xb98 <__mulsf3_pse+0x82>
 ba2:	86 95       	lsr	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	b7 95       	ror	r27
 baa:	f7 95       	ror	r31
 bac:	e7 95       	ror	r30
 bae:	9f 5f       	subi	r25, 0xFF	; 255
 bb0:	c1 f7       	brne	.-16     	; 0xba2 <__mulsf3_pse+0x8c>
 bb2:	fe 2b       	or	r31, r30
 bb4:	88 0f       	add	r24, r24
 bb6:	91 1d       	adc	r25, r1
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret

00000bc0 <__divmodhi4>:
 bc0:	97 fb       	bst	r25, 7
 bc2:	07 2e       	mov	r0, r23
 bc4:	16 f4       	brtc	.+4      	; 0xbca <__divmodhi4+0xa>
 bc6:	00 94       	com	r0
 bc8:	06 d0       	rcall	.+12     	; 0xbd6 <__divmodhi4_neg1>
 bca:	77 fd       	sbrc	r23, 7
 bcc:	08 d0       	rcall	.+16     	; 0xbde <__divmodhi4_neg2>
 bce:	13 d0       	rcall	.+38     	; 0xbf6 <__udivmodhi4>
 bd0:	07 fc       	sbrc	r0, 7
 bd2:	05 d0       	rcall	.+10     	; 0xbde <__divmodhi4_neg2>
 bd4:	3e f4       	brtc	.+14     	; 0xbe4 <__divmodhi4_exit>

00000bd6 <__divmodhi4_neg1>:
 bd6:	90 95       	com	r25
 bd8:	81 95       	neg	r24
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	08 95       	ret

00000bde <__divmodhi4_neg2>:
 bde:	70 95       	com	r23
 be0:	61 95       	neg	r22
 be2:	7f 4f       	sbci	r23, 0xFF	; 255

00000be4 <__divmodhi4_exit>:
 be4:	08 95       	ret

00000be6 <__tablejump2__>:
 be6:	ee 0f       	add	r30, r30
 be8:	ff 1f       	adc	r31, r31
 bea:	88 1f       	adc	r24, r24
 bec:	8b bf       	out	0x3b, r24	; 59
 bee:	07 90       	elpm	r0, Z+
 bf0:	f6 91       	elpm	r31, Z
 bf2:	e0 2d       	mov	r30, r0
 bf4:	19 94       	eijmp

00000bf6 <__udivmodhi4>:
 bf6:	aa 1b       	sub	r26, r26
 bf8:	bb 1b       	sub	r27, r27
 bfa:	51 e1       	ldi	r21, 0x11	; 17
 bfc:	07 c0       	rjmp	.+14     	; 0xc0c <__udivmodhi4_ep>

00000bfe <__udivmodhi4_loop>:
 bfe:	aa 1f       	adc	r26, r26
 c00:	bb 1f       	adc	r27, r27
 c02:	a6 17       	cp	r26, r22
 c04:	b7 07       	cpc	r27, r23
 c06:	10 f0       	brcs	.+4      	; 0xc0c <__udivmodhi4_ep>
 c08:	a6 1b       	sub	r26, r22
 c0a:	b7 0b       	sbc	r27, r23

00000c0c <__udivmodhi4_ep>:
 c0c:	88 1f       	adc	r24, r24
 c0e:	99 1f       	adc	r25, r25
 c10:	5a 95       	dec	r21
 c12:	a9 f7       	brne	.-22     	; 0xbfe <__udivmodhi4_loop>
 c14:	80 95       	com	r24
 c16:	90 95       	com	r25
 c18:	bc 01       	movw	r22, r24
 c1a:	cd 01       	movw	r24, r26
 c1c:	08 95       	ret

00000c1e <_exit>:
 c1e:	f8 94       	cli

00000c20 <__stop_program>:
 c20:	ff cf       	rjmp	.-2      	; 0xc20 <__stop_program>
