
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000657  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023e  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000361  00000000  00000000  00000c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000210  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000348  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_16>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  64:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcdenable>:
#define rs 0
#define rw 1
#define en 2
void lcdenable()
{
	PORTD |= 1<<en;
  6c:	92 9a       	sbi	0x12, 2	; 18
	asm volatile ("nop");
  6e:	00 00       	nop
	asm volatile ("nop");
  70:	00 00       	nop
	PORTD &= ~(1<<en);
  72:	92 98       	cbi	0x12, 2	; 18
  74:	08 95       	ret

00000076 <lcdcheck>:
}
void lcdcheck()
{
	DDRB = 0x00;
  76:	17 ba       	out	0x17, r1	; 23
	PORTD |= 1<<rw;
  78:	91 9a       	sbi	0x12, 1	; 18
	PORTD &= ~(1<<rs);
  7a:	90 98       	cbi	0x12, 0	; 18
	while(PORTC >= 0x80)
  7c:	af 9b       	sbis	0x15, 7	; 21
  7e:	04 c0       	rjmp	.+8      	; 0x88 <lcdcheck+0x12>
	{
		lcdenable();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <lcdenable>
void lcdcheck()
{
	DDRB = 0x00;
	PORTD |= 1<<rw;
	PORTD &= ~(1<<rs);
	while(PORTC >= 0x80)
  84:	af 99       	sbic	0x15, 7	; 21
  86:	fc cf       	rjmp	.-8      	; 0x80 <lcdcheck+0xa>
	{
		lcdenable();
	}
	DDRB = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	08 95       	ret

0000008e <lcdcommand>:
}
void lcdcommand(unsigned char comd)
{
  8e:	cf 93       	push	r28
  90:	c8 2f       	mov	r28, r24
	lcdcheck();
  92:	0e 94 3b 00 	call	0x76	; 0x76 <lcdcheck>
	PORTD &= ~(1 << rs);
  96:	90 98       	cbi	0x12, 0	; 18
	PORTD &= ~(1<< rw);
  98:	91 98       	cbi	0x12, 1	; 18
	PORTB = comd & 0xF0;
  9a:	8c 2f       	mov	r24, r28
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	88 bb       	out	0x18, r24	; 24
	lcdenable();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	81 e2       	ldi	r24, 0x21	; 33
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcdcommand+0x18>
  aa:	00 00       	nop
	_delay_us(100);
	PORTB = comd <<4;
  ac:	c2 95       	swap	r28
  ae:	c0 7f       	andi	r28, 0xF0	; 240
  b0:	c8 bb       	out	0x18, r28	; 24
	lcdenable();
  b2:	0e 94 36 00 	call	0x6c	; 0x6c <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	83 ec       	ldi	r24, 0xC3	; 195
  b8:	99 e0       	ldi	r25, 0x09	; 9
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcdcommand+0x2c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcdcommand+0x32>
  c0:	00 00       	nop
	_delay_ms(10);
	PORTB = 0;
  c2:	18 ba       	out	0x18, r1	; 24
}
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcddata>:
void lcddata(unsigned char dat)
{
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
	lcdcheck();
  cc:	0e 94 3b 00 	call	0x76	; 0x76 <lcdcheck>
	PORTD &= ~(1<< rw);
  d0:	91 98       	cbi	0x12, 1	; 18
	PORTD |= 1 << rs;
  d2:	90 9a       	sbi	0x12, 0	; 18
	PORTB = dat & 0xF0;
  d4:	8c 2f       	mov	r24, r28
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	88 bb       	out	0x18, r24	; 24
	lcdenable();
  da:	0e 94 36 00 	call	0x6c	; 0x6c <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	81 e2       	ldi	r24, 0x21	; 33
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcddata+0x18>
  e4:	00 00       	nop
	_delay_us(100);
	PORTB = dat<<4;
  e6:	c2 95       	swap	r28
  e8:	c0 7f       	andi	r28, 0xF0	; 240
  ea:	c8 bb       	out	0x18, r28	; 24
	lcdenable();
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	83 ec       	ldi	r24, 0xC3	; 195
  f2:	99 e0       	ldi	r25, 0x09	; 9
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcddata+0x2c>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcddata+0x32>
  fa:	00 00       	nop
	_delay_ms(10);
	PORTB = 0;
  fc:	18 ba       	out	0x18, r1	; 24
}
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <lcdinitialise>:
void lcdinitialise()
{
	DDRD |= 1<<rs |1<<rw |1<<en ;
 102:	81 b3       	in	r24, 0x11	; 17
 104:	87 60       	ori	r24, 0x07	; 7
 106:	81 bb       	out	0x11, r24	; 17
 108:	85 ea       	ldi	r24, 0xA5	; 165
 10a:	9e e0       	ldi	r25, 0x0E	; 14
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcdinitialise+0xa>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcdinitialise+0x10>
 112:	00 00       	nop
	_delay_ms(15);
	lcdcommand(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 47 00 	call	0x8e	; 0x8e <lcdcommand>
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcdinitialise+0x1c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcdinitialise+0x22>
 124:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x33);
 126:	83 e3       	ldi	r24, 0x33	; 51
 128:	0e 94 47 00 	call	0x8e	; 0x8e <lcdcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	90 e1       	ldi	r25, 0x10	; 16
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <lcdinitialise+0x2c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcdinitialise+0x32>
	_delay_us(50);
	lcdcommand(0x32);
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	0e 94 47 00 	call	0x8e	; 0x8e <lcdcommand>
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdinitialise+0x3a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdinitialise+0x40>
	_delay_us(50);
	lcdcommand(0x28);
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	0e 94 47 00 	call	0x8e	; 0x8e <lcdcommand>
 148:	90 e1       	ldi	r25, 0x10	; 16
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcdinitialise+0x48>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcdinitialise+0x4e>
	_delay_us(50);
	lcdcommand(0x0E);
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	0e 94 47 00 	call	0x8e	; 0x8e <lcdcommand>
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcdinitialise+0x56>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcdinitialise+0x5c>
 15e:	08 95       	ret

00000160 <lcdprint>:
	_delay_us(50);
}
void lcdprint(char *string)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(string[i] != 0)
 168:	80 81       	ld	r24, Z
 16a:	88 23       	and	r24, r24
 16c:	59 f0       	breq	.+22     	; 0x184 <lcdprint+0x24>
 16e:	8f 01       	movw	r16, r30
 170:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcddata(string[i]);
 172:	0e 94 64 00 	call	0xc8	; 0xc8 <lcddata>
		i++;
 176:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_us(50);
}
void lcdprint(char *string)
{
	unsigned char i=0;
	while(string[i] != 0)
 178:	f8 01       	movw	r30, r16
 17a:	ec 0f       	add	r30, r28
 17c:	f1 1d       	adc	r31, r1
 17e:	80 81       	ld	r24, Z
 180:	81 11       	cpse	r24, r1
 182:	f7 cf       	rjmp	.-18     	; 0x172 <lcdprint+0x12>
	{
		lcddata(string[i]);
		i++;
	}
}
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <main>:
int main(void)
{	
	lcdinitialise();
 18c:	0e 94 81 00 	call	0x102	; 0x102 <lcdinitialise>
	DDRD = 0xFF;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 194:	87 bb       	out	0x17, r24	; 23
	sei();
 196:	78 94       	sei
	ADMUX |= 1<<ADLAR;
 198:	3d 9a       	sbi	0x07, 5	; 7
	ADMUX |= 1<<REFS0;
 19a:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= 1<<ADIE;
 19c:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= 1<<ADEN;
 19e:	37 9a       	sbi	0x06, 7	; 6
//	ADCSRA |= 0b00000011;
	ADMUX |= 1<<MUX0;
 1a0:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= 1<< ADSC;
 1a2:	36 9a       	sbi	0x06, 6	; 6
    while (1) 
    {
    }
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x18>

000001a6 <__vector_16>:
	return 0;
}
ISR (ADC_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <__vector_16+0x28>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <__vector_16+0x2a>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	lcdcommand(0x01);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 47 00 	call	0x8e	; 0x8e <lcdcommand>
	char result[4];
	itoa(ADCH, result,10);
 1da:	85 b1       	in	r24, 0x05	; 5
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1dc:	4a e0       	ldi	r20, 0x0A	; 10
 1de:	be 01       	movw	r22, r28
 1e0:	6f 5f       	subi	r22, 0xFF	; 255
 1e2:	7f 4f       	sbci	r23, 0xFF	; 255
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 17 01 	call	0x22e	; 0x22e <__itoa_ncheck>
	lcdprint(result);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 b0 00 	call	0x160	; 0x160 <lcdprint>
	ADCSRA |=1<<ADSC;
 1f2:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	8f e4       	ldi	r24, 0x4F	; 79
 1f6:	93 ec       	ldi	r25, 0xC3	; 195
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <__vector_16+0x52>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <__vector_16+0x58>
 1fe:	00 00       	nop
	_delay_ms(200);
	
}
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__itoa_ncheck>:
 22e:	bb 27       	eor	r27, r27
 230:	4a 30       	cpi	r20, 0x0A	; 10
 232:	31 f4       	brne	.+12     	; 0x240 <__itoa_ncheck+0x12>
 234:	99 23       	and	r25, r25
 236:	22 f4       	brpl	.+8      	; 0x240 <__itoa_ncheck+0x12>
 238:	bd e2       	ldi	r27, 0x2D	; 45
 23a:	90 95       	com	r25
 23c:	81 95       	neg	r24
 23e:	9f 4f       	sbci	r25, 0xFF	; 255
 240:	0c 94 23 01 	jmp	0x246	; 0x246 <__utoa_common>

00000244 <__utoa_ncheck>:
 244:	bb 27       	eor	r27, r27

00000246 <__utoa_common>:
 246:	fb 01       	movw	r30, r22
 248:	55 27       	eor	r21, r21
 24a:	aa 27       	eor	r26, r26
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	aa 1f       	adc	r26, r26
 252:	a4 17       	cp	r26, r20
 254:	10 f0       	brcs	.+4      	; 0x25a <__utoa_common+0x14>
 256:	a4 1b       	sub	r26, r20
 258:	83 95       	inc	r24
 25a:	50 51       	subi	r21, 0x10	; 16
 25c:	b9 f7       	brne	.-18     	; 0x24c <__utoa_common+0x6>
 25e:	a0 5d       	subi	r26, 0xD0	; 208
 260:	aa 33       	cpi	r26, 0x3A	; 58
 262:	08 f0       	brcs	.+2      	; 0x266 <__utoa_common+0x20>
 264:	a9 5d       	subi	r26, 0xD9	; 217
 266:	a1 93       	st	Z+, r26
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	79 f7       	brne	.-34     	; 0x24a <__utoa_common+0x4>
 26c:	b1 11       	cpse	r27, r1
 26e:	b1 93       	st	Z+, r27
 270:	11 92       	st	Z+, r1
 272:	cb 01       	movw	r24, r22
 274:	0c 94 3c 01 	jmp	0x278	; 0x278 <strrev>

00000278 <strrev>:
 278:	dc 01       	movw	r26, r24
 27a:	fc 01       	movw	r30, r24
 27c:	67 2f       	mov	r22, r23
 27e:	71 91       	ld	r23, Z+
 280:	77 23       	and	r23, r23
 282:	e1 f7       	brne	.-8      	; 0x27c <strrev+0x4>
 284:	32 97       	sbiw	r30, 0x02	; 2
 286:	04 c0       	rjmp	.+8      	; 0x290 <strrev+0x18>
 288:	7c 91       	ld	r23, X
 28a:	6d 93       	st	X+, r22
 28c:	70 83       	st	Z, r23
 28e:	62 91       	ld	r22, -Z
 290:	ae 17       	cp	r26, r30
 292:	bf 07       	cpc	r27, r31
 294:	c8 f3       	brcs	.-14     	; 0x288 <strrev+0x10>
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
