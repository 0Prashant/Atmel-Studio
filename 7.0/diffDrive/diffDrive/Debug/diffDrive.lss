
diffDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800060  00800060  00000848  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fac  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000675  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dc  00000000  00000000  000033e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003ac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	27 c2       	rjmp	.+1102   	; 0x484 <__vector_13>
  36:	00 00       	nop
  38:	4e c2       	rjmp	.+1180   	; 0x4d6 <__vector_14>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	15 01       	movw	r2, r10
  56:	1a 01       	movw	r2, r20
  58:	21 01       	movw	r4, r2
  5a:	28 01       	movw	r4, r16
  5c:	2f 01       	movw	r4, r30
  5e:	36 01       	movw	r6, r12
  60:	3d 01       	movw	r6, r26
  62:	44 01       	movw	r8, r8
  64:	4b 01       	movw	r8, r22
  66:	52 01       	movw	r10, r4
  68:	5f 01       	movw	r10, r30
  6a:	5f 01       	movw	r10, r30
  6c:	5f 01       	movw	r10, r30
  6e:	5f 01       	movw	r10, r30
  70:	5f 01       	movw	r10, r30
  72:	5f 01       	movw	r10, r30
  74:	5f 01       	movw	r10, r30
  76:	5f 01       	movw	r10, r30
  78:	ac 00       	.word	0x00ac	; ????
  7a:	5f 01       	movw	r10, r30
  7c:	5f 01       	movw	r10, r30
  7e:	5f 01       	movw	r10, r30
  80:	b9 00       	.word	0x00b9	; ????
  82:	c9 00       	.word	0x00c9	; ????
  84:	5f 01       	movw	r10, r30
  86:	da 00       	.word	0x00da	; ????
  88:	5f 01       	movw	r10, r30
  8a:	5f 01       	movw	r10, r30
  8c:	f0 00       	.word	0x00f0	; ????
  8e:	5f 01       	movw	r10, r30
  90:	5f 01       	movw	r10, r30
  92:	5f 01       	movw	r10, r30
  94:	5f 01       	movw	r10, r30
  96:	5f 01       	movw	r10, r30
  98:	00 01       	movw	r0, r0
  9a:	e7 00       	.word	0x00e7	; ????
  9c:	5f 01       	movw	r10, r30
  9e:	5f 01       	movw	r10, r30
  a0:	0d 01       	movw	r0, r26
  a2:	5f 01       	movw	r10, r30
  a4:	11 01       	movw	r2, r2
  a6:	5f 01       	movw	r10, r30
  a8:	5f 01       	movw	r10, r30
  aa:	5f 01       	movw	r10, r30
  ac:	5f 01       	movw	r10, r30
  ae:	5f 01       	movw	r10, r30
  b0:	5f 01       	movw	r10, r30
  b2:	5f 01       	movw	r10, r30
  b4:	5f 01       	movw	r10, r30
  b6:	5f 01       	movw	r10, r30
  b8:	5f 01       	movw	r10, r30
  ba:	5f 01       	movw	r10, r30
  bc:	5f 01       	movw	r10, r30
  be:	5f 01       	movw	r10, r30
  c0:	5f 01       	movw	r10, r30
  c2:	5f 01       	movw	r10, r30
  c4:	5f 01       	movw	r10, r30
  c6:	5f 01       	movw	r10, r30
  c8:	5f 01       	movw	r10, r30
  ca:	5f 01       	movw	r10, r30
  cc:	5f 01       	movw	r10, r30
  ce:	5f 01       	movw	r10, r30
  d0:	5f 01       	movw	r10, r30
  d2:	5f 01       	movw	r10, r30
  d4:	5f 01       	movw	r10, r30
  d6:	59 01       	movw	r10, r18
  d8:	5f 01       	movw	r10, r30
  da:	5f 01       	movw	r10, r30
  dc:	5f 01       	movw	r10, r30
  de:	5f 01       	movw	r10, r30
  e0:	0f 01       	movw	r0, r30
  e2:	5f 01       	movw	r10, r30
  e4:	13 01       	movw	r2, r6

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf e5       	ldi	r28, 0x5F	; 95
  ec:	d8 e0       	ldi	r29, 0x08	; 8
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_clear_bss>:
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	a0 e6       	ldi	r26, 0x60	; 96
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a1 3b       	cpi	r26, 0xB1	; 177
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	39 d1       	rcall	.+626    	; 0x376 <main>
 104:	65 c3       	rjmp	.+1738   	; 0x7d0 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <_Z7initAllv>:
int Yaw;
int V1,V2;
Motor M1,M2;

void initAll(){
	 M1.Initialise(1);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	81 e6       	ldi	r24, 0x61	; 97
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac d1       	rcall	.+856    	; 0x468 <_ZN5Motor10InitialiseEh>
	 M2.Initialise(2);
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	a8 d1       	rcall	.+848    	; 0x468 <_ZN5Motor10InitialiseEh>

	 robotVelocity = 100;
 118:	84 e6       	ldi	r24, 0x64	; 100
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 120:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
	 VelX = 0;
 124:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 128:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
	 Yaw = 0;
 12c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 130:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
	OUTPUT(Pneumetic1) ;
 134:	d1 9a       	sbi	0x1a, 1	; 26
	OUTPUT(Pneumetic2) ;
 136:	d2 9a       	sbi	0x1a, 2	; 26
	 uart0_init(UART_BAUD_SELECT(9600,F_CPU));
 138:	87 e6       	ldi	r24, 0x67	; 103
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	f1 d1       	rcall	.+994    	; 0x520 <_Z10uart0_initj>
	 sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <_Z23recieveControlCharacterv>:

}

void recieveControlCharacter(){
	char data = uart0_getc();
 142:	03 d2       	rcall	.+1030   	; 0x54a <_Z10uart0_getcv>
 144:	fc 01       	movw	r30, r24
 146:	ff 27       	eor	r31, r31

	switch(data){
 148:	f0 97       	sbiw	r30, 0x30	; 48
 14a:	e9 34       	cpi	r30, 0x49	; 73
 14c:	f1 05       	cpc	r31, r1
 14e:	08 f0       	brcs	.+2      	; 0x152 <_Z23recieveControlCharacterv+0x10>
 150:	b6 c0       	rjmp	.+364    	; 0x2be <_Z23recieveControlCharacterv+0x17c>
 152:	e6 5d       	subi	r30, 0xD6	; 214
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	36 c3       	rjmp	.+1644   	; 0x7c4 <__tablejump2__>
		case 'B':{
			VelX = robotVelocity;
 158:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 15c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 160:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 164:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			Yaw = 0;
 168:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 16c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			break;
 170:	08 95       	ret
		}

		case 'F':{
			VelX = -robotVelocity;
 172:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 176:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 17a:	91 95       	neg	r25
 17c:	81 95       	neg	r24
 17e:	91 09       	sbc	r25, r1
 180:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 184:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			Yaw = 0;
 188:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 18c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			break;
 190:	08 95       	ret
		}
		case 'G':{
			Yaw = -robotVelocity;
 192:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 196:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 19a:	22 27       	eor	r18, r18
 19c:	33 27       	eor	r19, r19
 19e:	28 1b       	sub	r18, r24
 1a0:	39 0b       	sbc	r19, r25
 1a2:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <Yaw+0x1>
 1a6:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Yaw>
			VelX = robotVelocity;
 1aa:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 1ae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			break;
 1b2:	08 95       	ret
		}
		case 'I':{
			 Yaw = robotVelocity;
 1b4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 1b8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 1bc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 1c0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			 VelX = robotVelocity;
 1c4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <VelX+0x1>
 1c8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <VelX>
			 break;
 1cc:	08 95       	ret
		}
		case 'S':{
			Yaw = 0;
 1ce:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Yaw+0x1>
 1d2:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Yaw>
			VelX = 0;
 1d6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 1da:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			break;
 1de:	08 95       	ret
		}
		case 'L':{
			Yaw =-robotVelocity;
 1e0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 1e4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 1e8:	91 95       	neg	r25
 1ea:	81 95       	neg	r24
 1ec:	91 09       	sbc	r25, r1
 1ee:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 1f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			VelX =0;
 1f6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 1fa:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			break;
 1fe:	08 95       	ret
			//break;
		}


		case 'R':{
			Yaw = robotVelocity;
 200:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <robotVelocity>
 204:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <robotVelocity+0x1>
 208:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Yaw+0x1>
 20c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Yaw>
			VelX= 0;
 210:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <VelX+0x1>
 214:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <VelX>
			break;
 218:	08 95       	ret
			//CLEAR(Pneumetic);
			//break;
		}
		case 'V':
		{	SET(Pneumetic1);
 21a:	d9 9a       	sbi	0x1b, 1	; 27
			break;
 21c:	08 95       	ret
		}
		case 'v':
		{
			CLEAR(Pneumetic1);
 21e:	d9 98       	cbi	0x1b, 1	; 27
			break;
 220:	08 95       	ret
		}
		case 'X':
		{	SET(Pneumetic2);
 222:	da 9a       	sbi	0x1b, 2	; 27
			break;
 224:	08 95       	ret
		}
		case 'x':
		{
			CLEAR(Pneumetic2);
 226:	da 98       	cbi	0x1b, 2	; 27
			break;
 228:	08 95       	ret
		}

		case '0':{
			robotVelocity = 0;
 22a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <robotVelocity+0x1>
 22e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <robotVelocity>
			break;
 232:	08 95       	ret
		}
		case '1':{
			robotVelocity = 50;
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 23c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 240:	08 95       	ret
		}



		case '2':{
			robotVelocity = 100;
 242:	84 e6       	ldi	r24, 0x64	; 100
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 24a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 24e:	08 95       	ret
		}

		case '3':{
			robotVelocity = 150;
 250:	86 e9       	ldi	r24, 0x96	; 150
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 258:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 25c:	08 95       	ret
		}

		case '4':{
			robotVelocity = 200;
 25e:	88 ec       	ldi	r24, 0xC8	; 200
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 266:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 26a:	08 95       	ret
		}
		case '5':{
			robotVelocity = 250;
 26c:	8a ef       	ldi	r24, 0xFA	; 250
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 274:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 278:	08 95       	ret
		}
		case '6':{
			robotVelocity = 300;
 27a:	8c e2       	ldi	r24, 0x2C	; 44
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 282:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 286:	08 95       	ret
		}
		case '7':{
			robotVelocity = 350;
 288:	8e e5       	ldi	r24, 0x5E	; 94
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 290:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 294:	08 95       	ret
		}
		case '8':{
			robotVelocity = 400;
 296:	80 e9       	ldi	r24, 0x90	; 144
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 29e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 2a2:	08 95       	ret
		}
		case '9':{
			robotVelocity = 400;
 2a4:	80 e9       	ldi	r24, 0x90	; 144
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 2ac:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
			break;
 2b0:	08 95       	ret
		}
		case 'q':{
			robotVelocity = 400;
 2b2:	80 e9       	ldi	r24, 0x90	; 144
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <robotVelocity+0x1>
 2ba:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <robotVelocity>
 2be:	08 95       	ret

000002c0 <_Z14updateVelocityv>:



}

void updateVelocity(){
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29

	    V1 = 0.5*(VelX+Yaw);
 2cc:	c0 91 68 00 	lds	r28, 0x0068	; 0x800068 <VelX>
 2d0:	d0 91 69 00 	lds	r29, 0x0069	; 0x800069 <VelX+0x1>
 2d4:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <Yaw>
 2d8:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <Yaw+0x1>
 2dc:	be 01       	movw	r22, r28
 2de:	6e 0d       	add	r22, r14
 2e0:	7f 1d       	adc	r23, r15
 2e2:	07 2e       	mov	r0, r23
 2e4:	00 0c       	add	r0, r0
 2e6:	88 0b       	sbc	r24, r24
 2e8:	99 0b       	sbc	r25, r25
 2ea:	7d d1       	rcall	.+762    	; 0x5e6 <__floatsisf>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	5f e3       	ldi	r21, 0x3F	; 63
 2f4:	dc d1       	rcall	.+952    	; 0x6ae <__mulsf3>
 2f6:	44 d1       	rcall	.+648    	; 0x580 <__fixsfsi>
 2f8:	8b 01       	movw	r16, r22
 2fa:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <V1+0x1>
 2fe:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <V1>
	    V2 = 0.5*(VelX-Yaw);
 302:	be 01       	movw	r22, r28
 304:	6e 19       	sub	r22, r14
 306:	7f 09       	sbc	r23, r15
 308:	07 2e       	mov	r0, r23
 30a:	00 0c       	add	r0, r0
 30c:	88 0b       	sbc	r24, r24
 30e:	99 0b       	sbc	r25, r25
 310:	6a d1       	rcall	.+724    	; 0x5e6 <__floatsisf>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	5f e3       	ldi	r21, 0x3F	; 63
 31a:	c9 d1       	rcall	.+914    	; 0x6ae <__mulsf3>
 31c:	31 d1       	rcall	.+610    	; 0x580 <__fixsfsi>
 31e:	9b 01       	movw	r18, r22
 320:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <V2+0x1>
 324:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <V2>
		if(V1 > 200)	V1 = 200;
 328:	09 3c       	cpi	r16, 0xC9	; 201
 32a:	11 05       	cpc	r17, r1
 32c:	34 f0       	brlt	.+12     	; 0x33a <_Z14updateVelocityv+0x7a>
 32e:	88 ec       	ldi	r24, 0xC8	; 200
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <V1+0x1>
 336:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <V1>
		if(V2 > 200)	V2 = 200;
 33a:	29 3c       	cpi	r18, 0xC9	; 201
 33c:	31 05       	cpc	r19, r1
 33e:	34 f0       	brlt	.+12     	; 0x34c <_Z14updateVelocityv+0x8c>
 340:	88 ec       	ldi	r24, 0xC8	; 200
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <V2+0x1>
 348:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <V2>
	    M1.SetOcrValue(V1);
 34c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <V1>
 350:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <V1+0x1>
 354:	81 e6       	ldi	r24, 0x61	; 97
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	5f d0       	rcall	.+190    	; 0x418 <_ZN5Motor11SetOcrValueEi>
	    M2.SetOcrValue(V2);
 35a:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <V2>
 35e:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <V2+0x1>
 362:	80 e6       	ldi	r24, 0x60	; 96
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	58 d0       	rcall	.+176    	; 0x418 <_ZN5Motor11SetOcrValueEi>

}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <main>:


int main(void)
{
      initAll();
 376:	c8 de       	rcall	.-624    	; 0x108 <_Z7initAllv>


    while (1)
    {

	 recieveControlCharacter();
 378:	e4 de       	rcall	.-568    	; 0x142 <_Z23recieveControlCharacterv>
	 updateVelocity();
 37a:	a2 df       	rcall	.-188    	; 0x2c0 <_Z14updateVelocityv>
	    M2.SetOcrValue(V2);

}


int main(void)
 37c:	fd cf       	rjmp	.-6      	; 0x378 <main+0x2>

0000037e <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
 37e:	fc 01       	movw	r30, r24
 380:	80 81       	ld	r24, Z
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	71 f4       	brne	.+28     	; 0x3a2 <_ZN5Motor7InitPWMEv+0x24>
	{
		OUTPUT(PIN_F1);
 386:	8f 9a       	sbi	0x11, 7	; 17
		OUTPUT(PIN_B1);
 388:	8e 9a       	sbi	0x11, 6	; 17

		OUTPUT(PIN_PWM1);
 38a:	8c 9a       	sbi	0x11, 4	; 17

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
 38c:	8f b5       	in	r24, 0x2f	; 47
 38e:	82 68       	ori	r24, 0x82	; 130
 390:	8f bd       	out	0x2f, r24	; 47
		PWM_TCCRB1	|= (1<<PWM_1WGM2) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
 392:	8e b5       	in	r24, 0x2e	; 46
 394:	8a 61       	ori	r24, 0x1A	; 26
 396:	8e bd       	out	0x2e, r24	; 46
		PWM_ICR1		 =         ICR_TOP;
 398:	89 ef       	ldi	r24, 0xF9	; 249
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	97 bd       	out	0x27, r25	; 39
 39e:	86 bd       	out	0x26, r24	; 38
 3a0:	08 95       	ret
	}
	else if(num == 2)
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	69 f4       	brne	.+26     	; 0x3c0 <_ZN5Motor7InitPWMEv+0x42>
	{
		OUTPUT(PIN_F2);
 3a6:	d6 9a       	sbi	0x1a, 6	; 26
		OUTPUT(PIN_B2);
 3a8:	d7 9a       	sbi	0x1a, 7	; 26

		OUTPUT(PIN_PWM2);
 3aa:	8d 9a       	sbi	0x11, 5	; 17

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
 3ac:	8f b5       	in	r24, 0x2f	; 47
 3ae:	82 62       	ori	r24, 0x22	; 34
 3b0:	8f bd       	out	0x2f, r24	; 47
		PWM_TCCRB2	|=  (1<<PWM_2WGM2) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
 3b2:	8e b5       	in	r24, 0x2e	; 46
 3b4:	8a 61       	ori	r24, 0x1A	; 26
 3b6:	8e bd       	out	0x2e, r24	; 46
		PWM_ICR2		 =         ICR_TOP;
 3b8:	89 ef       	ldi	r24, 0xF9	; 249
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	97 bd       	out	0x27, r25	; 39
 3be:	86 bd       	out	0x26, r24	; 38
 3c0:	08 95       	ret

000003c2 <_ZN5Motor19setForwardDirectionEv>:

}

void Motor::setForwardDirection()
{
	switch(num)
 3c2:	fc 01       	movw	r30, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <_ZN5Motor19setForwardDirectionEv+0xe>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <_ZN5Motor19setForwardDirectionEv+0x14>
 3ce:	08 95       	ret
	{
		case 1:
			SET	(PIN_F1);
 3d0:	97 9a       	sbi	0x12, 7	; 18
			CLEAR	(PIN_B1);
 3d2:	96 98       	cbi	0x12, 6	; 18
			break;
 3d4:	08 95       	ret
		case 2:
			SET	(PIN_F2);
 3d6:	de 9a       	sbi	0x1b, 6	; 27
			CLEAR	(PIN_B2);
 3d8:	df 98       	cbi	0x1b, 7	; 27
 3da:	08 95       	ret

000003dc <_ZN5Motor19setReverseDirectionEv>:


}
void Motor::setReverseDirection()
{
	switch(num)
 3dc:	fc 01       	movw	r30, r24
 3de:	80 81       	ld	r24, Z
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	19 f0       	breq	.+6      	; 0x3ea <_ZN5Motor19setReverseDirectionEv+0xe>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	21 f0       	breq	.+8      	; 0x3f0 <_ZN5Motor19setReverseDirectionEv+0x14>
 3e8:	08 95       	ret
	{
		case 1:
			CLEAR	(PIN_F1);
 3ea:	97 98       	cbi	0x12, 7	; 18
			SET	(PIN_B1);
 3ec:	96 9a       	sbi	0x12, 6	; 18
			break;
 3ee:	08 95       	ret
		case 2:
			CLEAR	(PIN_F2);
 3f0:	de 98       	cbi	0x1b, 6	; 27
			SET	(PIN_B2);
 3f2:	df 9a       	sbi	0x1b, 7	; 27
 3f4:	08 95       	ret

000003f6 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
 3f6:	fc 01       	movw	r30, r24
 3f8:	80 81       	ld	r24, Z
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	19 f0       	breq	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	31 f0       	breq	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 402:	08 95       	ret
	{
		case 1:
			PWM_OCR1 = 0;
 404:	1b bc       	out	0x2b, r1	; 43
 406:	1a bc       	out	0x2a, r1	; 42
			SET	(PIN_F1);
 408:	97 9a       	sbi	0x12, 7	; 18
			SET	(PIN_B1);
 40a:	96 9a       	sbi	0x12, 6	; 18
			break;
 40c:	08 95       	ret

		case 2:
			PWM_OCR2 = 0;
 40e:	19 bc       	out	0x29, r1	; 41
 410:	18 bc       	out	0x28, r1	; 40
			SET	(PIN_F2);
 412:	de 9a       	sbi	0x1b, 6	; 27
			SET	(PIN_B2);
 414:	df 9a       	sbi	0x1b, 7	; 27
 416:	08 95       	ret

00000418 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	8c 01       	movw	r16, r24
 422:	eb 01       	movw	r28, r22
    if (Ocr > 0)
 424:	1c 16       	cp	r1, r28
 426:	1d 06       	cpc	r1, r29
 428:	0c f4       	brge	.+2      	; 0x42c <_ZN5Motor11SetOcrValueEi+0x14>
        setForwardDirection();
 42a:	cb df       	rcall	.-106    	; 0x3c2 <_ZN5Motor19setForwardDirectionEv>

	if( Ocr >= MAX_VALUE){
 42c:	c9 3f       	cpi	r28, 0xF9	; 249
 42e:	d1 05       	cpc	r29, r1
 430:	44 f4       	brge	.+16     	; 0x442 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	}

	if( Ocr < 0){
 432:	dd 23       	and	r29, r29
 434:	44 f4       	brge	.+16     	; 0x446 <_ZN5Motor11SetOcrValueEi+0x2e>
		Ocr = -Ocr;
 436:	d1 95       	neg	r29
 438:	c1 95       	neg	r28
 43a:	d1 09       	sbc	r29, r1
		setReverseDirection();
 43c:	c8 01       	movw	r24, r16
 43e:	ce df       	rcall	.-100    	; 0x3dc <_ZN5Motor19setReverseDirectionEv>
 440:	02 c0       	rjmp	.+4      	; 0x446 <_ZN5Motor11SetOcrValueEi+0x2e>
{
    if (Ocr > 0)
        setForwardDirection();

	if( Ocr >= MAX_VALUE){
		Ocr = MAX_VALUE;
 442:	c9 ef       	ldi	r28, 0xF9	; 249
 444:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0){
		Ocr = -Ocr;
		setReverseDirection();
	}

	switch(num)
 446:	f8 01       	movw	r30, r16
 448:	80 81       	ld	r24, Z
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	19 f0       	breq	.+6      	; 0x454 <_ZN5Motor11SetOcrValueEi+0x3c>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	21 f0       	breq	.+8      	; 0x45a <_ZN5Motor11SetOcrValueEi+0x42>
 452:	05 c0       	rjmp	.+10     	; 0x45e <_ZN5Motor11SetOcrValueEi+0x46>
	{
		case 1:
			PWM_OCR1	= Ocr;
 454:	db bd       	out	0x2b, r29	; 43
 456:	ca bd       	out	0x2a, r28	; 42
			break;
 458:	02 c0       	rjmp	.+4      	; 0x45e <_ZN5Motor11SetOcrValueEi+0x46>
		case 2:
			PWM_OCR2	= Ocr;
 45a:	d9 bd       	out	0x29, r29	; 41
 45c:	c8 bd       	out	0x28, r28	; 40
			break;

	}
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	08 95       	ret

00000468 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
	num = no;
 46e:	68 83       	st	Y, r22
	InitPWM();
 470:	86 df       	rcall	.-244    	; 0x37e <_ZN5Motor7InitPWMEv>

	StopMotor();
 472:	ce 01       	movw	r24, r28
 474:	c0 df       	rcall	.-128    	; 0x3f6 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	ce 01       	movw	r24, r28
 47c:	cd df       	rcall	.-102    	; 0x418 <_ZN5Motor11SetOcrValueEi>

}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART0_STATUS;
 498:	8b b1       	in	r24, 0x0b	; 11
	data = UART0_DATA;
 49a:	2c b1       	in	r18, 0x0c	; 12

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
 49c:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#endif

	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;
 49e:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <_ZL12UART0_RxHead>
 4a2:	ef 5f       	subi	r30, 0xFF	; 255
 4a4:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART0_RxTail) {
 4a6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 4aa:	e9 17       	cp	r30, r25
 4ac:	39 f0       	breq	.+14     	; 0x4bc <__vector_13+0x38>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART0_RxHead = tmphead;
 4ae:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <_ZL12UART0_RxHead>
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ef 58       	subi	r30, 0x8F	; 143
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	20 83       	st	Z, r18
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <__vector_13+0x3a>
	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART0_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 4bc:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART0_RxHead = tmphead;
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
	}
	UART0_LastRxError = lastRxError;
 4be:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <_ZL17UART0_LastRxError>
}
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	2f 91       	pop	r18
 4cc:	0f 90       	pop	r0
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART0_TxHead != UART0_TxTail) {
 4e8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <_ZL12UART0_TxHead>
 4ec:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <_ZL12UART0_TxTail>
 4f0:	98 17       	cp	r25, r24
 4f2:	61 f0       	breq	.+24     	; 0x50c <__vector_14+0x36>
		/* calculate and store new buffer index */
		tmptail = (UART0_TxTail + 1) & UART_TX_BUFFER_MASK;
 4f4:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <_ZL12UART0_TxTail>
 4f8:	ef 5f       	subi	r30, 0xFF	; 255
 4fa:	ef 71       	andi	r30, 0x1F	; 31
		UART0_TxTail = tmptail;
 4fc:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <_ZL12UART0_TxTail>
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART0_TxBuf[tmptail];  /* start transmission */
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	ef 56       	subi	r30, 0x6F	; 111
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	80 81       	ld	r24, Z
 508:	8c b9       	out	0x0c, r24	; 12
 50a:	01 c0       	rjmp	.+2      	; 0x50e <__vector_14+0x38>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
 50c:	55 98       	cbi	0x0a, 5	; 10
	}
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <_Z10uart0_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(unsigned int baudrate)
{
	sei();
 520:	78 94       	sei
	
	UART0_TxHead = 0;
 522:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <_ZL12UART0_TxHead>
	UART0_TxTail = 0;
 526:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <_ZL12UART0_TxTail>
	UART0_RxHead = 0;
 52a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <_ZL12UART0_RxHead>
	UART0_RxTail = 0;
 52e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <_ZL12UART0_RxTail>
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000)
 532:	99 23       	and	r25, r25
 534:	1c f4       	brge	.+6      	; 0x53c <_Z10uart0_initj+0x1c>
	{
		UART0_STATUS = (1 << U2X);  //Enable 2x speed 
 536:	22 e0       	ldi	r18, 0x02	; 2
 538:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 53a:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (unsigned char)(baudrate >> 8);
 53c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baudrate;
 53e:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
 540:	88 e9       	ldi	r24, 0x98	; 152
 542:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | ( 1 << UCSZ1);
 544:	86 e8       	ldi	r24, 0x86	; 134
 546:	80 bd       	out	0x20, r24	; 32
 548:	08 95       	ret

0000054a <_Z10uart0_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART0_RxHead == UART0_RxTail) {
 54a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <_ZL12UART0_RxHead>
 54e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 552:	98 17       	cp	r25, r24
 554:	91 f0       	breq	.+36     	; 0x57a <_Z10uart0_getcv+0x30>
		return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART0_RxTail + 1) & UART_RX_BUFFER_MASK;
 556:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <_ZL12UART0_RxTail>
 55a:	ef 5f       	subi	r30, 0xFF	; 255
 55c:	ef 71       	andi	r30, 0x1F	; 31
	UART0_RxTail = tmptail;
 55e:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <_ZL12UART0_RxTail>

	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	ef 58       	subi	r30, 0x8F	; 143
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	20 81       	ld	r18, Z

	return (UART0_LastRxError << 8) + data;
 56a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <_ZL17UART0_LastRxError>
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	98 2f       	mov	r25, r24
 572:	88 27       	eor	r24, r24
 574:	82 0f       	add	r24, r18
 576:	91 1d       	adc	r25, r1
 578:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART0_RxHead == UART0_RxTail) {
		return UART_NO_DATA;   /* no data available */
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
 57e:	08 95       	ret

00000580 <__fixsfsi>:
 580:	04 d0       	rcall	.+8      	; 0x58a <__fixunssfsi>
 582:	68 94       	set
 584:	b1 11       	cpse	r27, r1
 586:	8d c0       	rjmp	.+282    	; 0x6a2 <__fp_szero>
 588:	08 95       	ret

0000058a <__fixunssfsi>:
 58a:	70 d0       	rcall	.+224    	; 0x66c <__fp_splitA>
 58c:	88 f0       	brcs	.+34     	; 0x5b0 <__fixunssfsi+0x26>
 58e:	9f 57       	subi	r25, 0x7F	; 127
 590:	90 f0       	brcs	.+36     	; 0x5b6 <__fixunssfsi+0x2c>
 592:	b9 2f       	mov	r27, r25
 594:	99 27       	eor	r25, r25
 596:	b7 51       	subi	r27, 0x17	; 23
 598:	a0 f0       	brcs	.+40     	; 0x5c2 <__fixunssfsi+0x38>
 59a:	d1 f0       	breq	.+52     	; 0x5d0 <__fixunssfsi+0x46>
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	88 1f       	adc	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	1a f0       	brmi	.+6      	; 0x5ac <__fixunssfsi+0x22>
 5a6:	ba 95       	dec	r27
 5a8:	c9 f7       	brne	.-14     	; 0x59c <__fixunssfsi+0x12>
 5aa:	12 c0       	rjmp	.+36     	; 0x5d0 <__fixunssfsi+0x46>
 5ac:	b1 30       	cpi	r27, 0x01	; 1
 5ae:	81 f0       	breq	.+32     	; 0x5d0 <__fixunssfsi+0x46>
 5b0:	77 d0       	rcall	.+238    	; 0x6a0 <__fp_zero>
 5b2:	b1 e0       	ldi	r27, 0x01	; 1
 5b4:	08 95       	ret
 5b6:	74 c0       	rjmp	.+232    	; 0x6a0 <__fp_zero>
 5b8:	67 2f       	mov	r22, r23
 5ba:	78 2f       	mov	r23, r24
 5bc:	88 27       	eor	r24, r24
 5be:	b8 5f       	subi	r27, 0xF8	; 248
 5c0:	39 f0       	breq	.+14     	; 0x5d0 <__fixunssfsi+0x46>
 5c2:	b9 3f       	cpi	r27, 0xF9	; 249
 5c4:	cc f3       	brlt	.-14     	; 0x5b8 <__fixunssfsi+0x2e>
 5c6:	86 95       	lsr	r24
 5c8:	77 95       	ror	r23
 5ca:	67 95       	ror	r22
 5cc:	b3 95       	inc	r27
 5ce:	d9 f7       	brne	.-10     	; 0x5c6 <__fixunssfsi+0x3c>
 5d0:	3e f4       	brtc	.+14     	; 0x5e0 <__fixunssfsi+0x56>
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__floatunsisf>:
 5e2:	e8 94       	clt
 5e4:	09 c0       	rjmp	.+18     	; 0x5f8 <__floatsisf+0x12>

000005e6 <__floatsisf>:
 5e6:	97 fb       	bst	r25, 7
 5e8:	3e f4       	brtc	.+14     	; 0x5f8 <__floatsisf+0x12>
 5ea:	90 95       	com	r25
 5ec:	80 95       	com	r24
 5ee:	70 95       	com	r23
 5f0:	61 95       	neg	r22
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	8f 4f       	sbci	r24, 0xFF	; 255
 5f6:	9f 4f       	sbci	r25, 0xFF	; 255
 5f8:	99 23       	and	r25, r25
 5fa:	a9 f0       	breq	.+42     	; 0x626 <__floatsisf+0x40>
 5fc:	f9 2f       	mov	r31, r25
 5fe:	96 e9       	ldi	r25, 0x96	; 150
 600:	bb 27       	eor	r27, r27
 602:	93 95       	inc	r25
 604:	f6 95       	lsr	r31
 606:	87 95       	ror	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	b7 95       	ror	r27
 60e:	f1 11       	cpse	r31, r1
 610:	f8 cf       	rjmp	.-16     	; 0x602 <__floatsisf+0x1c>
 612:	fa f4       	brpl	.+62     	; 0x652 <__floatsisf+0x6c>
 614:	bb 0f       	add	r27, r27
 616:	11 f4       	brne	.+4      	; 0x61c <__floatsisf+0x36>
 618:	60 ff       	sbrs	r22, 0
 61a:	1b c0       	rjmp	.+54     	; 0x652 <__floatsisf+0x6c>
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	16 c0       	rjmp	.+44     	; 0x652 <__floatsisf+0x6c>
 626:	88 23       	and	r24, r24
 628:	11 f0       	breq	.+4      	; 0x62e <__floatsisf+0x48>
 62a:	96 e9       	ldi	r25, 0x96	; 150
 62c:	11 c0       	rjmp	.+34     	; 0x650 <__floatsisf+0x6a>
 62e:	77 23       	and	r23, r23
 630:	21 f0       	breq	.+8      	; 0x63a <__floatsisf+0x54>
 632:	9e e8       	ldi	r25, 0x8E	; 142
 634:	87 2f       	mov	r24, r23
 636:	76 2f       	mov	r23, r22
 638:	05 c0       	rjmp	.+10     	; 0x644 <__floatsisf+0x5e>
 63a:	66 23       	and	r22, r22
 63c:	71 f0       	breq	.+28     	; 0x65a <__floatsisf+0x74>
 63e:	96 e8       	ldi	r25, 0x86	; 134
 640:	86 2f       	mov	r24, r22
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	2a f0       	brmi	.+10     	; 0x652 <__floatsisf+0x6c>
 648:	9a 95       	dec	r25
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	88 1f       	adc	r24, r24
 650:	da f7       	brpl	.-10     	; 0x648 <__floatsisf+0x62>
 652:	88 0f       	add	r24, r24
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	97 f9       	bld	r25, 7
 65a:	08 95       	ret

0000065c <__fp_split3>:
 65c:	57 fd       	sbrc	r21, 7
 65e:	90 58       	subi	r25, 0x80	; 128
 660:	44 0f       	add	r20, r20
 662:	55 1f       	adc	r21, r21
 664:	59 f0       	breq	.+22     	; 0x67c <__fp_splitA+0x10>
 666:	5f 3f       	cpi	r21, 0xFF	; 255
 668:	71 f0       	breq	.+28     	; 0x686 <__fp_splitA+0x1a>
 66a:	47 95       	ror	r20

0000066c <__fp_splitA>:
 66c:	88 0f       	add	r24, r24
 66e:	97 fb       	bst	r25, 7
 670:	99 1f       	adc	r25, r25
 672:	61 f0       	breq	.+24     	; 0x68c <__fp_splitA+0x20>
 674:	9f 3f       	cpi	r25, 0xFF	; 255
 676:	79 f0       	breq	.+30     	; 0x696 <__fp_splitA+0x2a>
 678:	87 95       	ror	r24
 67a:	08 95       	ret
 67c:	12 16       	cp	r1, r18
 67e:	13 06       	cpc	r1, r19
 680:	14 06       	cpc	r1, r20
 682:	55 1f       	adc	r21, r21
 684:	f2 cf       	rjmp	.-28     	; 0x66a <__fp_split3+0xe>
 686:	46 95       	lsr	r20
 688:	f1 df       	rcall	.-30     	; 0x66c <__fp_splitA>
 68a:	08 c0       	rjmp	.+16     	; 0x69c <__fp_splitA+0x30>
 68c:	16 16       	cp	r1, r22
 68e:	17 06       	cpc	r1, r23
 690:	18 06       	cpc	r1, r24
 692:	99 1f       	adc	r25, r25
 694:	f1 cf       	rjmp	.-30     	; 0x678 <__fp_splitA+0xc>
 696:	86 95       	lsr	r24
 698:	71 05       	cpc	r23, r1
 69a:	61 05       	cpc	r22, r1
 69c:	08 94       	sec
 69e:	08 95       	ret

000006a0 <__fp_zero>:
 6a0:	e8 94       	clt

000006a2 <__fp_szero>:
 6a2:	bb 27       	eor	r27, r27
 6a4:	66 27       	eor	r22, r22
 6a6:	77 27       	eor	r23, r23
 6a8:	cb 01       	movw	r24, r22
 6aa:	97 f9       	bld	r25, 7
 6ac:	08 95       	ret

000006ae <__mulsf3>:
 6ae:	0b d0       	rcall	.+22     	; 0x6c6 <__mulsf3x>
 6b0:	78 c0       	rjmp	.+240    	; 0x7a2 <__fp_round>
 6b2:	69 d0       	rcall	.+210    	; 0x786 <__fp_pscA>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <__mulsf3+0x12>
 6b6:	6e d0       	rcall	.+220    	; 0x794 <__fp_pscB>
 6b8:	18 f0       	brcs	.+6      	; 0x6c0 <__mulsf3+0x12>
 6ba:	95 23       	and	r25, r21
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <__mulsf3+0x12>
 6be:	5a c0       	rjmp	.+180    	; 0x774 <__fp_inf>
 6c0:	5f c0       	rjmp	.+190    	; 0x780 <__fp_nan>
 6c2:	11 24       	eor	r1, r1
 6c4:	ee cf       	rjmp	.-36     	; 0x6a2 <__fp_szero>

000006c6 <__mulsf3x>:
 6c6:	ca df       	rcall	.-108    	; 0x65c <__fp_split3>
 6c8:	a0 f3       	brcs	.-24     	; 0x6b2 <__mulsf3+0x4>

000006ca <__mulsf3_pse>:
 6ca:	95 9f       	mul	r25, r21
 6cc:	d1 f3       	breq	.-12     	; 0x6c2 <__mulsf3+0x14>
 6ce:	95 0f       	add	r25, r21
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	55 1f       	adc	r21, r21
 6d4:	62 9f       	mul	r22, r18
 6d6:	f0 01       	movw	r30, r0
 6d8:	72 9f       	mul	r23, r18
 6da:	bb 27       	eor	r27, r27
 6dc:	f0 0d       	add	r31, r0
 6de:	b1 1d       	adc	r27, r1
 6e0:	63 9f       	mul	r22, r19
 6e2:	aa 27       	eor	r26, r26
 6e4:	f0 0d       	add	r31, r0
 6e6:	b1 1d       	adc	r27, r1
 6e8:	aa 1f       	adc	r26, r26
 6ea:	64 9f       	mul	r22, r20
 6ec:	66 27       	eor	r22, r22
 6ee:	b0 0d       	add	r27, r0
 6f0:	a1 1d       	adc	r26, r1
 6f2:	66 1f       	adc	r22, r22
 6f4:	82 9f       	mul	r24, r18
 6f6:	22 27       	eor	r18, r18
 6f8:	b0 0d       	add	r27, r0
 6fa:	a1 1d       	adc	r26, r1
 6fc:	62 1f       	adc	r22, r18
 6fe:	73 9f       	mul	r23, r19
 700:	b0 0d       	add	r27, r0
 702:	a1 1d       	adc	r26, r1
 704:	62 1f       	adc	r22, r18
 706:	83 9f       	mul	r24, r19
 708:	a0 0d       	add	r26, r0
 70a:	61 1d       	adc	r22, r1
 70c:	22 1f       	adc	r18, r18
 70e:	74 9f       	mul	r23, r20
 710:	33 27       	eor	r19, r19
 712:	a0 0d       	add	r26, r0
 714:	61 1d       	adc	r22, r1
 716:	23 1f       	adc	r18, r19
 718:	84 9f       	mul	r24, r20
 71a:	60 0d       	add	r22, r0
 71c:	21 1d       	adc	r18, r1
 71e:	82 2f       	mov	r24, r18
 720:	76 2f       	mov	r23, r22
 722:	6a 2f       	mov	r22, r26
 724:	11 24       	eor	r1, r1
 726:	9f 57       	subi	r25, 0x7F	; 127
 728:	50 40       	sbci	r21, 0x00	; 0
 72a:	8a f0       	brmi	.+34     	; 0x74e <__mulsf3_pse+0x84>
 72c:	e1 f0       	breq	.+56     	; 0x766 <__mulsf3_pse+0x9c>
 72e:	88 23       	and	r24, r24
 730:	4a f0       	brmi	.+18     	; 0x744 <__mulsf3_pse+0x7a>
 732:	ee 0f       	add	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	bb 1f       	adc	r27, r27
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	91 50       	subi	r25, 0x01	; 1
 740:	50 40       	sbci	r21, 0x00	; 0
 742:	a9 f7       	brne	.-22     	; 0x72e <__mulsf3_pse+0x64>
 744:	9e 3f       	cpi	r25, 0xFE	; 254
 746:	51 05       	cpc	r21, r1
 748:	70 f0       	brcs	.+28     	; 0x766 <__mulsf3_pse+0x9c>
 74a:	14 c0       	rjmp	.+40     	; 0x774 <__fp_inf>
 74c:	aa cf       	rjmp	.-172    	; 0x6a2 <__fp_szero>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	ec f3       	brlt	.-6      	; 0x74c <__mulsf3_pse+0x82>
 752:	98 3e       	cpi	r25, 0xE8	; 232
 754:	dc f3       	brlt	.-10     	; 0x74c <__mulsf3_pse+0x82>
 756:	86 95       	lsr	r24
 758:	77 95       	ror	r23
 75a:	67 95       	ror	r22
 75c:	b7 95       	ror	r27
 75e:	f7 95       	ror	r31
 760:	e7 95       	ror	r30
 762:	9f 5f       	subi	r25, 0xFF	; 255
 764:	c1 f7       	brne	.-16     	; 0x756 <__mulsf3_pse+0x8c>
 766:	fe 2b       	or	r31, r30
 768:	88 0f       	add	r24, r24
 76a:	91 1d       	adc	r25, r1
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret

00000774 <__fp_inf>:
 774:	97 f9       	bld	r25, 7
 776:	9f 67       	ori	r25, 0x7F	; 127
 778:	80 e8       	ldi	r24, 0x80	; 128
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	08 95       	ret

00000780 <__fp_nan>:
 780:	9f ef       	ldi	r25, 0xFF	; 255
 782:	80 ec       	ldi	r24, 0xC0	; 192
 784:	08 95       	ret

00000786 <__fp_pscA>:
 786:	00 24       	eor	r0, r0
 788:	0a 94       	dec	r0
 78a:	16 16       	cp	r1, r22
 78c:	17 06       	cpc	r1, r23
 78e:	18 06       	cpc	r1, r24
 790:	09 06       	cpc	r0, r25
 792:	08 95       	ret

00000794 <__fp_pscB>:
 794:	00 24       	eor	r0, r0
 796:	0a 94       	dec	r0
 798:	12 16       	cp	r1, r18
 79a:	13 06       	cpc	r1, r19
 79c:	14 06       	cpc	r1, r20
 79e:	05 06       	cpc	r0, r21
 7a0:	08 95       	ret

000007a2 <__fp_round>:
 7a2:	09 2e       	mov	r0, r25
 7a4:	03 94       	inc	r0
 7a6:	00 0c       	add	r0, r0
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__fp_round+0xc>
 7aa:	88 23       	and	r24, r24
 7ac:	52 f0       	brmi	.+20     	; 0x7c2 <__fp_round+0x20>
 7ae:	bb 0f       	add	r27, r27
 7b0:	40 f4       	brcc	.+16     	; 0x7c2 <__fp_round+0x20>
 7b2:	bf 2b       	or	r27, r31
 7b4:	11 f4       	brne	.+4      	; 0x7ba <__fp_round+0x18>
 7b6:	60 ff       	sbrs	r22, 0
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <__fp_round+0x20>
 7ba:	6f 5f       	subi	r22, 0xFF	; 255
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	08 95       	ret

000007c4 <__tablejump2__>:
 7c4:	ee 0f       	add	r30, r30
 7c6:	ff 1f       	adc	r31, r31
 7c8:	05 90       	lpm	r0, Z+
 7ca:	f4 91       	lpm	r31, Z
 7cc:	e0 2d       	mov	r30, r0
 7ce:	09 94       	ijmp

000007d0 <_exit>:
 7d0:	f8 94       	cli

000007d2 <__stop_program>:
 7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <__stop_program>
