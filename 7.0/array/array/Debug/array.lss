
array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000013d  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f6  00000000  00000000  000002c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015b  00000000  00000000  000003b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000061  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
#define F_CPU 1000000
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  70:	4a e0       	ldi	r20, 0x0A	; 10
	DDRD = 0xFF;
    while (1) 
    {
		unsigned char a=0xA4, temp;
		temp=a;
  72:	34 ea       	ldi	r19, 0xA4	; 164
		for(unsigned char i=0 ; i<10 ; i++)	
		{
			if (temp & 0x01)
				PORTD = 0b00000001;
  74:	21 e0       	ldi	r18, 0x01	; 1
#define F_CPU 1000000
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  76:	94 2f       	mov	r25, r20
	DDRD = 0xFF;
    while (1) 
    {
		unsigned char a=0xA4, temp;
		temp=a;
  78:	83 2f       	mov	r24, r19
		for(unsigned char i=0 ; i<10 ; i++)	
		{
			if (temp & 0x01)
  7a:	80 ff       	sbrs	r24, 0
  7c:	02 c0       	rjmp	.+4      	; 0x82 <main+0x16>
				PORTD = 0b00000001;
  7e:	22 bb       	out	0x12, r18	; 18
  80:	01 c0       	rjmp	.+2      	; 0x84 <main+0x18>
				
			else
				PORTD = 0x00;	
  82:	12 ba       	out	0x12, r1	; 18
			temp = temp >> 1;
  84:	86 95       	lsr	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	5f e3       	ldi	r21, 0x3F	; 63
  88:	6d e0       	ldi	r22, 0x0D	; 13
  8a:	73 e0       	ldi	r23, 0x03	; 3
  8c:	51 50       	subi	r21, 0x01	; 1
  8e:	60 40       	sbci	r22, 0x00	; 0
  90:	70 40       	sbci	r23, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
  98:	91 50       	subi	r25, 0x01	; 1
	DDRD = 0xFF;
    while (1) 
    {
		unsigned char a=0xA4, temp;
		temp=a;
		for(unsigned char i=0 ; i<10 ; i++)	
  9a:	79 f7       	brne	.-34     	; 0x7a <main+0xe>
  9c:	ec cf       	rjmp	.-40     	; 0x76 <main+0xa>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
