
megaPid_velocity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000db  00800204  00800204  000009e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b33  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9e  00000000  00000000  00002703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000af4  00000000  00000000  000035a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00004098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5b  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f59  00000000  00000000  000050b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	c8 c0       	rjmp	.+400    	; 0x196 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	e5 c0       	rjmp	.+458    	; 0x210 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c1       	rjmp	.+630    	; 0x2dc <__vector_25>
  66:	00 00       	nop
  68:	68 c1       	rjmp	.+720    	; 0x33a <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	c8 c1       	rjmp	.+912    	; 0x45e <__vector_51>
  ce:	00 00       	nop
  d0:	f5 c1       	rjmp	.+1002   	; 0x4bc <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1f c2       	rjmp	.+1086   	; 0x518 <__vector_54>
  da:	00 00       	nop
  dc:	4c c2       	rjmp	.+1176   	; 0x576 <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e5       	ldi	r30, 0x50	; 80
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 3d       	cpi	r26, 0xDF	; 223
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	15 c4       	rjmp	.+2090   	; 0x94c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
void in_kd(void){ kd += 0.05;}	  // Increase constant kd
void dr_kd(void){ kd -= 0.05;}	  // Decrease constant kd

int main(void)
{      
               uart0_init(UART_BAUD_SELECT(9600,F_CPU))	;  
 124:	87 e6       	ldi	r24, 0x67	; 103
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	36 d1       	rcall	.+620    	; 0x396 <_Z10uart0_initj>
   
	       // PB0 -> INT0
	       // PB1 -> INT1		
		DDRD = (0<<PD0) | (0<<PD1);
 12a:	1a b8       	out	0x0a, r1	; 10

		// Timer clock = 1/1024 of system clock and CTC mode
		TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);
 12c:	e1 e8       	ldi	r30, 0x81	; 129
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8d 60       	ori	r24, 0x0D	; 13
 134:	80 83       	st	Z, r24

		// Initialize INT0
		EICRA  |=  (1<<ISC01) | (1<<ISC00); // Rising edge triggers interrupt
 136:	e9 e6       	ldi	r30, 0x69	; 105
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	80 83       	st	Z, r24
		EIMSK  |=  (1<<INT0);		   // Enable interrupt0
 140:	e8 9a       	sbi	0x1d, 0	; 29
		TIMSK1 |= (1<<OCIE1A);		   // Output compare 1A interrupt enable
 142:	ef e6       	ldi	r30, 0x6F	; 111
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
		OCR1A   = (15624*ksampleTime);	   // Compare value => 1 sec
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		sei();	
 158:	78 94       	sei


		 DDRE   |= (1<<PINE3);
 15a:	6b 9a       	sbi	0x0d, 3	; 13
		 // Pre scale settings -- 256
		 TCCR3B |= (1<<CS32)|(0<<CS31)|(1<<CS30);
 15c:	a1 e9       	ldi	r26, 0x91	; 145
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	8c 91       	ld	r24, X
 162:	85 60       	ori	r24, 0x05	; 5
 164:	8c 93       	st	X, r24
		 // Mode of operation -- Phase Correct Mode
		 TCCR3A |= (1<<WGM31)|(0<<WGM30);
 166:	e0 e9       	ldi	r30, 0x90	; 144
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
		 TCCR3B |= (1<<WGM33)|(0<<WGM32);
 170:	8c 91       	ld	r24, X
 172:	80 61       	ori	r24, 0x10	; 16
 174:	8c 93       	st	X, r24
		 // Top value and update
		  TCCR3A |= (1<<COM3A1)|(0<<COM3A0); /*Non -inverting Mode*/
 176:	80 81       	ld	r24, Z
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	80 83       	st	Z, r24
// 		 ICR3 =  (F_CPU/(freq3*preScale3)-1);
// 		 OCR3A = ((F_CPU/(freq3*preScale3)-1)*dutyCycle3A)/100; /*Update value for OC3A*/
		 ICR3 = 38;
 17c:	86 e2       	ldi	r24, 0x26	; 38
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 184:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
		 OCR3A = 20 ; // 38 is ICR
 188:	84 e1       	ldi	r24, 0x14	; 20
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 190:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
void in_ki(void){ ki += 0.0001;}  // Increase constant ki
void dr_ki(void){ ki -= 0.0001;}  // Decrease constant ki
void in_kd(void){ kd += 0.05;}	  // Increase constant kd
void dr_kd(void){ kd -= 0.05;}	  // Decrease constant kd

int main(void)
 194:	ff cf       	rjmp	.-2      	; 0x194 <main+0x70>

00000196 <__vector_1>:
	{		 
	}
	return 0;
}

ISR (INT0_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
      
	// INT0 on rising edge
	if (!bit_is_set(PIND,1)){
 1a8:	49 99       	sbic	0x09, 1	; 9
 1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <__vector_1+0x3e>
		count--;
 1ac:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <count>
 1b0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <count+0x1>
 1b4:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <count+0x2>
 1b8:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <count+0x3>
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	a1 09       	sbc	r26, r1
 1c0:	b1 09       	sbc	r27, r1
 1c2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <count>
 1c6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <count+0x1>
 1ca:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <count+0x2>
 1ce:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <count+0x3>
 1d2:	15 c0       	rjmp	.+42     	; 0x1fe <__vector_1+0x68>
	}
	else if (bit_is_set(PIND,1)){
 1d4:	49 9b       	sbis	0x09, 1	; 9
 1d6:	13 c0       	rjmp	.+38     	; 0x1fe <__vector_1+0x68>
		count++;
 1d8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <count>
 1dc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <count+0x1>
 1e0:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <count+0x2>
 1e4:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <count+0x3>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	a1 1d       	adc	r26, r1
 1ec:	b1 1d       	adc	r27, r1
 1ee:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <count>
 1f2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <count+0x1>
 1f6:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <count+0x2>
 1fa:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <count+0x3>
	}					        
}
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_17>:

ISR(TIMER1_COMPA_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	0b b6       	in	r0, 0x3b	; 59
 21c:	0f 92       	push	r0
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	// Every SAMPLE_TIME sec !
	rpt = (float)count/(kppr*ksampleTime);
 236:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <count>
 23a:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <count+0x1>
 23e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <count+0x2>
 242:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <count+0x3>
 246:	60 d2       	rcall	.+1216   	; 0x708 <__floatsisf>
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 ea       	ldi	r20, 0xA0	; 160
 24e:	50 e4       	ldi	r21, 0x40	; 64
 250:	c0 d1       	rcall	.+896    	; 0x5d2 <__divsf3>
 252:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <__data_end>
 256:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <__data_end+0x1>
 25a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end+0x2>
 25e:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x3>
	rpm = (rpt*60);
 262:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <__data_end>
 266:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <__data_end+0x1>
 26a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end+0x2>
 26e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x3>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 e7       	ldi	r20, 0x70	; 112
 278:	52 e4       	ldi	r21, 0x42	; 66
 27a:	d2 d2       	rcall	.+1444   	; 0x820 <__mulsf3>
 27c:	12 d2       	rcall	.+1060   	; 0x6a2 <__fixsfsi>
 27e:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <rpm>
 282:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <rpm+0x1>
 286:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <rpm+0x2>
 28a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <rpm+0x3>
		uart0_putint(rpm);
 28e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rpm>
 292:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <rpm+0x1>
 296:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <rpm+0x2>
 29a:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <rpm+0x3>
 29e:	a9 d0       	rcall	.+338    	; 0x3f2 <_Z12uart0_putinti>
		uart0_puts("\n \r");
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	ce d0       	rcall	.+412    	; 0x442 <_Z10uart0_putsPKc>
	count = 0;
 2a6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <count>
 2aa:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <count+0x1>
 2ae:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <count+0x2>
 2b2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <count+0x3>
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	7f 91       	pop	r23
 2c4:	6f 91       	pop	r22
 2c6:	5f 91       	pop	r21
 2c8:	4f 91       	pop	r20
 2ca:	3f 91       	pop	r19
 2cc:	2f 91       	pop	r18
 2ce:	0f 90       	pop	r0
 2d0:	0b be       	out	0x3b, r0	; 59
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	0b b6       	in	r0, 0x3b	; 59
 2e8:	0f 92       	push	r0
 2ea:	2f 93       	push	r18
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
 2f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 2f8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2fc:	88 71       	andi	r24, 0x18	; 24
 2fe:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <_ZL12UART0_RxHead>
 302:	ef 5f       	subi	r30, 0xFF	; 255
 304:	ef 71       	andi	r30, 0x1F	; 31
 306:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <_ZL12UART0_RxTail>
 30a:	e9 17       	cp	r30, r25
 30c:	39 f0       	breq	.+14     	; 0x31c <__vector_25+0x40>
 30e:	e0 93 9c 02 	sts	0x029C, r30	; 0x80029c <_ZL12UART0_RxHead>
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	e1 56       	subi	r30, 0x61	; 97
 316:	fd 4f       	sbci	r31, 0xFD	; 253
 318:	20 83       	st	Z, r18
 31a:	01 c0       	rjmp	.+2      	; 0x31e <__vector_25+0x42>
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <_ZL17UART0_LastRxError>
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0b be       	out	0x3b, r0	; 59
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_26>:
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0b b6       	in	r0, 0x3b	; 59
 346:	0f 92       	push	r0
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
 350:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <_ZL12UART0_TxHead>
 354:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_ZL12UART0_TxTail>
 358:	98 17       	cp	r25, r24
 35a:	69 f0       	breq	.+26     	; 0x376 <__vector_26+0x3c>
 35c:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <_ZL12UART0_TxTail>
 360:	ef 5f       	subi	r30, 0xFF	; 255
 362:	ef 71       	andi	r30, 0x1F	; 31
 364:	e0 93 9d 02 	sts	0x029D, r30	; 0x80029d <_ZL12UART0_TxTail>
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	e1 54       	subi	r30, 0x41	; 65
 36c:	fd 4f       	sbci	r31, 0xFD	; 253
 36e:	80 81       	ld	r24, Z
 370:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 374:	05 c0       	rjmp	.+10     	; 0x380 <__vector_26+0x46>
 376:	e1 ec       	ldi	r30, 0xC1	; 193
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	80 83       	st	Z, r24
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <_Z10uart0_initj>:
 396:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <_ZL12UART0_TxHead>
 39a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZL12UART0_TxTail>
 39e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZL12UART0_RxHead>
 3a2:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZL12UART0_RxTail>
 3a6:	99 23       	and	r25, r25
 3a8:	24 f4       	brge	.+8      	; 0x3b2 <_Z10uart0_initj+0x1c>
 3aa:	22 e0       	ldi	r18, 0x02	; 2
 3ac:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 3b0:	9f 77       	andi	r25, 0x7F	; 127
 3b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 3b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 3ba:	88 e9       	ldi	r24, 0x98	; 152
 3bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 3c6:	08 95       	ret

000003c8 <_Z10uart0_putch>:
 3c8:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <_ZL12UART0_TxHead>
 3cc:	2f 5f       	subi	r18, 0xFF	; 255
 3ce:	2f 71       	andi	r18, 0x1F	; 31
 3d0:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <_ZL12UART0_TxTail>
 3d4:	29 17       	cp	r18, r25
 3d6:	e1 f3       	breq	.-8      	; 0x3d0 <_Z10uart0_putch+0x8>
 3d8:	e2 2f       	mov	r30, r18
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	e1 54       	subi	r30, 0x41	; 65
 3de:	fd 4f       	sbci	r31, 0xFD	; 253
 3e0:	80 83       	st	Z, r24
 3e2:	20 93 9e 02 	sts	0x029E, r18	; 0x80029e <_ZL12UART0_TxHead>
 3e6:	e1 ec       	ldi	r30, 0xC1	; 193
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	80 83       	st	Z, r24
 3f0:	08 95       	ret

000003f2 <_Z12uart0_putinti>:
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	2f 97       	sbiw	r28, 0x0f	; 15
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	4a e0       	ldi	r20, 0x0A	; 10
 40c:	be 01       	movw	r22, r28
 40e:	6f 5f       	subi	r22, 0xFF	; 255
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	69 d2       	rcall	.+1234   	; 0x8e6 <__itoa_ncheck>
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	88 23       	and	r24, r24
 418:	49 f0       	breq	.+18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41a:	8e 01       	movw	r16, r28
 41c:	0e 5f       	subi	r16, 0xFE	; 254
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	d3 df       	rcall	.-90     	; 0x3c8 <_Z10uart0_putch>
 422:	f8 01       	movw	r30, r16
 424:	81 91       	ld	r24, Z+
 426:	8f 01       	movw	r16, r30
 428:	81 11       	cpse	r24, r1
 42a:	fa cf       	rjmp	.-12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42c:	2f 96       	adiw	r28, 0x0f	; 15
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <_Z10uart0_putsPKc>:
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
 448:	88 81       	ld	r24, Y
 44a:	88 23       	and	r24, r24
 44c:	29 f0       	breq	.+10     	; 0x458 <_Z10uart0_putsPKc+0x16>
 44e:	21 96       	adiw	r28, 0x01	; 1
 450:	bb df       	rcall	.-138    	; 0x3c8 <_Z10uart0_putch>
 452:	89 91       	ld	r24, Y+
 454:	81 11       	cpse	r24, r1
 456:	fc cf       	rjmp	.-8      	; 0x450 <_Z10uart0_putsPKc+0xe>
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <__vector_51>:
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	0b b6       	in	r0, 0x3b	; 59
 46a:	0f 92       	push	r0
 46c:	2f 93       	push	r18
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
 476:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 47a:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 47e:	88 71       	andi	r24, 0x18	; 24
 480:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <_ZL12UART2_RxHead>
 484:	ef 5f       	subi	r30, 0xFF	; 255
 486:	ef 71       	andi	r30, 0x1F	; 31
 488:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <_ZL12UART2_RxTail>
 48c:	e9 17       	cp	r30, r25
 48e:	39 f0       	breq	.+14     	; 0x49e <__vector_51+0x40>
 490:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <_ZL12UART2_RxHead>
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	e6 5a       	subi	r30, 0xA6	; 166
 498:	fd 4f       	sbci	r31, 0xFD	; 253
 49a:	20 83       	st	Z, r18
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__vector_51+0x42>
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <_ZL17UART2_LastRxError>
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0b be       	out	0x3b, r0	; 59
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__vector_52>:
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	0b b6       	in	r0, 0x3b	; 59
 4c8:	0f 92       	push	r0
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
 4d2:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <_ZL12UART2_TxHead>
 4d6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZL12UART2_TxTail>
 4da:	98 17       	cp	r25, r24
 4dc:	69 f0       	breq	.+26     	; 0x4f8 <__vector_52+0x3c>
 4de:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <_ZL12UART2_TxTail>
 4e2:	ef 5f       	subi	r30, 0xFF	; 255
 4e4:	ef 71       	andi	r30, 0x1F	; 31
 4e6:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <_ZL12UART2_TxTail>
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	e6 58       	subi	r30, 0x86	; 134
 4ee:	fd 4f       	sbci	r31, 0xFD	; 253
 4f0:	80 81       	ld	r24, Z
 4f2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <__vector_52+0x46>
 4f8:	e1 ed       	ldi	r30, 0xD1	; 209
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	8f 7d       	andi	r24, 0xDF	; 223
 500:	80 83       	st	Z, r24
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	0f 90       	pop	r0
 50c:	0b be       	out	0x3b, r0	; 59
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	0b b6       	in	r0, 0x3b	; 59
 524:	0f 92       	push	r0
 526:	2f 93       	push	r18
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
 530:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
 534:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
 538:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
 53a:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <_ZL12UART3_RxHead>
 53e:	ef 5f       	subi	r30, 0xFF	; 255
 540:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
 542:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <_ZL12UART3_RxTail>
 546:	e9 17       	cp	r30, r25
 548:	39 f0       	breq	.+14     	; 0x558 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
 54a:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	eb 5e       	subi	r30, 0xEB	; 235
 552:	fd 4f       	sbci	r31, 0xFD	; 253
 554:	20 83       	st	Z, r18
 556:	01 c0       	rjmp	.+2      	; 0x55a <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 558:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
 55a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_ZL17UART3_LastRxError>
}
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	0b b6       	in	r0, 0x3b	; 59
 582:	0f 92       	push	r0
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
 58c:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <_ZL12UART3_TxHead>
 590:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <_ZL12UART3_TxTail>
 594:	98 17       	cp	r25, r24
 596:	69 f0       	breq	.+26     	; 0x5b2 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
 598:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <_ZL12UART3_TxTail>
 59c:	ef 5f       	subi	r30, 0xFF	; 255
 59e:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
 5a0:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	eb 5c       	subi	r30, 0xCB	; 203
 5a8:	fd 4f       	sbci	r31, 0xFD	; 253
 5aa:	80 81       	ld	r24, Z
 5ac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
 5b2:	e1 e3       	ldi	r30, 0x31	; 49
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	80 81       	ld	r24, Z
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	80 83       	st	Z, r24
	}
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	0f 90       	pop	r0
 5c6:	0b be       	out	0x3b, r0	; 59
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <__divsf3>:
 5d2:	0c d0       	rcall	.+24     	; 0x5ec <__divsf3x>
 5d4:	eb c0       	rjmp	.+470    	; 0x7ac <__fp_round>
 5d6:	e3 d0       	rcall	.+454    	; 0x79e <__fp_pscB>
 5d8:	40 f0       	brcs	.+16     	; 0x5ea <__divsf3+0x18>
 5da:	da d0       	rcall	.+436    	; 0x790 <__fp_pscA>
 5dc:	30 f0       	brcs	.+12     	; 0x5ea <__divsf3+0x18>
 5de:	21 f4       	brne	.+8      	; 0x5e8 <__divsf3+0x16>
 5e0:	5f 3f       	cpi	r21, 0xFF	; 255
 5e2:	19 f0       	breq	.+6      	; 0x5ea <__divsf3+0x18>
 5e4:	cc c0       	rjmp	.+408    	; 0x77e <__fp_inf>
 5e6:	51 11       	cpse	r21, r1
 5e8:	15 c1       	rjmp	.+554    	; 0x814 <__fp_szero>
 5ea:	cf c0       	rjmp	.+414    	; 0x78a <__fp_nan>

000005ec <__divsf3x>:
 5ec:	f0 d0       	rcall	.+480    	; 0x7ce <__fp_split3>
 5ee:	98 f3       	brcs	.-26     	; 0x5d6 <__divsf3+0x4>

000005f0 <__divsf3_pse>:
 5f0:	99 23       	and	r25, r25
 5f2:	c9 f3       	breq	.-14     	; 0x5e6 <__divsf3+0x14>
 5f4:	55 23       	and	r21, r21
 5f6:	b1 f3       	breq	.-20     	; 0x5e4 <__divsf3+0x12>
 5f8:	95 1b       	sub	r25, r21
 5fa:	55 0b       	sbc	r21, r21
 5fc:	bb 27       	eor	r27, r27
 5fe:	aa 27       	eor	r26, r26
 600:	62 17       	cp	r22, r18
 602:	73 07       	cpc	r23, r19
 604:	84 07       	cpc	r24, r20
 606:	38 f0       	brcs	.+14     	; 0x616 <__divsf3_pse+0x26>
 608:	9f 5f       	subi	r25, 0xFF	; 255
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	44 1f       	adc	r20, r20
 612:	aa 1f       	adc	r26, r26
 614:	a9 f3       	breq	.-22     	; 0x600 <__divsf3_pse+0x10>
 616:	33 d0       	rcall	.+102    	; 0x67e <__divsf3_pse+0x8e>
 618:	0e 2e       	mov	r0, r30
 61a:	3a f0       	brmi	.+14     	; 0x62a <__divsf3_pse+0x3a>
 61c:	e0 e8       	ldi	r30, 0x80	; 128
 61e:	30 d0       	rcall	.+96     	; 0x680 <__divsf3_pse+0x90>
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	e6 95       	lsr	r30
 626:	00 1c       	adc	r0, r0
 628:	ca f7       	brpl	.-14     	; 0x61c <__divsf3_pse+0x2c>
 62a:	29 d0       	rcall	.+82     	; 0x67e <__divsf3_pse+0x8e>
 62c:	fe 2f       	mov	r31, r30
 62e:	27 d0       	rcall	.+78     	; 0x67e <__divsf3_pse+0x8e>
 630:	66 0f       	add	r22, r22
 632:	77 1f       	adc	r23, r23
 634:	88 1f       	adc	r24, r24
 636:	bb 1f       	adc	r27, r27
 638:	26 17       	cp	r18, r22
 63a:	37 07       	cpc	r19, r23
 63c:	48 07       	cpc	r20, r24
 63e:	ab 07       	cpc	r26, r27
 640:	b0 e8       	ldi	r27, 0x80	; 128
 642:	09 f0       	breq	.+2      	; 0x646 <__divsf3_pse+0x56>
 644:	bb 0b       	sbc	r27, r27
 646:	80 2d       	mov	r24, r0
 648:	bf 01       	movw	r22, r30
 64a:	ff 27       	eor	r31, r31
 64c:	93 58       	subi	r25, 0x83	; 131
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	2a f0       	brmi	.+10     	; 0x65c <__divsf3_pse+0x6c>
 652:	9e 3f       	cpi	r25, 0xFE	; 254
 654:	51 05       	cpc	r21, r1
 656:	68 f0       	brcs	.+26     	; 0x672 <__divsf3_pse+0x82>
 658:	92 c0       	rjmp	.+292    	; 0x77e <__fp_inf>
 65a:	dc c0       	rjmp	.+440    	; 0x814 <__fp_szero>
 65c:	5f 3f       	cpi	r21, 0xFF	; 255
 65e:	ec f3       	brlt	.-6      	; 0x65a <__divsf3_pse+0x6a>
 660:	98 3e       	cpi	r25, 0xE8	; 232
 662:	dc f3       	brlt	.-10     	; 0x65a <__divsf3_pse+0x6a>
 664:	86 95       	lsr	r24
 666:	77 95       	ror	r23
 668:	67 95       	ror	r22
 66a:	b7 95       	ror	r27
 66c:	f7 95       	ror	r31
 66e:	9f 5f       	subi	r25, 0xFF	; 255
 670:	c9 f7       	brne	.-14     	; 0x664 <__divsf3_pse+0x74>
 672:	88 0f       	add	r24, r24
 674:	91 1d       	adc	r25, r1
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret
 67e:	e1 e0       	ldi	r30, 0x01	; 1
 680:	66 0f       	add	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	bb 1f       	adc	r27, r27
 688:	62 17       	cp	r22, r18
 68a:	73 07       	cpc	r23, r19
 68c:	84 07       	cpc	r24, r20
 68e:	ba 07       	cpc	r27, r26
 690:	20 f0       	brcs	.+8      	; 0x69a <__divsf3_pse+0xaa>
 692:	62 1b       	sub	r22, r18
 694:	73 0b       	sbc	r23, r19
 696:	84 0b       	sbc	r24, r20
 698:	ba 0b       	sbc	r27, r26
 69a:	ee 1f       	adc	r30, r30
 69c:	88 f7       	brcc	.-30     	; 0x680 <__divsf3_pse+0x90>
 69e:	e0 95       	com	r30
 6a0:	08 95       	ret

000006a2 <__fixsfsi>:
 6a2:	04 d0       	rcall	.+8      	; 0x6ac <__fixunssfsi>
 6a4:	68 94       	set
 6a6:	b1 11       	cpse	r27, r1
 6a8:	b5 c0       	rjmp	.+362    	; 0x814 <__fp_szero>
 6aa:	08 95       	ret

000006ac <__fixunssfsi>:
 6ac:	98 d0       	rcall	.+304    	; 0x7de <__fp_splitA>
 6ae:	88 f0       	brcs	.+34     	; 0x6d2 <__fixunssfsi+0x26>
 6b0:	9f 57       	subi	r25, 0x7F	; 127
 6b2:	90 f0       	brcs	.+36     	; 0x6d8 <__fixunssfsi+0x2c>
 6b4:	b9 2f       	mov	r27, r25
 6b6:	99 27       	eor	r25, r25
 6b8:	b7 51       	subi	r27, 0x17	; 23
 6ba:	a0 f0       	brcs	.+40     	; 0x6e4 <__fixunssfsi+0x38>
 6bc:	d1 f0       	breq	.+52     	; 0x6f2 <__fixunssfsi+0x46>
 6be:	66 0f       	add	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	1a f0       	brmi	.+6      	; 0x6ce <__fixunssfsi+0x22>
 6c8:	ba 95       	dec	r27
 6ca:	c9 f7       	brne	.-14     	; 0x6be <__fixunssfsi+0x12>
 6cc:	12 c0       	rjmp	.+36     	; 0x6f2 <__fixunssfsi+0x46>
 6ce:	b1 30       	cpi	r27, 0x01	; 1
 6d0:	81 f0       	breq	.+32     	; 0x6f2 <__fixunssfsi+0x46>
 6d2:	9f d0       	rcall	.+318    	; 0x812 <__fp_zero>
 6d4:	b1 e0       	ldi	r27, 0x01	; 1
 6d6:	08 95       	ret
 6d8:	9c c0       	rjmp	.+312    	; 0x812 <__fp_zero>
 6da:	67 2f       	mov	r22, r23
 6dc:	78 2f       	mov	r23, r24
 6de:	88 27       	eor	r24, r24
 6e0:	b8 5f       	subi	r27, 0xF8	; 248
 6e2:	39 f0       	breq	.+14     	; 0x6f2 <__fixunssfsi+0x46>
 6e4:	b9 3f       	cpi	r27, 0xF9	; 249
 6e6:	cc f3       	brlt	.-14     	; 0x6da <__fixunssfsi+0x2e>
 6e8:	86 95       	lsr	r24
 6ea:	77 95       	ror	r23
 6ec:	67 95       	ror	r22
 6ee:	b3 95       	inc	r27
 6f0:	d9 f7       	brne	.-10     	; 0x6e8 <__fixunssfsi+0x3c>
 6f2:	3e f4       	brtc	.+14     	; 0x702 <__fixunssfsi+0x56>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	08 95       	ret

00000704 <__floatunsisf>:
 704:	e8 94       	clt
 706:	09 c0       	rjmp	.+18     	; 0x71a <__floatsisf+0x12>

00000708 <__floatsisf>:
 708:	97 fb       	bst	r25, 7
 70a:	3e f4       	brtc	.+14     	; 0x71a <__floatsisf+0x12>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	99 23       	and	r25, r25
 71c:	a9 f0       	breq	.+42     	; 0x748 <__floatsisf+0x40>
 71e:	f9 2f       	mov	r31, r25
 720:	96 e9       	ldi	r25, 0x96	; 150
 722:	bb 27       	eor	r27, r27
 724:	93 95       	inc	r25
 726:	f6 95       	lsr	r31
 728:	87 95       	ror	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f1 11       	cpse	r31, r1
 732:	f8 cf       	rjmp	.-16     	; 0x724 <__floatsisf+0x1c>
 734:	fa f4       	brpl	.+62     	; 0x774 <__floatsisf+0x6c>
 736:	bb 0f       	add	r27, r27
 738:	11 f4       	brne	.+4      	; 0x73e <__floatsisf+0x36>
 73a:	60 ff       	sbrs	r22, 0
 73c:	1b c0       	rjmp	.+54     	; 0x774 <__floatsisf+0x6c>
 73e:	6f 5f       	subi	r22, 0xFF	; 255
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	16 c0       	rjmp	.+44     	; 0x774 <__floatsisf+0x6c>
 748:	88 23       	and	r24, r24
 74a:	11 f0       	breq	.+4      	; 0x750 <__floatsisf+0x48>
 74c:	96 e9       	ldi	r25, 0x96	; 150
 74e:	11 c0       	rjmp	.+34     	; 0x772 <__floatsisf+0x6a>
 750:	77 23       	and	r23, r23
 752:	21 f0       	breq	.+8      	; 0x75c <__floatsisf+0x54>
 754:	9e e8       	ldi	r25, 0x8E	; 142
 756:	87 2f       	mov	r24, r23
 758:	76 2f       	mov	r23, r22
 75a:	05 c0       	rjmp	.+10     	; 0x766 <__floatsisf+0x5e>
 75c:	66 23       	and	r22, r22
 75e:	71 f0       	breq	.+28     	; 0x77c <__floatsisf+0x74>
 760:	96 e8       	ldi	r25, 0x86	; 134
 762:	86 2f       	mov	r24, r22
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	2a f0       	brmi	.+10     	; 0x774 <__floatsisf+0x6c>
 76a:	9a 95       	dec	r25
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	da f7       	brpl	.-10     	; 0x76a <__floatsisf+0x62>
 774:	88 0f       	add	r24, r24
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <__fp_inf>:
 77e:	97 f9       	bld	r25, 7
 780:	9f 67       	ori	r25, 0x7F	; 127
 782:	80 e8       	ldi	r24, 0x80	; 128
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	08 95       	ret

0000078a <__fp_nan>:
 78a:	9f ef       	ldi	r25, 0xFF	; 255
 78c:	80 ec       	ldi	r24, 0xC0	; 192
 78e:	08 95       	ret

00000790 <__fp_pscA>:
 790:	00 24       	eor	r0, r0
 792:	0a 94       	dec	r0
 794:	16 16       	cp	r1, r22
 796:	17 06       	cpc	r1, r23
 798:	18 06       	cpc	r1, r24
 79a:	09 06       	cpc	r0, r25
 79c:	08 95       	ret

0000079e <__fp_pscB>:
 79e:	00 24       	eor	r0, r0
 7a0:	0a 94       	dec	r0
 7a2:	12 16       	cp	r1, r18
 7a4:	13 06       	cpc	r1, r19
 7a6:	14 06       	cpc	r1, r20
 7a8:	05 06       	cpc	r0, r21
 7aa:	08 95       	ret

000007ac <__fp_round>:
 7ac:	09 2e       	mov	r0, r25
 7ae:	03 94       	inc	r0
 7b0:	00 0c       	add	r0, r0
 7b2:	11 f4       	brne	.+4      	; 0x7b8 <__fp_round+0xc>
 7b4:	88 23       	and	r24, r24
 7b6:	52 f0       	brmi	.+20     	; 0x7cc <__fp_round+0x20>
 7b8:	bb 0f       	add	r27, r27
 7ba:	40 f4       	brcc	.+16     	; 0x7cc <__fp_round+0x20>
 7bc:	bf 2b       	or	r27, r31
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__fp_round+0x18>
 7c0:	60 ff       	sbrs	r22, 0
 7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__fp_round+0x20>
 7c4:	6f 5f       	subi	r22, 0xFF	; 255
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	8f 4f       	sbci	r24, 0xFF	; 255
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	08 95       	ret

000007ce <__fp_split3>:
 7ce:	57 fd       	sbrc	r21, 7
 7d0:	90 58       	subi	r25, 0x80	; 128
 7d2:	44 0f       	add	r20, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	59 f0       	breq	.+22     	; 0x7ee <__fp_splitA+0x10>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	71 f0       	breq	.+28     	; 0x7f8 <__fp_splitA+0x1a>
 7dc:	47 95       	ror	r20

000007de <__fp_splitA>:
 7de:	88 0f       	add	r24, r24
 7e0:	97 fb       	bst	r25, 7
 7e2:	99 1f       	adc	r25, r25
 7e4:	61 f0       	breq	.+24     	; 0x7fe <__fp_splitA+0x20>
 7e6:	9f 3f       	cpi	r25, 0xFF	; 255
 7e8:	79 f0       	breq	.+30     	; 0x808 <__fp_splitA+0x2a>
 7ea:	87 95       	ror	r24
 7ec:	08 95       	ret
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	14 06       	cpc	r1, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	f2 cf       	rjmp	.-28     	; 0x7dc <__fp_split3+0xe>
 7f8:	46 95       	lsr	r20
 7fa:	f1 df       	rcall	.-30     	; 0x7de <__fp_splitA>
 7fc:	08 c0       	rjmp	.+16     	; 0x80e <__fp_splitA+0x30>
 7fe:	16 16       	cp	r1, r22
 800:	17 06       	cpc	r1, r23
 802:	18 06       	cpc	r1, r24
 804:	99 1f       	adc	r25, r25
 806:	f1 cf       	rjmp	.-30     	; 0x7ea <__fp_splitA+0xc>
 808:	86 95       	lsr	r24
 80a:	71 05       	cpc	r23, r1
 80c:	61 05       	cpc	r22, r1
 80e:	08 94       	sec
 810:	08 95       	ret

00000812 <__fp_zero>:
 812:	e8 94       	clt

00000814 <__fp_szero>:
 814:	bb 27       	eor	r27, r27
 816:	66 27       	eor	r22, r22
 818:	77 27       	eor	r23, r23
 81a:	cb 01       	movw	r24, r22
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__mulsf3>:
 820:	0b d0       	rcall	.+22     	; 0x838 <__mulsf3x>
 822:	c4 cf       	rjmp	.-120    	; 0x7ac <__fp_round>
 824:	b5 df       	rcall	.-150    	; 0x790 <__fp_pscA>
 826:	28 f0       	brcs	.+10     	; 0x832 <__mulsf3+0x12>
 828:	ba df       	rcall	.-140    	; 0x79e <__fp_pscB>
 82a:	18 f0       	brcs	.+6      	; 0x832 <__mulsf3+0x12>
 82c:	95 23       	and	r25, r21
 82e:	09 f0       	breq	.+2      	; 0x832 <__mulsf3+0x12>
 830:	a6 cf       	rjmp	.-180    	; 0x77e <__fp_inf>
 832:	ab cf       	rjmp	.-170    	; 0x78a <__fp_nan>
 834:	11 24       	eor	r1, r1
 836:	ee cf       	rjmp	.-36     	; 0x814 <__fp_szero>

00000838 <__mulsf3x>:
 838:	ca df       	rcall	.-108    	; 0x7ce <__fp_split3>
 83a:	a0 f3       	brcs	.-24     	; 0x824 <__mulsf3+0x4>

0000083c <__mulsf3_pse>:
 83c:	95 9f       	mul	r25, r21
 83e:	d1 f3       	breq	.-12     	; 0x834 <__mulsf3+0x14>
 840:	95 0f       	add	r25, r21
 842:	50 e0       	ldi	r21, 0x00	; 0
 844:	55 1f       	adc	r21, r21
 846:	62 9f       	mul	r22, r18
 848:	f0 01       	movw	r30, r0
 84a:	72 9f       	mul	r23, r18
 84c:	bb 27       	eor	r27, r27
 84e:	f0 0d       	add	r31, r0
 850:	b1 1d       	adc	r27, r1
 852:	63 9f       	mul	r22, r19
 854:	aa 27       	eor	r26, r26
 856:	f0 0d       	add	r31, r0
 858:	b1 1d       	adc	r27, r1
 85a:	aa 1f       	adc	r26, r26
 85c:	64 9f       	mul	r22, r20
 85e:	66 27       	eor	r22, r22
 860:	b0 0d       	add	r27, r0
 862:	a1 1d       	adc	r26, r1
 864:	66 1f       	adc	r22, r22
 866:	82 9f       	mul	r24, r18
 868:	22 27       	eor	r18, r18
 86a:	b0 0d       	add	r27, r0
 86c:	a1 1d       	adc	r26, r1
 86e:	62 1f       	adc	r22, r18
 870:	73 9f       	mul	r23, r19
 872:	b0 0d       	add	r27, r0
 874:	a1 1d       	adc	r26, r1
 876:	62 1f       	adc	r22, r18
 878:	83 9f       	mul	r24, r19
 87a:	a0 0d       	add	r26, r0
 87c:	61 1d       	adc	r22, r1
 87e:	22 1f       	adc	r18, r18
 880:	74 9f       	mul	r23, r20
 882:	33 27       	eor	r19, r19
 884:	a0 0d       	add	r26, r0
 886:	61 1d       	adc	r22, r1
 888:	23 1f       	adc	r18, r19
 88a:	84 9f       	mul	r24, r20
 88c:	60 0d       	add	r22, r0
 88e:	21 1d       	adc	r18, r1
 890:	82 2f       	mov	r24, r18
 892:	76 2f       	mov	r23, r22
 894:	6a 2f       	mov	r22, r26
 896:	11 24       	eor	r1, r1
 898:	9f 57       	subi	r25, 0x7F	; 127
 89a:	50 40       	sbci	r21, 0x00	; 0
 89c:	8a f0       	brmi	.+34     	; 0x8c0 <__mulsf3_pse+0x84>
 89e:	e1 f0       	breq	.+56     	; 0x8d8 <__mulsf3_pse+0x9c>
 8a0:	88 23       	and	r24, r24
 8a2:	4a f0       	brmi	.+18     	; 0x8b6 <__mulsf3_pse+0x7a>
 8a4:	ee 0f       	add	r30, r30
 8a6:	ff 1f       	adc	r31, r31
 8a8:	bb 1f       	adc	r27, r27
 8aa:	66 1f       	adc	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	91 50       	subi	r25, 0x01	; 1
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	a9 f7       	brne	.-22     	; 0x8a0 <__mulsf3_pse+0x64>
 8b6:	9e 3f       	cpi	r25, 0xFE	; 254
 8b8:	51 05       	cpc	r21, r1
 8ba:	70 f0       	brcs	.+28     	; 0x8d8 <__mulsf3_pse+0x9c>
 8bc:	60 cf       	rjmp	.-320    	; 0x77e <__fp_inf>
 8be:	aa cf       	rjmp	.-172    	; 0x814 <__fp_szero>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	ec f3       	brlt	.-6      	; 0x8be <__mulsf3_pse+0x82>
 8c4:	98 3e       	cpi	r25, 0xE8	; 232
 8c6:	dc f3       	brlt	.-10     	; 0x8be <__mulsf3_pse+0x82>
 8c8:	86 95       	lsr	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b7 95       	ror	r27
 8d0:	f7 95       	ror	r31
 8d2:	e7 95       	ror	r30
 8d4:	9f 5f       	subi	r25, 0xFF	; 255
 8d6:	c1 f7       	brne	.-16     	; 0x8c8 <__mulsf3_pse+0x8c>
 8d8:	fe 2b       	or	r31, r30
 8da:	88 0f       	add	r24, r24
 8dc:	91 1d       	adc	r25, r1
 8de:	96 95       	lsr	r25
 8e0:	87 95       	ror	r24
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <__itoa_ncheck>:
 8e6:	bb 27       	eor	r27, r27
 8e8:	4a 30       	cpi	r20, 0x0A	; 10
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <__itoa_ncheck+0x12>
 8ec:	99 23       	and	r25, r25
 8ee:	22 f4       	brpl	.+8      	; 0x8f8 <__itoa_ncheck+0x12>
 8f0:	bd e2       	ldi	r27, 0x2D	; 45
 8f2:	90 95       	com	r25
 8f4:	81 95       	neg	r24
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	01 c0       	rjmp	.+2      	; 0x8fc <__utoa_common>

000008fa <__utoa_ncheck>:
 8fa:	bb 27       	eor	r27, r27

000008fc <__utoa_common>:
 8fc:	fb 01       	movw	r30, r22
 8fe:	55 27       	eor	r21, r21
 900:	aa 27       	eor	r26, r26
 902:	88 0f       	add	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	aa 1f       	adc	r26, r26
 908:	a4 17       	cp	r26, r20
 90a:	10 f0       	brcs	.+4      	; 0x910 <__utoa_common+0x14>
 90c:	a4 1b       	sub	r26, r20
 90e:	83 95       	inc	r24
 910:	50 51       	subi	r21, 0x10	; 16
 912:	b9 f7       	brne	.-18     	; 0x902 <__utoa_common+0x6>
 914:	a0 5d       	subi	r26, 0xD0	; 208
 916:	aa 33       	cpi	r26, 0x3A	; 58
 918:	08 f0       	brcs	.+2      	; 0x91c <__utoa_common+0x20>
 91a:	a9 5d       	subi	r26, 0xD9	; 217
 91c:	a1 93       	st	Z+, r26
 91e:	00 97       	sbiw	r24, 0x00	; 0
 920:	79 f7       	brne	.-34     	; 0x900 <__utoa_common+0x4>
 922:	b1 11       	cpse	r27, r1
 924:	b1 93       	st	Z+, r27
 926:	11 92       	st	Z+, r1
 928:	cb 01       	movw	r24, r22
 92a:	00 c0       	rjmp	.+0      	; 0x92c <strrev>

0000092c <strrev>:
 92c:	dc 01       	movw	r26, r24
 92e:	fc 01       	movw	r30, r24
 930:	67 2f       	mov	r22, r23
 932:	71 91       	ld	r23, Z+
 934:	77 23       	and	r23, r23
 936:	e1 f7       	brne	.-8      	; 0x930 <strrev+0x4>
 938:	32 97       	sbiw	r30, 0x02	; 2
 93a:	04 c0       	rjmp	.+8      	; 0x944 <strrev+0x18>
 93c:	7c 91       	ld	r23, X
 93e:	6d 93       	st	X+, r22
 940:	70 83       	st	Z, r23
 942:	62 91       	ld	r22, -Z
 944:	ae 17       	cp	r26, r30
 946:	bf 07       	cpc	r27, r31
 948:	c8 f3       	brcs	.-14     	; 0x93c <strrev+0x10>
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
