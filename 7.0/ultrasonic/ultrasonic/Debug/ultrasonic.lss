
ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000528  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000528  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  000005c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071b  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000294  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e1  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024c  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e4  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  8a:	0c 94 92 02 	jmp	0x524	; 0x524 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcdenable>:
#define trigger 4
unsigned  char i;
long int value;
void lcdenable()
{
	PORTD |= 1<<en;
  92:	93 9a       	sbi	0x12, 3	; 18
	asm volatile ("nop");
  94:	00 00       	nop
	asm volatile ("nop");
  96:	00 00       	nop
	PORTD &= ~(1<<en);
  98:	93 98       	cbi	0x12, 3	; 18
  9a:	08 95       	ret

0000009c <lcdcheck>:
}
void lcdcheck()
{
	DDRA = 0x00;
  9c:	1a ba       	out	0x1a, r1	; 26
	PORTD |= 1<<rw;
  9e:	91 9a       	sbi	0x12, 1	; 18
	PORTD &= ~(1<<rs);
  a0:	90 98       	cbi	0x12, 0	; 18
	while(PORTD >= 0x80)
  a2:	97 9b       	sbis	0x12, 7	; 18
  a4:	04 c0       	rjmp	.+8      	; 0xae <lcdcheck+0x12>
	{
	  lcdenable();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <lcdenable>
void lcdcheck()
{
	DDRA = 0x00;
	PORTD |= 1<<rw;
	PORTD &= ~(1<<rs);
	while(PORTD >= 0x80)
  aa:	97 99       	sbic	0x12, 7	; 18
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <lcdcheck+0xa>
	{
	  lcdenable();
	}
	DDRA = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret

000000b4 <lcdcommand>:
}
void lcdcommand(unsigned char comd)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	lcdcheck();
  b8:	0e 94 4e 00 	call	0x9c	; 0x9c <lcdcheck>
	PORTD &= ~(1 << rs);
  bc:	90 98       	cbi	0x12, 0	; 18
	PORTD &= ~(1<< rw);
  be:	91 98       	cbi	0x12, 1	; 18
	PORTA = comd & 0xF0;
  c0:	8c 2f       	mov	r24, r28
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	8b bb       	out	0x1b, r24	; 27
	lcdenable();
  c6:	0e 94 49 00 	call	0x92	; 0x92 <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	81 e2       	ldi	r24, 0x21	; 33
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcdcommand+0x18>
  d0:	00 00       	nop
	_delay_us(100);
	PORTA = comd <<4;
  d2:	c2 95       	swap	r28
  d4:	c0 7f       	andi	r28, 0xF0	; 240
  d6:	cb bb       	out	0x1b, r28	; 27
	lcdenable();
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	83 ec       	ldi	r24, 0xC3	; 195
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcdcommand+0x2c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcdcommand+0x32>
  e6:	00 00       	nop
	_delay_ms(10);
	PORTA = 0;
  e8:	1b ba       	out	0x1b, r1	; 27
}
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcddata>:
void lcddata(unsigned char dat)
{
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
	lcdcheck();
  f2:	0e 94 4e 00 	call	0x9c	; 0x9c <lcdcheck>
	PORTD &= ~(1<< rw);
  f6:	91 98       	cbi	0x12, 1	; 18
	PORTD |= 1 << rs; 
  f8:	90 9a       	sbi	0x12, 0	; 18
	PORTA = dat & 0xF0;
  fa:	8c 2f       	mov	r24, r28
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	8b bb       	out	0x1b, r24	; 27
	lcdenable();
 100:	0e 94 49 00 	call	0x92	; 0x92 <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	81 e2       	ldi	r24, 0x21	; 33
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <lcddata+0x18>
 10a:	00 00       	nop
		_delay_us(100);
	PORTA = dat<<4;
 10c:	c2 95       	swap	r28
 10e:	c0 7f       	andi	r28, 0xF0	; 240
 110:	cb bb       	out	0x1b, r28	; 27
	lcdenable();
 112:	0e 94 49 00 	call	0x92	; 0x92 <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	83 ec       	ldi	r24, 0xC3	; 195
 118:	99 e0       	ldi	r25, 0x09	; 9
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcddata+0x2c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcddata+0x32>
 120:	00 00       	nop
	_delay_ms(10);
	PORTA = 0;
 122:	1b ba       	out	0x1b, r1	; 27
}
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <lcdinitialise>:
void lcdinitialise()
{
	DDRD |= 1<<rs |1<<rw |1<<en ;
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	8b 60       	ori	r24, 0x0B	; 11
 12c:	81 bb       	out	0x11, r24	; 17
 12e:	85 ea       	ldi	r24, 0xA5	; 165
 130:	9e e0       	ldi	r25, 0x0E	; 14
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcdinitialise+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcdinitialise+0x10>
 138:	00 00       	nop
	_delay_ms(15);
	lcdcommand(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcdcommand>
 140:	83 ef       	ldi	r24, 0xF3	; 243
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcdinitialise+0x1c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcdinitialise+0x22>
 14a:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x33);
 14c:	83 e3       	ldi	r24, 0x33	; 51
 14e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcdcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	90 e1       	ldi	r25, 0x10	; 16
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <lcdinitialise+0x2c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcdinitialise+0x32>
	_delay_us(50);
	lcdcommand(0x32);
 15a:	82 e3       	ldi	r24, 0x32	; 50
 15c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcdcommand>
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <lcdinitialise+0x3a>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcdinitialise+0x40>
	_delay_us(50);
	lcdcommand(0x28);
 168:	88 e2       	ldi	r24, 0x28	; 40
 16a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcdcommand>
 16e:	90 e1       	ldi	r25, 0x10	; 16
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <lcdinitialise+0x48>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcdinitialise+0x4e>
	_delay_us(50);
	lcdcommand(0x0E);
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcdcommand>
 17c:	80 e1       	ldi	r24, 0x10	; 16
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <lcdinitialise+0x56>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcdinitialise+0x5c>
 184:	08 95       	ret

00000186 <lcdprint>:
	_delay_us(50);
}
void lcdprint(char *string)
{
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(string[i] != 0)
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	59 f0       	breq	.+22     	; 0x1aa <lcdprint+0x24>
 194:	8f 01       	movw	r16, r30
 196:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcddata(string[i]);
 198:	0e 94 77 00 	call	0xee	; 0xee <lcddata>
		i++;
 19c:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_us(50);
}
void lcdprint(char *string)
{
	unsigned char i=0;
	while(string[i] != 0)
 19e:	f8 01       	movw	r30, r16
 1a0:	ec 0f       	add	r30, r28
 1a2:	f1 1d       	adc	r31, r1
 1a4:	80 81       	ld	r24, Z
 1a6:	81 11       	cpse	r24, r1
 1a8:	f7 cf       	rjmp	.-18     	; 0x198 <lcdprint+0x12>
	{
		lcddata(string[i]);
		i++;
	}
}
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <lcdgotoxy>:
void lcdgotoxy(unsigned char x, unsigned char y)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <lcdgotoxy+0x6>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcdgotoxy+0x8>
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char address[4] = {0x80,0xC0,0x94,0xD4};
 1be:	90 e8       	ldi	r25, 0x80	; 128
 1c0:	99 83       	std	Y+1, r25	; 0x01
 1c2:	90 ec       	ldi	r25, 0xC0	; 192
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	94 e9       	ldi	r25, 0x94	; 148
 1c8:	9b 83       	std	Y+3, r25	; 0x03
 1ca:	94 ed       	ldi	r25, 0xD4	; 212
 1cc:	9c 83       	std	Y+4, r25	; 0x04
 1ce:	81 50       	subi	r24, 0x01	; 1
		if((x<1 && x>20) && (y<1 && y>4))
			{
				x=1;
				y=1;
			}
		lcdcommand((address[y-1]+x-1));	
 1d0:	fe 01       	movw	r30, r28
 1d2:	e6 0f       	add	r30, r22
 1d4:	f1 1d       	adc	r31, r1
 1d6:	90 81       	ld	r25, Z
 1d8:	89 0f       	add	r24, r25
 1da:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcdcommand>
}
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
int main(void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <main+0x6>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <main+0x8>
 1f4:	1f 92       	push	r1
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
	i=1;
 1fa:	11 e0       	ldi	r17, 0x01	; 1
 1fc:	10 93 6c 00 	sts	0x006C, r17
	DDRD |=1<<trigger;
 200:	8c 9a       	sbi	0x11, 4	; 17
	lcdinitialise();
 202:	0e 94 94 00 	call	0x128	; 0x128 <lcdinitialise>
	sei();
 206:	78 94       	sei
	long int final;
	GICR = 1<< INT0;
 208:	80 e4       	ldi	r24, 0x40	; 64
 20a:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<< ISC00;
 20c:	85 b7       	in	r24, 0x35	; 53
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	85 bf       	out	0x35, r24	; 53
	float distance;
	char dis[5];
	TCCR1B = 0x01;
 212:	1e bd       	out	0x2e, r17	; 46
	PORTD &= ~(1<<echo);
 214:	92 98       	cbi	0x12, 2	; 18
	DDRD &= ~(1<<echo);
 216:	8a 98       	cbi	0x11, 2	; 17
	DDRD &= 1<<trigger;
 218:	81 b3       	in	r24, 0x11	; 17
 21a:	80 71       	andi	r24, 0x10	; 16
 21c:	81 bb       	out	0x11, r24	; 17
	lcdprint ("Distance = ");
 21e:	80 e6       	ldi	r24, 0x60	; 96
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 c3 00 	call	0x186	; 0x186 <lcdprint>
	while (1) 
    {
		PORTD |= 1<<trigger;
		_delay_us(12);
		PORTD &= ~(1<<trigger);
		distance = value / 58 ;
 226:	0f 2e       	mov	r0, r31
 228:	fa e3       	ldi	r31, 0x3A	; 58
 22a:	cf 2e       	mov	r12, r31
 22c:	d1 2c       	mov	r13, r1
 22e:	e1 2c       	mov	r14, r1
 230:	f1 2c       	mov	r15, r1
 232:	f0 2d       	mov	r31, r0
	DDRD &= ~(1<<echo);
	DDRD &= 1<<trigger;
	lcdprint ("Distance = ");
	while (1) 
    {
		PORTD |= 1<<trigger;
 234:	94 9a       	sbi	0x12, 4	; 18
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x4c>
		_delay_us(12);
		PORTD &= ~(1<<trigger);
 23c:	94 98       	cbi	0x12, 4	; 18
		distance = value / 58 ;
 23e:	60 91 6d 00 	lds	r22, 0x006D
 242:	70 91 6e 00 	lds	r23, 0x006E
 246:	80 91 6f 00 	lds	r24, 0x006F
 24a:	90 91 70 00 	lds	r25, 0x0070
 24e:	a7 01       	movw	r20, r14
 250:	96 01       	movw	r18, r12
 252:	0e 94 1c 02 	call	0x438	; 0x438 <__divmodsi4>
 256:	ca 01       	movw	r24, r20
 258:	b9 01       	movw	r22, r18
 25a:	0e 94 b8 01 	call	0x370	; 0x370 <__floatsisf>
		value = abs(distance);
 25e:	0e 94 80 01 	call	0x300	; 0x300 <__fixsfsi>
 262:	9b 01       	movw	r18, r22
 264:	77 23       	and	r23, r23
 266:	24 f4       	brge	.+8      	; 0x270 <main+0x84>
 268:	22 27       	eor	r18, r18
 26a:	33 27       	eor	r19, r19
 26c:	26 1b       	sub	r18, r22
 26e:	37 0b       	sbc	r19, r23
 270:	a9 01       	movw	r20, r18
 272:	03 2e       	mov	r0, r19
 274:	00 0c       	add	r0, r0
 276:	66 0b       	sbc	r22, r22
 278:	77 0b       	sbc	r23, r23
 27a:	40 93 6d 00 	sts	0x006D, r20
 27e:	50 93 6e 00 	sts	0x006E, r21
 282:	60 93 6f 00 	sts	0x006F, r22
 286:	70 93 70 00 	sts	0x0070, r23
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28a:	4a e0       	ldi	r20, 0x0A	; 10
 28c:	be 01       	movw	r22, r28
 28e:	6f 5f       	subi	r22, 0xFF	; 255
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	c9 01       	movw	r24, r18
 294:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__itoa_ncheck>
		final = value;
		itoa(final,dis,10);
		lcdgotoxy(12,1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcdgotoxy>
		lcdprint(dis);
 2a0:	ce 01       	movw	r24, r28
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	0e 94 c3 00 	call	0x186	; 0x186 <lcdprint>
	} 
 2a8:	c5 cf       	rjmp	.-118    	; 0x234 <main+0x48>

000002aa <__vector_1>:
	return 0;
}
ISR (INT0_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
	if (i==1)
 2bc:	80 91 6c 00 	lds	r24, 0x006C
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <__vector_1+0x26>
	{
		TCCR1B = 0x01;
 2c4:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0;
 2c6:	1d bc       	out	0x2d, r1	; 45
 2c8:	1c bc       	out	0x2c, r1	; 44
		i=0;
 2ca:	10 92 6c 00 	sts	0x006C, r1
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <__vector_1+0x44>
	}
	else
	{
		value = TCNT1;
 2d0:	8c b5       	in	r24, 0x2c	; 44
 2d2:	9d b5       	in	r25, 0x2d	; 45
 2d4:	a0 e0       	ldi	r26, 0x00	; 0
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	80 93 6d 00 	sts	0x006D, r24
 2dc:	90 93 6e 00 	sts	0x006E, r25
 2e0:	a0 93 6f 00 	sts	0x006F, r26
 2e4:	b0 93 70 00 	sts	0x0070, r27
		//TCCR1B = 0x00;
		//TCNT1 = 0;
		i=1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 6c 00 	sts	0x006C, r24
	}
}
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <__fixsfsi>:
 300:	0e 94 87 01 	call	0x30e	; 0x30e <__fixunssfsi>
 304:	68 94       	set
 306:	b1 11       	cpse	r27, r1
 308:	0c 94 16 02 	jmp	0x42c	; 0x42c <__fp_szero>
 30c:	08 95       	ret

0000030e <__fixunssfsi>:
 30e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_splitA>
 312:	88 f0       	brcs	.+34     	; 0x336 <__fixunssfsi+0x28>
 314:	9f 57       	subi	r25, 0x7F	; 127
 316:	98 f0       	brcs	.+38     	; 0x33e <__fixunssfsi+0x30>
 318:	b9 2f       	mov	r27, r25
 31a:	99 27       	eor	r25, r25
 31c:	b7 51       	subi	r27, 0x17	; 23
 31e:	b0 f0       	brcs	.+44     	; 0x34c <__fixunssfsi+0x3e>
 320:	e1 f0       	breq	.+56     	; 0x35a <__fixunssfsi+0x4c>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	88 1f       	adc	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	1a f0       	brmi	.+6      	; 0x332 <__fixunssfsi+0x24>
 32c:	ba 95       	dec	r27
 32e:	c9 f7       	brne	.-14     	; 0x322 <__fixunssfsi+0x14>
 330:	14 c0       	rjmp	.+40     	; 0x35a <__fixunssfsi+0x4c>
 332:	b1 30       	cpi	r27, 0x01	; 1
 334:	91 f0       	breq	.+36     	; 0x35a <__fixunssfsi+0x4c>
 336:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_zero>
 33a:	b1 e0       	ldi	r27, 0x01	; 1
 33c:	08 95       	ret
 33e:	0c 94 15 02 	jmp	0x42a	; 0x42a <__fp_zero>
 342:	67 2f       	mov	r22, r23
 344:	78 2f       	mov	r23, r24
 346:	88 27       	eor	r24, r24
 348:	b8 5f       	subi	r27, 0xF8	; 248
 34a:	39 f0       	breq	.+14     	; 0x35a <__fixunssfsi+0x4c>
 34c:	b9 3f       	cpi	r27, 0xF9	; 249
 34e:	cc f3       	brlt	.-14     	; 0x342 <__fixunssfsi+0x34>
 350:	86 95       	lsr	r24
 352:	77 95       	ror	r23
 354:	67 95       	ror	r22
 356:	b3 95       	inc	r27
 358:	d9 f7       	brne	.-10     	; 0x350 <__fixunssfsi+0x42>
 35a:	3e f4       	brtc	.+14     	; 0x36a <__fixunssfsi+0x5c>
 35c:	90 95       	com	r25
 35e:	80 95       	com	r24
 360:	70 95       	com	r23
 362:	61 95       	neg	r22
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	8f 4f       	sbci	r24, 0xFF	; 255
 368:	9f 4f       	sbci	r25, 0xFF	; 255
 36a:	08 95       	ret

0000036c <__floatunsisf>:
 36c:	e8 94       	clt
 36e:	09 c0       	rjmp	.+18     	; 0x382 <__floatsisf+0x12>

00000370 <__floatsisf>:
 370:	97 fb       	bst	r25, 7
 372:	3e f4       	brtc	.+14     	; 0x382 <__floatsisf+0x12>
 374:	90 95       	com	r25
 376:	80 95       	com	r24
 378:	70 95       	com	r23
 37a:	61 95       	neg	r22
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	8f 4f       	sbci	r24, 0xFF	; 255
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	99 23       	and	r25, r25
 384:	a9 f0       	breq	.+42     	; 0x3b0 <__floatsisf+0x40>
 386:	f9 2f       	mov	r31, r25
 388:	96 e9       	ldi	r25, 0x96	; 150
 38a:	bb 27       	eor	r27, r27
 38c:	93 95       	inc	r25
 38e:	f6 95       	lsr	r31
 390:	87 95       	ror	r24
 392:	77 95       	ror	r23
 394:	67 95       	ror	r22
 396:	b7 95       	ror	r27
 398:	f1 11       	cpse	r31, r1
 39a:	f8 cf       	rjmp	.-16     	; 0x38c <__floatsisf+0x1c>
 39c:	fa f4       	brpl	.+62     	; 0x3dc <__floatsisf+0x6c>
 39e:	bb 0f       	add	r27, r27
 3a0:	11 f4       	brne	.+4      	; 0x3a6 <__floatsisf+0x36>
 3a2:	60 ff       	sbrs	r22, 0
 3a4:	1b c0       	rjmp	.+54     	; 0x3dc <__floatsisf+0x6c>
 3a6:	6f 5f       	subi	r22, 0xFF	; 255
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8f 4f       	sbci	r24, 0xFF	; 255
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	16 c0       	rjmp	.+44     	; 0x3dc <__floatsisf+0x6c>
 3b0:	88 23       	and	r24, r24
 3b2:	11 f0       	breq	.+4      	; 0x3b8 <__floatsisf+0x48>
 3b4:	96 e9       	ldi	r25, 0x96	; 150
 3b6:	11 c0       	rjmp	.+34     	; 0x3da <__floatsisf+0x6a>
 3b8:	77 23       	and	r23, r23
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <__floatsisf+0x54>
 3bc:	9e e8       	ldi	r25, 0x8E	; 142
 3be:	87 2f       	mov	r24, r23
 3c0:	76 2f       	mov	r23, r22
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <__floatsisf+0x5e>
 3c4:	66 23       	and	r22, r22
 3c6:	71 f0       	breq	.+28     	; 0x3e4 <__floatsisf+0x74>
 3c8:	96 e8       	ldi	r25, 0x86	; 134
 3ca:	86 2f       	mov	r24, r22
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	2a f0       	brmi	.+10     	; 0x3dc <__floatsisf+0x6c>
 3d2:	9a 95       	dec	r25
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	da f7       	brpl	.-10     	; 0x3d2 <__floatsisf+0x62>
 3dc:	88 0f       	add	r24, r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	97 f9       	bld	r25, 7
 3e4:	08 95       	ret

000003e6 <__fp_split3>:
 3e6:	57 fd       	sbrc	r21, 7
 3e8:	90 58       	subi	r25, 0x80	; 128
 3ea:	44 0f       	add	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	59 f0       	breq	.+22     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	71 f0       	breq	.+28     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 3f4:	47 95       	ror	r20

000003f6 <__fp_splitA>:
 3f6:	88 0f       	add	r24, r24
 3f8:	97 fb       	bst	r25, 7
 3fa:	99 1f       	adc	r25, r25
 3fc:	61 f0       	breq	.+24     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 3fe:	9f 3f       	cpi	r25, 0xFF	; 255
 400:	79 f0       	breq	.+30     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 402:	87 95       	ror	r24
 404:	08 95       	ret
 406:	12 16       	cp	r1, r18
 408:	13 06       	cpc	r1, r19
 40a:	14 06       	cpc	r1, r20
 40c:	55 1f       	adc	r21, r21
 40e:	f2 cf       	rjmp	.-28     	; 0x3f4 <__fp_split3+0xe>
 410:	46 95       	lsr	r20
 412:	f1 df       	rcall	.-30     	; 0x3f6 <__fp_splitA>
 414:	08 c0       	rjmp	.+16     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 416:	16 16       	cp	r1, r22
 418:	17 06       	cpc	r1, r23
 41a:	18 06       	cpc	r1, r24
 41c:	99 1f       	adc	r25, r25
 41e:	f1 cf       	rjmp	.-30     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 420:	86 95       	lsr	r24
 422:	71 05       	cpc	r23, r1
 424:	61 05       	cpc	r22, r1
 426:	08 94       	sec
 428:	08 95       	ret

0000042a <__fp_zero>:
 42a:	e8 94       	clt

0000042c <__fp_szero>:
 42c:	bb 27       	eor	r27, r27
 42e:	66 27       	eor	r22, r22
 430:	77 27       	eor	r23, r23
 432:	cb 01       	movw	r24, r22
 434:	97 f9       	bld	r25, 7
 436:	08 95       	ret

00000438 <__divmodsi4>:
 438:	05 2e       	mov	r0, r21
 43a:	97 fb       	bst	r25, 7
 43c:	1e f4       	brtc	.+6      	; 0x444 <__divmodsi4+0xc>
 43e:	00 94       	com	r0
 440:	0e 94 33 02 	call	0x466	; 0x466 <__negsi2>
 444:	57 fd       	sbrc	r21, 7
 446:	07 d0       	rcall	.+14     	; 0x456 <__divmodsi4_neg2>
 448:	0e 94 3b 02 	call	0x476	; 0x476 <__udivmodsi4>
 44c:	07 fc       	sbrc	r0, 7
 44e:	03 d0       	rcall	.+6      	; 0x456 <__divmodsi4_neg2>
 450:	4e f4       	brtc	.+18     	; 0x464 <__divmodsi4_exit>
 452:	0c 94 33 02 	jmp	0x466	; 0x466 <__negsi2>

00000456 <__divmodsi4_neg2>:
 456:	50 95       	com	r21
 458:	40 95       	com	r20
 45a:	30 95       	com	r19
 45c:	21 95       	neg	r18
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	4f 4f       	sbci	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255

00000464 <__divmodsi4_exit>:
 464:	08 95       	ret

00000466 <__negsi2>:
 466:	90 95       	com	r25
 468:	80 95       	com	r24
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8f 4f       	sbci	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	08 95       	ret

00000476 <__udivmodsi4>:
 476:	a1 e2       	ldi	r26, 0x21	; 33
 478:	1a 2e       	mov	r1, r26
 47a:	aa 1b       	sub	r26, r26
 47c:	bb 1b       	sub	r27, r27
 47e:	fd 01       	movw	r30, r26
 480:	0d c0       	rjmp	.+26     	; 0x49c <__udivmodsi4_ep>

00000482 <__udivmodsi4_loop>:
 482:	aa 1f       	adc	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	ee 1f       	adc	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	a2 17       	cp	r26, r18
 48c:	b3 07       	cpc	r27, r19
 48e:	e4 07       	cpc	r30, r20
 490:	f5 07       	cpc	r31, r21
 492:	20 f0       	brcs	.+8      	; 0x49c <__udivmodsi4_ep>
 494:	a2 1b       	sub	r26, r18
 496:	b3 0b       	sbc	r27, r19
 498:	e4 0b       	sbc	r30, r20
 49a:	f5 0b       	sbc	r31, r21

0000049c <__udivmodsi4_ep>:
 49c:	66 1f       	adc	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	1a 94       	dec	r1
 4a6:	69 f7       	brne	.-38     	; 0x482 <__udivmodsi4_loop>
 4a8:	60 95       	com	r22
 4aa:	70 95       	com	r23
 4ac:	80 95       	com	r24
 4ae:	90 95       	com	r25
 4b0:	9b 01       	movw	r18, r22
 4b2:	ac 01       	movw	r20, r24
 4b4:	bd 01       	movw	r22, r26
 4b6:	cf 01       	movw	r24, r30
 4b8:	08 95       	ret

000004ba <__itoa_ncheck>:
 4ba:	bb 27       	eor	r27, r27
 4bc:	4a 30       	cpi	r20, 0x0A	; 10
 4be:	31 f4       	brne	.+12     	; 0x4cc <__itoa_ncheck+0x12>
 4c0:	99 23       	and	r25, r25
 4c2:	22 f4       	brpl	.+8      	; 0x4cc <__itoa_ncheck+0x12>
 4c4:	bd e2       	ldi	r27, 0x2D	; 45
 4c6:	90 95       	com	r25
 4c8:	81 95       	neg	r24
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__utoa_common>

000004d0 <__utoa_ncheck>:
 4d0:	bb 27       	eor	r27, r27

000004d2 <__utoa_common>:
 4d2:	fb 01       	movw	r30, r22
 4d4:	55 27       	eor	r21, r21
 4d6:	aa 27       	eor	r26, r26
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	aa 1f       	adc	r26, r26
 4de:	a4 17       	cp	r26, r20
 4e0:	10 f0       	brcs	.+4      	; 0x4e6 <__utoa_common+0x14>
 4e2:	a4 1b       	sub	r26, r20
 4e4:	83 95       	inc	r24
 4e6:	50 51       	subi	r21, 0x10	; 16
 4e8:	b9 f7       	brne	.-18     	; 0x4d8 <__utoa_common+0x6>
 4ea:	a0 5d       	subi	r26, 0xD0	; 208
 4ec:	aa 33       	cpi	r26, 0x3A	; 58
 4ee:	08 f0       	brcs	.+2      	; 0x4f2 <__utoa_common+0x20>
 4f0:	a9 5d       	subi	r26, 0xD9	; 217
 4f2:	a1 93       	st	Z+, r26
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	79 f7       	brne	.-34     	; 0x4d6 <__utoa_common+0x4>
 4f8:	b1 11       	cpse	r27, r1
 4fa:	b1 93       	st	Z+, r27
 4fc:	11 92       	st	Z+, r1
 4fe:	cb 01       	movw	r24, r22
 500:	0c 94 82 02 	jmp	0x504	; 0x504 <strrev>

00000504 <strrev>:
 504:	dc 01       	movw	r26, r24
 506:	fc 01       	movw	r30, r24
 508:	67 2f       	mov	r22, r23
 50a:	71 91       	ld	r23, Z+
 50c:	77 23       	and	r23, r23
 50e:	e1 f7       	brne	.-8      	; 0x508 <strrev+0x4>
 510:	32 97       	sbiw	r30, 0x02	; 2
 512:	04 c0       	rjmp	.+8      	; 0x51c <strrev+0x18>
 514:	7c 91       	ld	r23, X
 516:	6d 93       	st	X+, r22
 518:	70 83       	st	Z, r23
 51a:	62 91       	ld	r22, -Z
 51c:	ae 17       	cp	r26, r30
 51e:	bf 07       	cpc	r27, r31
 520:	c8 f3       	brcs	.-14     	; 0x514 <strrev+0x10>
 522:	08 95       	ret

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
