
UARTinterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  00800100  00800100  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a26  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000828  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037d  00000000  00000000  00001616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000304  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_18>
  4c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 37       	cpi	r26, 0x7A	; 122
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "UART.h"


int main (void)
{	
	uartInitialize();
  90:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z14uartInitializev>
	uartTransmitChar('a');
  94:	81 e6       	ldi	r24, 0x61	; 97
  96:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z16uartTransmitCharh>
					  
	while (1)
	{
		uartTransmitChar(uartReceiveChar());	
  9a:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15uartReceiveCharv>
  9e:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z16uartTransmitCharh>
#include <util/delay.h>

#include "UART.h"


int main (void)
  a2:	fb cf       	rjmp	.-10     	; 0x9a <main+0xa>

000000a4 <_Z14uartInitializev>:

		character = *string;
		uartTransmitChar(character);
		string++;
	}
}
  a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 69       	ori	r24, 0x98	; 152
  b6:	80 83       	st	Z, r24
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <_Z15uartReceiveCharv>:
  c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rxHead>
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxTail>
  ca:	98 17       	cp	r25, r24
  cc:	99 f0       	breq	.+38     	; 0xf4 <_Z15uartReceiveCharv+0x32>
  ce:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <rxHead>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e1 5c       	subi	r30, 0xC1	; 193
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	20 81       	ld	r18, Z
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <rxHead>
  de:	89 2f       	mov	r24, r25
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	6b e3       	ldi	r22, 0x3B	; 59
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 10 01 	call	0x220	; 0x220 <__divmodhi4>
  ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rxHead>
  f0:	82 2f       	mov	r24, r18
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <_Z16uartTransmitCharh>:
  f8:	48 2f       	mov	r20, r24
  fa:	eb e3       	ldi	r30, 0x3B	; 59
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <txHead>
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	bf 01       	movw	r22, r30
 10e:	0e 94 10 01 	call	0x220	; 0x220 <__divmodhi4>
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	99 f3       	breq	.-26     	; 0xfe <_Z16uartTransmitCharh+0x6>
 118:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ec 5f       	subi	r30, 0xFC	; 252
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	40 83       	st	Z, r20
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	6b e3       	ldi	r22, 0x3B	; 59
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 10 01 	call	0x220	; 0x220 <__divmodhi4>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 138:	e1 ec       	ldi	r30, 0xC1	; 193
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <__vector_18>:

ISR(USART_RX_vect)  // Code to be executed when a byte is recieved
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	//Read a byte from UDR and written to rxRingBuffer
	rxRingBuffer[rxTail] = UDR0;
 160:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <rxTail>
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 16a:	e1 5c       	subi	r30, 0xC1	; 193
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	80 83       	st	Z, r24
	rxTail = (rxTail+1)%BufferSize;
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxTail>
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	6b e3       	ldi	r22, 0x3B	; 59
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	0e 94 10 01 	call	0x220	; 0x220 <__divmodhi4>
 180:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rxTail>
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_19>:

ISR(USART_UDRE_vect) //Code to be executed when ready to transmit the next byte
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	5f 93       	push	r21
 1ac:	6f 93       	push	r22
 1ae:	7f 93       	push	r23
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	af 93       	push	r26
 1b6:	bf 93       	push	r27
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31

	//When ring buffer has some data
	if (txHead != txTail)
 1bc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <txHead>
 1c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c4:	98 17       	cp	r25, r24
 1c6:	c9 f0       	breq	.+50     	; 0x1fa <__vector_19+0x5a>
	{
		// A byte written to UDR from txRingBuffer and txHead pointed to next byte
		UDR0 = txRingBuffer[txHead];
 1c8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <txHead>
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ec 5f       	subi	r30, 0xFC	; 252
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	80 81       	ld	r24, Z
 1d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		txRingBuffer[txHead]=0;
 1d8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <txHead>
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ec 5f       	subi	r30, 0xFC	; 252
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	10 82       	st	Z, r1
		txHead = (txHead+1)%BufferSize;
 1e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <txHead>
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	6b e3       	ldi	r22, 0x3B	; 59
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 10 01 	call	0x220	; 0x220 <__divmodhi4>
 1f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <txHead>
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <__vector_19+0x64>
	}

	else UCSR0B &= ~(1<<UDRIE0); //Empty txBuffer, disable UDRE interrupt
 1fa:	e1 ec       	ldi	r30, 0xC1	; 193
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8f 7d       	andi	r24, 0xDF	; 223
 202:	80 83       	st	Z, r24

}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__divmodhi4>:
 220:	97 fb       	bst	r25, 7
 222:	07 2e       	mov	r0, r23
 224:	16 f4       	brtc	.+4      	; 0x22a <__divmodhi4+0xa>
 226:	00 94       	com	r0
 228:	07 d0       	rcall	.+14     	; 0x238 <__divmodhi4_neg1>
 22a:	77 fd       	sbrc	r23, 7
 22c:	09 d0       	rcall	.+18     	; 0x240 <__divmodhi4_neg2>
 22e:	0e 94 24 01 	call	0x248	; 0x248 <__udivmodhi4>
 232:	07 fc       	sbrc	r0, 7
 234:	05 d0       	rcall	.+10     	; 0x240 <__divmodhi4_neg2>
 236:	3e f4       	brtc	.+14     	; 0x246 <__divmodhi4_exit>

00000238 <__divmodhi4_neg1>:
 238:	90 95       	com	r25
 23a:	81 95       	neg	r24
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	08 95       	ret

00000240 <__divmodhi4_neg2>:
 240:	70 95       	com	r23
 242:	61 95       	neg	r22
 244:	7f 4f       	sbci	r23, 0xFF	; 255

00000246 <__divmodhi4_exit>:
 246:	08 95       	ret

00000248 <__udivmodhi4>:
 248:	aa 1b       	sub	r26, r26
 24a:	bb 1b       	sub	r27, r27
 24c:	51 e1       	ldi	r21, 0x11	; 17
 24e:	07 c0       	rjmp	.+14     	; 0x25e <__udivmodhi4_ep>

00000250 <__udivmodhi4_loop>:
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	a6 17       	cp	r26, r22
 256:	b7 07       	cpc	r27, r23
 258:	10 f0       	brcs	.+4      	; 0x25e <__udivmodhi4_ep>
 25a:	a6 1b       	sub	r26, r22
 25c:	b7 0b       	sbc	r27, r23

0000025e <__udivmodhi4_ep>:
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	5a 95       	dec	r21
 264:	a9 f7       	brne	.-22     	; 0x250 <__udivmodhi4_loop>
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	bc 01       	movw	r22, r24
 26c:	cd 01       	movw	r24, r26
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
