
ADC_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800064  00800064  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc1  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  00000fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000586  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042b  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000285b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	42 c0       	rjmp	.+132    	; 0x9c <__vector_11>
  18:	6a c0       	rjmp	.+212    	; 0xee <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e5       	ldi	r30, 0x58	; 88
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3a       	cpi	r26, 0xA9	; 169
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	15 d0       	rcall	.+42     	; 0x84 <main>
  5a:	fc c0       	rjmp	.+504    	; 0x254 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8ADC_initv>:
#include "ADC.h"
#define F_CPU 16000000UL

void ADC_init(){

	ADMUX  |= (0<<REFS1)|(0<<REFS0);            // External reference voltage from AREF
  5e:	87 b1       	in	r24, 0x07	; 7
  60:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN);                        // Enable ADC
  62:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // Pre-scale 128
  64:	86 b1       	in	r24, 0x06	; 6
  66:	87 60       	ori	r24, 0x07	; 7
  68:	86 b9       	out	0x06, r24	; 6
  6a:	08 95       	ret

0000006c <_Z10ADC_setPinh>:

}

void ADC_setPin(uint8_t pin){
	ADMUX |= (pin<<MUX0);						// Put the pin value to ADC Multiplexer Selection Register
  6c:	97 b1       	in	r25, 0x07	; 7
  6e:	89 2b       	or	r24, r25
  70:	87 b9       	out	0x07, r24	; 7
	DDRC  = 0;
  72:	14 ba       	out	0x14, r1	; 20
  74:	08 95       	ret

00000076 <_Z12ADC_getValuev>:
}

uint16_t ADC_getValue(void){

	ADCSRA |= (1<<ADSC);            // Start conversion
  76:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1<<ADIF)));  // Waiting for conversion to complete
  78:	34 9b       	sbis	0x06, 4	; 6
  7a:	fe cf       	rjmp	.-4      	; 0x78 <_Z12ADC_getValuev+0x2>
	
	ADCSRA |= (1<<ADIF);            // Clear ADIF flag for next conversion
  7c:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  7e:	84 b1       	in	r24, 0x04	; 4
  80:	95 b1       	in	r25, 0x05	; 5

  82:	08 95       	ret

00000084 <main>:
#define F_CPU 16000000UL


int main(void)
{   
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	57 d0       	rcall	.+174    	; 0x138 <_Z10uart0_initj>
        ADC_init();
  8a:	e9 df       	rcall	.-46     	; 0x5e <_Z8ADC_initv>
	ADC_setPin(1);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	ee df       	rcall	.-36     	; 0x6c <_Z10ADC_setPinh>

    while (1) 
    {
		int data = ADC_getValue();
  90:	f2 df       	rcall	.-28     	; 0x76 <_Z12ADC_getValuev>
		uart0_putint(data);
  92:	77 d0       	rcall	.+238    	; 0x182 <_Z12uart0_putinti>
		uart0_puts("\n \r");
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	9c d0       	rcall	.+312    	; 0x1d2 <_Z10uart0_putsPKc>
    }
  9a:	fa cf       	rjmp	.-12     	; 0x90 <main+0xc>

0000009c <__vector_11>:
	/* get data from receive buffer */
	data = UART0_RxBuf[tmptail];

	return (UART0_LastRxError << 8) + data;

}/* uart_getc */
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	2c b1       	in	r18, 0x0c	; 12
  b4:	88 71       	andi	r24, 0x18	; 24
  b6:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <_ZL12UART0_RxHead>
  ba:	ef 5f       	subi	r30, 0xFF	; 255
  bc:	ef 71       	andi	r30, 0x1F	; 31
  be:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <_ZL12UART0_RxTail>
  c2:	e9 17       	cp	r30, r25
  c4:	39 f0       	breq	.+14     	; 0xd4 <__vector_11+0x38>
  c6:	e0 93 66 00 	sts	0x0066, r30	; 0x800066 <_ZL12UART0_RxHead>
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	e7 59       	subi	r30, 0x97	; 151
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	20 83       	st	Z, r18
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <__vector_11+0x3a>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_12>:
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
 100:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <_ZL12UART0_TxHead>
 104:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <_ZL12UART0_TxTail>
 108:	98 17       	cp	r25, r24
 10a:	61 f0       	breq	.+24     	; 0x124 <__vector_12+0x36>
 10c:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <_ZL12UART0_TxTail>
 110:	ef 5f       	subi	r30, 0xFF	; 255
 112:	ef 71       	andi	r30, 0x1F	; 31
 114:	e0 93 67 00 	sts	0x0067, r30	; 0x800067 <_ZL12UART0_TxTail>
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e7 57       	subi	r30, 0x77	; 119
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	8c b9       	out	0x0c, r24	; 12
 122:	01 c0       	rjmp	.+2      	; 0x126 <__vector_12+0x38>
 124:	55 98       	cbi	0x0a, 5	; 10
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <_Z10uart0_initj>:
 138:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <_ZL12UART0_TxHead>
 13c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <_ZL12UART0_TxTail>
 140:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <_ZL12UART0_RxHead>
 144:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <_ZL12UART0_RxTail>
 148:	99 23       	and	r25, r25
 14a:	1c f4       	brge	.+6      	; 0x152 <_Z10uart0_initj+0x1a>
 14c:	22 e0       	ldi	r18, 0x02	; 2
 14e:	2b b9       	out	0x0b, r18	; 11
 150:	9f 77       	andi	r25, 0x7F	; 127
 152:	90 bd       	out	0x20, r25	; 32
 154:	89 b9       	out	0x09, r24	; 9
 156:	88 e9       	ldi	r24, 0x98	; 152
 158:	8a b9       	out	0x0a, r24	; 10
 15a:	86 e8       	ldi	r24, 0x86	; 134
 15c:	80 bd       	out	0x20, r24	; 32
 15e:	08 95       	ret

00000160 <_Z10uart0_putch>:
void uart0_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART0_TxHead + 1) & UART_TX_BUFFER_MASK;
 160:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <_ZL12UART0_TxHead>
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART0_TxTail) {
 168:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_ZL12UART0_TxTail>
 16c:	29 17       	cp	r18, r25
 16e:	e1 f3       	breq	.-8      	; 0x168 <_Z10uart0_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART0_TxBuf[tmphead] = data;
 170:	e2 2f       	mov	r30, r18
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e7 57       	subi	r30, 0x77	; 119
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 83       	st	Z, r24
	UART0_TxHead = tmphead;
 17a:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <_ZL12UART0_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL |= _BV(UART0_UDRIE);
 17e:	55 9a       	sbi	0x0a, 5	; 10
 180:	08 95       	ret

00000182 <_Z12uart0_putinti>:
 Purpose:  transmit integer to UART0
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_putint(int input)
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	2f 97       	sbiw	r28, 0x0f	; 15
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 19a:	4a e0       	ldi	r20, 0x0A	; 10
 19c:	be 01       	movw	r22, r28
 19e:	6f 5f       	subi	r22, 0xFF	; 255
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	25 d0       	rcall	.+74     	; 0x1ee <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	88 23       	and	r24, r24
 1a8:	49 f0       	breq	.+18     	; 0x1bc <_Z12uart0_putinti+0x3a>
 1aa:	8e 01       	movw	r16, r28
 1ac:	0e 5f       	subi	r16, 0xFE	; 254
 1ae:	1f 4f       	sbci	r17, 0xFF	; 255
	uart0_putc(*s++);
 1b0:	d7 df       	rcall	.-82     	; 0x160 <_Z10uart0_putch>
void uart0_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
 1b2:	f8 01       	movw	r30, r16
 1b4:	81 91       	ld	r24, Z+
 1b6:	8f 01       	movw	r16, r30
 1b8:	81 11       	cpse	r24, r1
 1ba:	fa cf       	rjmp	.-12     	; 0x1b0 <_Z12uart0_putinti+0x2e>
	uart0_putc(*s++);

	}/* uart0_putint */
 1bc:	2f 96       	adiw	r28, 0x0f	; 15
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <_Z10uart0_putsPKc>:
 Purpose:  transmit string to UART
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ec 01       	movw	r28, r24
	while (*s)
 1d8:	88 81       	ld	r24, Y
 1da:	88 23       	and	r24, r24
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <_Z10uart0_putsPKc+0x16>
 1de:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 1e0:	bf df       	rcall	.-130    	; 0x160 <_Z10uart0_putch>
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart0_puts(const char *s)
{
	while (*s)
 1e2:	89 91       	ld	r24, Y+
 1e4:	81 11       	cpse	r24, r1
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <_Z10uart0_putsPKc+0xe>
		uart0_putc(*s++);

}/* uart_puts */
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <__itoa_ncheck>:
 1ee:	bb 27       	eor	r27, r27
 1f0:	4a 30       	cpi	r20, 0x0A	; 10
 1f2:	31 f4       	brne	.+12     	; 0x200 <__itoa_ncheck+0x12>
 1f4:	99 23       	and	r25, r25
 1f6:	22 f4       	brpl	.+8      	; 0x200 <__itoa_ncheck+0x12>
 1f8:	bd e2       	ldi	r27, 0x2D	; 45
 1fa:	90 95       	com	r25
 1fc:	81 95       	neg	r24
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	01 c0       	rjmp	.+2      	; 0x204 <__utoa_common>

00000202 <__utoa_ncheck>:
 202:	bb 27       	eor	r27, r27

00000204 <__utoa_common>:
 204:	fb 01       	movw	r30, r22
 206:	55 27       	eor	r21, r21
 208:	aa 27       	eor	r26, r26
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	aa 1f       	adc	r26, r26
 210:	a4 17       	cp	r26, r20
 212:	10 f0       	brcs	.+4      	; 0x218 <__utoa_common+0x14>
 214:	a4 1b       	sub	r26, r20
 216:	83 95       	inc	r24
 218:	50 51       	subi	r21, 0x10	; 16
 21a:	b9 f7       	brne	.-18     	; 0x20a <__utoa_common+0x6>
 21c:	a0 5d       	subi	r26, 0xD0	; 208
 21e:	aa 33       	cpi	r26, 0x3A	; 58
 220:	08 f0       	brcs	.+2      	; 0x224 <__utoa_common+0x20>
 222:	a9 5d       	subi	r26, 0xD9	; 217
 224:	a1 93       	st	Z+, r26
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	79 f7       	brne	.-34     	; 0x208 <__utoa_common+0x4>
 22a:	b1 11       	cpse	r27, r1
 22c:	b1 93       	st	Z+, r27
 22e:	11 92       	st	Z+, r1
 230:	cb 01       	movw	r24, r22
 232:	00 c0       	rjmp	.+0      	; 0x234 <strrev>

00000234 <strrev>:
 234:	dc 01       	movw	r26, r24
 236:	fc 01       	movw	r30, r24
 238:	67 2f       	mov	r22, r23
 23a:	71 91       	ld	r23, Z+
 23c:	77 23       	and	r23, r23
 23e:	e1 f7       	brne	.-8      	; 0x238 <strrev+0x4>
 240:	32 97       	sbiw	r30, 0x02	; 2
 242:	04 c0       	rjmp	.+8      	; 0x24c <strrev+0x18>
 244:	7c 91       	ld	r23, X
 246:	6d 93       	st	X+, r22
 248:	70 83       	st	Z, r23
 24a:	62 91       	ld	r22, -Z
 24c:	ae 17       	cp	r26, r30
 24e:	bf 07       	cpc	r27, r31
 250:	c8 f3       	brcs	.-14     	; 0x244 <strrev+0x10>
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
