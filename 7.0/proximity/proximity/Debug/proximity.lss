
proximity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  0000024a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800222  00800222  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093c  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000326  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e9  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062c  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000249d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	aa c0       	rjmp	.+340    	; 0x1e6 <__vector_36>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	9c c0       	rjmp	.+312    	; 0x206 <__vector_51>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	a6 c0       	rjmp	.+332    	; 0x226 <__vector_54>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e4       	ldi	r30, 0x4A	; 74
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e2       	ldi	r26, 0x22	; 34
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 32       	cpi	r26, 0x26	; 38
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	92 c0       	rjmp	.+292    	; 0x246 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include <avr/io.h>
#include "uart.h"

int main(void)
{
	sei();
 124:	78 94       	sei
	initUART0();
 126:	2d d0       	rcall	.+90     	; 0x182 <_Z9initUART0v>
    DDRH = 0x00;
 128:	10 92 01 01 	sts	0x0101, r1
	DDRE = 0x00;
 12c:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	80 bb       	out	0x10, r24	; 16
	PORTH = 0xFF;
 132:	80 93 02 01 	sts	0x0102, r24
	PORTE = 0xFF;
 136:	8e b9       	out	0x0e, r24	; 14
    while (1) 
    {
		if (bit_is_set(PINH, 5))
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d1 e0       	ldi	r29, 0x01	; 1
		{
			PORTF = 0x0F;
 13c:	0f e0       	ldi	r16, 0x0F	; 15
			UART0TransmitString("P1 off \t");
			PORTF = 0x00;
		}
		if (bit_is_set(PINE, 3))
		{
			PORTF = 0xF0;
 13e:	10 ef       	ldi	r17, 0xF0	; 240
	DDRF = 0xFF;
	PORTH = 0xFF;
	PORTE = 0xFF;
    while (1) 
    {
		if (bit_is_set(PINH, 5))
 140:	88 81       	ld	r24, Y
 142:	85 ff       	sbrs	r24, 5
 144:	05 c0       	rjmp	.+10     	; 0x150 <main+0x2c>
		{
			PORTF = 0x0F;
 146:	01 bb       	out	0x11, r16	; 17
			UART0TransmitString("P1 on \t");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	2e d0       	rcall	.+92     	; 0x1aa <_Z19UART0TransmitStringPKc>
 14e:	04 c0       	rjmp	.+8      	; 0x158 <main+0x34>
		}
		else
		{
			UART0TransmitString("P1 off \t");
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	2a d0       	rcall	.+84     	; 0x1aa <_Z19UART0TransmitStringPKc>
			PORTF = 0x00;
 156:	11 ba       	out	0x11, r1	; 17
		}
		if (bit_is_set(PINE, 3))
 158:	63 9b       	sbis	0x0c, 3	; 12
 15a:	05 c0       	rjmp	.+10     	; 0x166 <main+0x42>
		{
			PORTF = 0xF0;
 15c:	11 bb       	out	0x11, r17	; 17
			UART0TransmitString("P2 on \n");
 15e:	81 e1       	ldi	r24, 0x11	; 17
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	23 d0       	rcall	.+70     	; 0x1aa <_Z19UART0TransmitStringPKc>
 164:	04 c0       	rjmp	.+8      	; 0x16e <main+0x4a>
		}
		else
		{
			PORTF = 0x00;
 166:	11 ba       	out	0x11, r1	; 17
			UART0TransmitString("P2 off \n");
 168:	89 e1       	ldi	r24, 0x19	; 25
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	1e d0       	rcall	.+60     	; 0x1aa <_Z19UART0TransmitStringPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	83 ec       	ldi	r24, 0xC3	; 195
 172:	99 e0       	ldi	r25, 0x09	; 9
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x50>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x5a>
 17e:	00 00       	nop
 180:	df cf       	rjmp	.-66     	; 0x140 <main+0x1c>

00000182 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
 182:	10 92 c5 00 	sts	0x00C5, r1
 186:	87 e6       	ldi	r24, 0x67	; 103
 188:	80 93 c4 00 	sts	0x00C4, r24
 18c:	88 e9       	ldi	r24, 0x98	; 152
 18e:	80 93 c1 00 	sts	0x00C1, r24
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	80 93 c2 00 	sts	0x00C2, r24
 198:	08 95       	ret

0000019a <_Z13UART0Transmith>:
 19a:	e0 ec       	ldi	r30, 0xC0	; 192
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	90 81       	ld	r25, Z
 1a0:	95 ff       	sbrs	r25, 5
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <_Z13UART0Transmith+0x4>
 1a4:	80 93 c6 00 	sts	0x00C6, r24
 1a8:	08 95       	ret

000001aa <_Z19UART0TransmitStringPKc>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
 1b0:	88 81       	ld	r24, Y
 1b2:	88 23       	and	r24, r24
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <_Z19UART0TransmitStringPKc+0x16>
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	f0 df       	rcall	.-32     	; 0x19a <_Z13UART0Transmith>
 1ba:	89 91       	ld	r24, Y+
 1bc:	81 11       	cpse	r24, r1
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <_Z19UART0TransmitStringPKc+0xe>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <__vector_25>:

ISR(USART0_RX_vect)
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	8f 93       	push	r24
	buffer=UDR0;
 1d2:	80 91 c6 00 	lds	r24, 0x00C6
 1d6:	80 93 25 02 	sts	0x0225, r24
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_36>:

ISR(USART1_RX_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
	buffer1=UDR1;
 1f2:	80 91 ce 00 	lds	r24, 0x00CE
 1f6:	80 93 24 02 	sts	0x0224, r24
	
}
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <__vector_51>:

ISR(USART2_RX_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
	buffer2=UDR2;
 212:	80 91 d6 00 	lds	r24, 0x00D6
 216:	80 93 22 02 	sts	0x0222, r24
	
		
}
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_54>:
ISR(USART3_RX_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	8f 93       	push	r24
	buffer3=UDR3;
 232:	80 91 36 01 	lds	r24, 0x0136
 236:	80 93 23 02 	sts	0x0223, r24
}
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
