
MPU6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800100  00800100  00000cec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ce  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b77  00000000  00000000  0000234a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f7  00000000  00000000  00002ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094d  00000000  00000000  00003b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b6b  00000000  00000000  000044d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_18>
  4c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	aa 3a       	cpi	r26, 0xAA	; 170
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 05 02 	call	0x40a	; 0x40a <main>
  b6:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z10getRawDatav>:
}

float getTemperature()
{
	return 	(Temperature/340.00)+36.53;
}
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	80 ed       	ldi	r24, 0xD0	; 208
  c6:	0e 94 1a 02 	call	0x434	; 0x434 <_Z9twi_starth>
  ca:	8b e3       	ldi	r24, 0x3B	; 59
  cc:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
  d0:	81 ed       	ldi	r24, 0xD1	; 209
  d2:	0e 94 1a 02 	call	0x434	; 0x434 <_Z9twi_starth>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
  dc:	18 2f       	mov	r17, r24
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
  e4:	c5 e2       	ldi	r28, 0x25	; 37
  e6:	d1 e0       	ldi	r29, 0x01	; 1
  e8:	61 2f       	mov	r22, r17
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	76 2f       	mov	r23, r22
  ee:	66 27       	eor	r22, r22
  f0:	68 2b       	or	r22, r24
  f2:	07 2e       	mov	r0, r23
  f4:	00 0c       	add	r0, r0
  f6:	88 0b       	sbc	r24, r24
  f8:	99 0b       	sbc	r25, r25
  fa:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
  fe:	68 83       	st	Y, r22
 100:	79 83       	std	Y+1, r23	; 0x01
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	9b 83       	std	Y+3, r25	; 0x03
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 10c:	18 2f       	mov	r17, r24
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 114:	61 2f       	mov	r22, r17
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	76 2f       	mov	r23, r22
 11a:	66 27       	eor	r22, r22
 11c:	68 2b       	or	r22, r24
 11e:	07 2e       	mov	r0, r23
 120:	00 0c       	add	r0, r0
 122:	88 0b       	sbc	r24, r24
 124:	99 0b       	sbc	r25, r25
 126:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
 12a:	6c 83       	std	Y+4, r22	; 0x04
 12c:	7d 83       	std	Y+5, r23	; 0x05
 12e:	8e 83       	std	Y+6, r24	; 0x06
 130:	9f 83       	std	Y+7, r25	; 0x07
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 138:	18 2f       	mov	r17, r24
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 140:	61 2f       	mov	r22, r17
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	76 2f       	mov	r23, r22
 146:	66 27       	eor	r22, r22
 148:	68 2b       	or	r22, r24
 14a:	07 2e       	mov	r0, r23
 14c:	00 0c       	add	r0, r0
 14e:	88 0b       	sbc	r24, r24
 150:	99 0b       	sbc	r25, r25
 152:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
 156:	68 87       	std	Y+8, r22	; 0x08
 158:	79 87       	std	Y+9, r23	; 0x09
 15a:	8a 87       	std	Y+10, r24	; 0x0a
 15c:	9b 87       	std	Y+11, r25	; 0x0b
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 164:	c8 2f       	mov	r28, r24
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 16c:	6c 2f       	mov	r22, r28
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	76 2f       	mov	r23, r22
 172:	66 27       	eor	r22, r22
 174:	68 2b       	or	r22, r24
 176:	07 2e       	mov	r0, r23
 178:	00 0c       	add	r0, r0
 17a:	88 0b       	sbc	r24, r24
 17c:	99 0b       	sbc	r25, r25
 17e:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
 182:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 186:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 18a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_edata+0x2>
 18e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_edata+0x3>
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 198:	18 2f       	mov	r17, r24
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 1a0:	cd e0       	ldi	r28, 0x0D	; 13
 1a2:	d1 e0       	ldi	r29, 0x01	; 1
 1a4:	61 2f       	mov	r22, r17
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	76 2f       	mov	r23, r22
 1aa:	66 27       	eor	r22, r22
 1ac:	68 2b       	or	r22, r24
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
 1ba:	68 83       	st	Y, r22
 1bc:	79 83       	std	Y+1, r23	; 0x01
 1be:	8a 83       	std	Y+2, r24	; 0x02
 1c0:	9b 83       	std	Y+3, r25	; 0x03
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 1c8:	18 2f       	mov	r17, r24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 1d0:	61 2f       	mov	r22, r17
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	76 2f       	mov	r23, r22
 1d6:	66 27       	eor	r22, r22
 1d8:	68 2b       	or	r22, r24
 1da:	07 2e       	mov	r0, r23
 1dc:	00 0c       	add	r0, r0
 1de:	88 0b       	sbc	r24, r24
 1e0:	99 0b       	sbc	r25, r25
 1e2:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
 1e6:	6c 83       	std	Y+4, r22	; 0x04
 1e8:	7d 83       	std	Y+5, r23	; 0x05
 1ea:	8e 83       	std	Y+6, r24	; 0x06
 1ec:	9f 83       	std	Y+7, r25	; 0x07
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 1f4:	18 2f       	mov	r17, r24
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 3f 02 	call	0x47e	; 0x47e <_Z8twi_readh>
 1fc:	61 2f       	mov	r22, r17
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	76 2f       	mov	r23, r22
 202:	66 27       	eor	r22, r22
 204:	68 2b       	or	r22, r24
 206:	07 2e       	mov	r0, r23
 208:	00 0c       	add	r0, r0
 20a:	88 0b       	sbc	r24, r24
 20c:	99 0b       	sbc	r25, r25
 20e:	0e 94 b1 04 	call	0x962	; 0x962 <__floatsisf>
 212:	68 87       	std	Y+8, r22	; 0x08
 214:	79 87       	std	Y+9, r23	; 0x09
 216:	8a 87       	std	Y+10, r24	; 0x0a
 218:	9b 87       	std	Y+11, r25	; 0x0b
 21a:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8twi_stopv>
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <_Z13getAccelAnglev>:
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z10getRawDatav>
 23a:	05 e2       	ldi	r16, 0x25	; 37
 23c:	11 e0       	ldi	r17, 0x01	; 1
 23e:	f8 01       	movw	r30, r16
 240:	c0 84       	ldd	r12, Z+8	; 0x08
 242:	d1 84       	ldd	r13, Z+9	; 0x09
 244:	e2 84       	ldd	r14, Z+10	; 0x0a
 246:	f3 84       	ldd	r15, Z+11	; 0x0b
 248:	64 81       	ldd	r22, Z+4	; 0x04
 24a:	75 81       	ldd	r23, Z+5	; 0x05
 24c:	86 81       	ldd	r24, Z+6	; 0x06
 24e:	97 81       	ldd	r25, Z+7	; 0x07
 250:	a7 01       	movw	r20, r14
 252:	96 01       	movw	r18, r12
 254:	0e 94 a8 03 	call	0x750	; 0x750 <atan2>
 258:	c9 e1       	ldi	r28, 0x19	; 25
 25a:	d1 e0       	ldi	r29, 0x01	; 1
 25c:	24 e1       	ldi	r18, 0x14	; 20
 25e:	3e e2       	ldi	r19, 0x2E	; 46
 260:	45 e6       	ldi	r20, 0x65	; 101
 262:	52 e4       	ldi	r21, 0x42	; 66
 264:	0e 94 6c 05 	call	0xad8	; 0xad8 <__mulsf3>
 268:	68 83       	st	Y, r22
 26a:	79 83       	std	Y+1, r23	; 0x01
 26c:	8a 83       	std	Y+2, r24	; 0x02
 26e:	9b 83       	std	Y+3, r25	; 0x03
 270:	f8 01       	movw	r30, r16
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	a2 81       	ldd	r26, Z+2	; 0x02
 278:	b3 81       	ldd	r27, Z+3	; 0x03
 27a:	bc 01       	movw	r22, r24
 27c:	cd 01       	movw	r24, r26
 27e:	90 58       	subi	r25, 0x80	; 128
 280:	a7 01       	movw	r20, r14
 282:	96 01       	movw	r18, r12
 284:	0e 94 a8 03 	call	0x750	; 0x750 <atan2>
 288:	24 e1       	ldi	r18, 0x14	; 20
 28a:	3e e2       	ldi	r19, 0x2E	; 46
 28c:	45 e6       	ldi	r20, 0x65	; 101
 28e:	52 e4       	ldi	r21, 0x42	; 66
 290:	0e 94 6c 05 	call	0xad8	; 0xad8 <__mulsf3>
 294:	6c 83       	std	Y+4, r22	; 0x04
 296:	7d 83       	std	Y+5, r23	; 0x05
 298:	8e 83       	std	Y+6, r24	; 0x06
 29a:	9f 83       	std	Y+7, r25	; 0x07
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	df 90       	pop	r13
 2aa:	cf 90       	pop	r12
 2ac:	08 95       	ret

000002ae <_ZN12mpuConfigure15gyroRangeConfigEh>:


void mpuConfigure::gyroRangeConfig(unsigned char Value)
{
 2ae:	cf 93       	push	r28
 2b0:	c6 2f       	mov	r28, r22
	unsigned char tempRegister = 0x00 ;
	tempRegister |= (Value<<4);

	twi_start(0xD0);
 2b2:	80 ed       	ldi	r24, 0xD0	; 208
 2b4:	0e 94 1a 02 	call	0x434	; 0x434 <_Z9twi_starth>
	twi_write(MPU6050_GYRO_CONFIG);
 2b8:	8b e1       	ldi	r24, 0x1B	; 27
 2ba:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
	twi_write(tempRegister);
 2be:	8c 2f       	mov	r24, r28
 2c0:	82 95       	swap	r24
 2c2:	80 7f       	andi	r24, 0xF0	; 240
 2c4:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
	twi_stop();
 2c8:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8twi_stopv>

	switch(Value)
 2cc:	c1 30       	cpi	r28, 0x01	; 1
 2ce:	99 f0       	breq	.+38     	; 0x2f6 <_ZN12mpuConfigure15gyroRangeConfigEh+0x48>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <_ZN12mpuConfigure15gyroRangeConfigEh+0x2e>
 2d2:	c2 30       	cpi	r28, 0x02	; 2
 2d4:	e9 f0       	breq	.+58     	; 0x310 <_ZN12mpuConfigure15gyroRangeConfigEh+0x62>
 2d6:	c3 30       	cpi	r28, 0x03	; 3
 2d8:	41 f1       	breq	.+80     	; 0x32a <_ZN12mpuConfigure15gyroRangeConfigEh+0x7c>
 2da:	33 c0       	rjmp	.+102    	; 0x342 <_ZN12mpuConfigure15gyroRangeConfigEh+0x94>
	{
		case 0x00: gyroSensitivity = 131; // +-250deg/sec -> 41.667rpm
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	a3 e0       	ldi	r26, 0x03	; 3
 2e2:	b3 e4       	ldi	r27, 0x43	; 67
 2e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gyroSensitivity>
 2e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gyroSensitivity+0x1>
 2ec:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <gyroSensitivity+0x2>
 2f0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <gyroSensitivity+0x3>
		break;
 2f4:	26 c0       	rjmp	.+76     	; 0x342 <_ZN12mpuConfigure15gyroRangeConfigEh+0x94>
		
		case 0x01: gyroSensitivity = 65.5;	//+-500deg/sec -> 83.33rpm
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	a3 e8       	ldi	r26, 0x83	; 131
 2fc:	b2 e4       	ldi	r27, 0x42	; 66
 2fe:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gyroSensitivity>
 302:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gyroSensitivity+0x1>
 306:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <gyroSensitivity+0x2>
 30a:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <gyroSensitivity+0x3>
		break;
 30e:	19 c0       	rjmp	.+50     	; 0x342 <_ZN12mpuConfigure15gyroRangeConfigEh+0x94>
		
		case 0x02: gyroSensitivity = 32.8;	//+-1000deg/sec -> 166.67rpm
 310:	83 e3       	ldi	r24, 0x33	; 51
 312:	93 e3       	ldi	r25, 0x33	; 51
 314:	a3 e0       	ldi	r26, 0x03	; 3
 316:	b2 e4       	ldi	r27, 0x42	; 66
 318:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gyroSensitivity>
 31c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gyroSensitivity+0x1>
 320:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <gyroSensitivity+0x2>
 324:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <gyroSensitivity+0x3>
		break;
 328:	0c c0       	rjmp	.+24     	; 0x342 <_ZN12mpuConfigure15gyroRangeConfigEh+0x94>
		
		case 0x03: gyroSensitivity = 16.4;	//+-2000deg/sec -> 333.33rpm
 32a:	83 e3       	ldi	r24, 0x33	; 51
 32c:	93 e3       	ldi	r25, 0x33	; 51
 32e:	a3 e8       	ldi	r26, 0x83	; 131
 330:	b1 e4       	ldi	r27, 0x41	; 65
 332:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gyroSensitivity>
 336:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gyroSensitivity+0x1>
 33a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <gyroSensitivity+0x2>
 33e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <gyroSensitivity+0x3>
		break;
	}
	//A trade-off between sensitivity and RPM.The unit of sensitivity is LSB/degree/sec.
	//For first case value 131 in the register is 1deg/sec rotation.
}
 342:	cf 91       	pop	r28
 344:	08 95       	ret

00000346 <_ZN12mpuConfigure16accelRangeConfigEh>:

void mpuConfigure::accelRangeConfig(unsigned char value)
{
 346:	cf 93       	push	r28
 348:	c6 2f       	mov	r28, r22
	unsigned char tempRegister = 0x00 ;
	tempRegister |= (value<<4);

	twi_start(MPU6050_WRITE);
 34a:	80 ed       	ldi	r24, 0xD0	; 208
 34c:	0e 94 1a 02 	call	0x434	; 0x434 <_Z9twi_starth>
	twi_write(MPU6050_ACCEL_CONFIG);
 350:	8c e1       	ldi	r24, 0x1C	; 28
 352:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
	twi_write(tempRegister);
 356:	8c 2f       	mov	r24, r28
 358:	82 95       	swap	r24
 35a:	80 7f       	andi	r24, 0xF0	; 240
 35c:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
	twi_stop();
 360:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8twi_stopv>

	switch (value)
 364:	c1 30       	cpi	r28, 0x01	; 1
 366:	99 f0       	breq	.+38     	; 0x38e <_ZN12mpuConfigure16accelRangeConfigEh+0x48>
 368:	28 f0       	brcs	.+10     	; 0x374 <_ZN12mpuConfigure16accelRangeConfigEh+0x2e>
 36a:	c2 30       	cpi	r28, 0x02	; 2
 36c:	e9 f0       	breq	.+58     	; 0x3a8 <_ZN12mpuConfigure16accelRangeConfigEh+0x62>
 36e:	c3 30       	cpi	r28, 0x03	; 3
 370:	41 f1       	breq	.+80     	; 0x3c2 <_ZN12mpuConfigure16accelRangeConfigEh+0x7c>
 372:	33 c0       	rjmp	.+102    	; 0x3da <_ZN12mpuConfigure16accelRangeConfigEh+0x94>
	{
		case 0x00: accelSensitivity = 16384.0;   //+-2g
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	a0 e8       	ldi	r26, 0x80	; 128
 37a:	b6 e4       	ldi	r27, 0x46	; 70
 37c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <accelSensitivity>
 380:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <accelSensitivity+0x1>
 384:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <accelSensitivity+0x2>
 388:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <accelSensitivity+0x3>
		break;
 38c:	26 c0       	rjmp	.+76     	; 0x3da <_ZN12mpuConfigure16accelRangeConfigEh+0x94>
		
		case 0x01: accelSensitivity = 8192.0;   //+-4g
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	a0 e0       	ldi	r26, 0x00	; 0
 394:	b6 e4       	ldi	r27, 0x46	; 70
 396:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <accelSensitivity>
 39a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <accelSensitivity+0x1>
 39e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <accelSensitivity+0x2>
 3a2:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <accelSensitivity+0x3>
		break;
 3a6:	19 c0       	rjmp	.+50     	; 0x3da <_ZN12mpuConfigure16accelRangeConfigEh+0x94>

		case 0x02: accelSensitivity = 4096.0;    //+-8g
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	a0 e8       	ldi	r26, 0x80	; 128
 3ae:	b5 e4       	ldi	r27, 0x45	; 69
 3b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <accelSensitivity>
 3b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <accelSensitivity+0x1>
 3b8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <accelSensitivity+0x2>
 3bc:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <accelSensitivity+0x3>
		break;
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <_ZN12mpuConfigure16accelRangeConfigEh+0x94>

		case 0x03: accelSensitivity = 2048.0;    //+-16g
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	b5 e4       	ldi	r27, 0x45	; 69
 3ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <accelSensitivity>
 3ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <accelSensitivity+0x1>
 3d2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <accelSensitivity+0x2>
 3d6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <accelSensitivity+0x3>
		break;

	}
	//The unit of sensitivity is LSB/g => for first case the value 16384 from register = 1 gravity force !!

}
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <_Z13mpuInitializev>:

void mpuInitialize()
{
	twi_start(MPU6050_WRITE);
 3de:	80 ed       	ldi	r24, 0xD0	; 208
 3e0:	0e 94 1a 02 	call	0x434	; 0x434 <_Z9twi_starth>
	twi_write(MPU6050_PWR_MGMT_1);
 3e4:	8b e6       	ldi	r24, 0x6B	; 107
 3e6:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
	twi_write(0x00);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z9twi_writeh>
	twi_stop();
 3f0:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8twi_stopv>

	MPU6050config.gyroRangeConfig(3);
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN12mpuConfigure15gyroRangeConfigEh>
	MPU6050config.accelRangeConfig(0);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	8c e0       	ldi	r24, 0x0C	; 12
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 a3 01 	call	0x346	; 0x346 <_ZN12mpuConfigure16accelRangeConfigEh>
 408:	08 95       	ret

0000040a <main>:
 


int main()
{
 uartInitialize();
 40a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_Z14uartInitializev>
  mpuInitialize();
 40e:	0e 94 ef 01 	call	0x3de	; 0x3de <_Z13mpuInitializev>
 	
  while (1)
  {
     getAccelAngle();

     uartTransmitInteger(accelAngle.YAxis);
 412:	c9 e1       	ldi	r28, 0x19	; 25
 414:	d1 e0       	ldi	r29, 0x01	; 1
 uartInitialize();
  mpuInitialize();
 	
  while (1)
  {
     getAccelAngle();
 416:	0e 94 13 01 	call	0x226	; 0x226 <_Z13getAccelAnglev>

     uartTransmitInteger(accelAngle.YAxis);
 41a:	6c 81       	ldd	r22, Y+4	; 0x04
 41c:	7d 81       	ldd	r23, Y+5	; 0x05
 41e:	8e 81       	ldd	r24, Y+6	; 0x06
 420:	9f 81       	ldd	r25, Y+7	; 0x07
 422:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fixsfsi>
 426:	cb 01       	movw	r24, r22
 428:	0e 94 90 02 	call	0x520	; 0x520 <_Z19uartTransmitIntegeri>
     uartTransmitChar('\n');
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z16uartTransmitCharh>
#include "UART.h"
#include "Complementary_Filter.h"
 


int main()
 432:	f1 cf       	rjmp	.-30     	; 0x416 <main+0xc>

00000434 <_Z9twi_starth>:
{


	TWCR = 	(1 << TWEN)  |				      //  Activate the TWI interface.
		(1 << TWINT) |                                //  Clear the interrupt flag
	        (0 << TWEA)  | (1 << TWSTA) | (0 << TWSTO);   //  Check the bus and generate START condition if bus is free.
 434:	94 ea       	ldi	r25, 0xA4	; 164
 436:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while (!(TWCR & (1<<TWINT)));                         // Wait for end of transmission
 43a:	ec eb       	ldi	r30, 0xBC	; 188
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	90 81       	ld	r25, Z
 440:	99 23       	and	r25, r25
 442:	ec f7       	brge	.-6      	; 0x43e <_Z9twi_starth+0xa>

	if(((kTWstatus & 0xF8) != kstart))  twi_error();	// Check 'Start Condition' transmission (Reset: 0xF8)
 444:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWDR = adress ;                                      // Loads slave address once start condition transmitted
 448:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT)|(1<<TWEN);                          // Clear flag set during completion of above transmission
 44c:	84 e8       	ldi	r24, 0x84	; 132
 44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));			      // Wait for end of transmission
 452:	ec eb       	ldi	r30, 0xBC	; 188
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	88 23       	and	r24, r24
 45a:	ec f7       	brge	.-6      	; 0x456 <_Z9twi_starth+0x22>
	 
	if (((kTWstatus & 0xF8) != kslave_addr) && ((kTWstatus & 0xF8) !=ksalve_addw )) twi_error();  //Check TWSR ifslave has acknowledged R/W mode 
 45c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 460:	88 7f       	andi	r24, 0xF8	; 248
 462:	80 34       	cpi	r24, 0x40	; 64
 464:	11 f0       	breq	.+4      	; 0x46a <_Z9twi_starth+0x36>
 466:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 46a:	08 95       	ret

0000046c <_Z8twi_stopv>:
*/
void twi_stop(void)
{
	TWCR = (1 << TWEN)  |                               // Enable TWI interface
	       (1 << TWINT) |                               // Clear Interrupt flag
	       (0 << TWEA)  | (0 << TWSTA) | (1 << TWSTO);  // Generate STOP condition
 46c:	84 e9       	ldi	r24, 0x94	; 148
 46e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	while(TWCR & (1<<TWSTO));
 472:	ec eb       	ldi	r30, 0xBC	; 188
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	84 fd       	sbrc	r24, 4
 47a:	fd cf       	rjmp	.-6      	; 0x476 <_Z8twi_stopv+0xa>
}
 47c:	08 95       	ret

0000047e <_Z8twi_readh>:
  */
unsigned char twi_read(unsigned char ack)
{
		TWCR = (1 << TWEN)  |                          // Start TWI
		       (1 << TWINT) |                                 // Clear interrupt flag
		      (ack << TWEA) | (0 << TWSTA) | (0 << TWSTO);  //  Acknowledge data on reception	if ack =1 else do not acknowledge
 47e:	20 e4       	ldi	r18, 0x40	; 64
 480:	82 9f       	mul	r24, r18
 482:	c0 01       	movw	r24, r0
 484:	11 24       	eor	r1, r1
 486:	84 68       	ori	r24, 0x84	; 132
 488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>


	while (!(TWCR & (1<<TWINT)));           // Wait until data is read
 48c:	ec eb       	ldi	r30, 0xBC	; 188
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	88 23       	and	r24, r24
 494:	ec f7       	brge	.-6      	; 0x490 <_Z8twi_readh+0x12>
	return TWDR;                            // Return received data
 496:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
 49a:	08 95       	ret

0000049c <_Z9twi_writeh>:
/*
 *  Send data to previously addressed device
 */
void twi_write( uint8_t value )
{
	TWDR = value;                                 // Load data to TWDR to send to the addressed device
 49c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);                // Clear TWINT bit in TWCR to start transmission of data
 4a0:	84 e8       	ldi	r24, 0x84	; 132
 4a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        while(!(TWCR & (1<<TWINT)));	              // Wait for TWINT flag set i.e. until transmission completed
 4a6:	ec eb       	ldi	r30, 0xBC	; 188
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	88 23       	and	r24, r24
 4ae:	ec f7       	brge	.-6      	; 0x4aa <_Z9twi_writeh+0xe>

	if( (kTWstatus & 0xF8) != kdata) twi_error(); // If status different from data_ack, error();
 4b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4b4:	08 95       	ret

000004b6 <_Z14uartInitializev>:
	
	uartTransmitInteger(tempInteger);
	uartTransmitChar('.');
	uartTransmitInteger(temp2Integer);

}
 4b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4ba:	87 e6       	ldi	r24, 0x67	; 103
 4bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4c0:	e1 ec       	ldi	r30, 0xC1	; 193
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	88 69       	ori	r24, 0x98	; 152
 4c8:	80 83       	st	Z, r24
 4ca:	8e e0       	ldi	r24, 0x0E	; 14
 4cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 4d0:	78 94       	sei
 4d2:	08 95       	ret

000004d4 <_Z16uartTransmitCharh>:
 4d4:	48 2f       	mov	r20, r24
 4d6:	eb e3       	ldi	r30, 0x3B	; 59
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <txHead>
 4de:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <txTail>
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	bf 01       	movw	r22, r30
 4ea:	0e 94 dd 05 	call	0xbba	; 0xbba <__divmodhi4>
 4ee:	28 17       	cp	r18, r24
 4f0:	39 07       	cpc	r19, r25
 4f2:	99 f3       	breq	.-26     	; 0x4da <_Z16uartTransmitCharh+0x6>
 4f4:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <txTail>
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	ec 5c       	subi	r30, 0xCC	; 204
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	40 83       	st	Z, r20
 500:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <txTail>
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	6b e3       	ldi	r22, 0x3B	; 59
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	0e 94 dd 05 	call	0xbba	; 0xbba <__divmodhi4>
 510:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <txTail>
 514:	e1 ec       	ldi	r30, 0xC1	; 193
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	80 81       	ld	r24, Z
 51a:	80 62       	ori	r24, 0x20	; 32
 51c:	80 83       	st	Z, r24
 51e:	08 95       	ret

00000520 <_Z19uartTransmitIntegeri>:
 520:	0f 93       	push	r16
 522:	1f 93       	push	r17
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	2f 97       	sbiw	r28, 0x0f	; 15
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	be 01       	movw	r22, r28
 53c:	6f 5f       	subi	r22, 0xFF	; 255
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	0e 94 05 06 	call	0xc0a	; 0xc0a <__itoa_ncheck>
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	88 23       	and	r24, r24
 548:	51 f0       	breq	.+20     	; 0x55e <_Z19uartTransmitIntegeri+0x3e>
 54a:	8e 01       	movw	r16, r28
 54c:	0e 5f       	subi	r16, 0xFE	; 254
 54e:	1f 4f       	sbci	r17, 0xFF	; 255
 550:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z16uartTransmitCharh>
 554:	f8 01       	movw	r30, r16
 556:	81 91       	ld	r24, Z+
 558:	8f 01       	movw	r16, r30
 55a:	81 11       	cpse	r24, r1
 55c:	f9 cf       	rjmp	.-14     	; 0x550 <_Z19uartTransmitIntegeri+0x30>
 55e:	2f 96       	adiw	r28, 0x0f	; 15
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <__vector_18>:


ISR(USART_RX_vect)  // Code to be executed when a byte is recieved
{
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	5f 93       	push	r21
 580:	6f 93       	push	r22
 582:	7f 93       	push	r23
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	af 93       	push	r26
 58a:	bf 93       	push	r27
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	//Read a byte from UDR and written to rxRingBuffer
	rxRingBuffer[rxTail] = UDR0;
 590:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <rxTail>
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 59a:	e1 59       	subi	r30, 0x91	; 145
 59c:	fe 4f       	sbci	r31, 0xFE	; 254
 59e:	80 83       	st	Z, r24
	rxTail = (rxTail+1)%BufferSize;
 5a0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rxTail>
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	6b e3       	ldi	r22, 0x3B	; 59
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	0e 94 dd 05 	call	0xbba	; 0xbba <__divmodhi4>
 5b0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <rxTail>
}
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	bf 91       	pop	r27
 5ba:	af 91       	pop	r26
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	7f 91       	pop	r23
 5c2:	6f 91       	pop	r22
 5c4:	5f 91       	pop	r21
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__vector_19>:

ISR(USART_UDRE_vect) //Code to be executed when ready to transmit the next byte
{
 5d0:	1f 92       	push	r1
 5d2:	0f 92       	push	r0
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	0f 92       	push	r0
 5d8:	11 24       	eor	r1, r1
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31

	//When ring buffer has some data
	if (txHead != txTail)
 5ec:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <txHead>
 5f0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <txTail>
 5f4:	98 17       	cp	r25, r24
 5f6:	c9 f0       	breq	.+50     	; 0x62a <__vector_19+0x5a>
	{
		// A byte written to UDR from txRingBuffer and txHead pointed to next byte
		UDR0 = txRingBuffer[txHead];
 5f8:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <txHead>
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	ec 5c       	subi	r30, 0xCC	; 204
 600:	fe 4f       	sbci	r31, 0xFE	; 254
 602:	80 81       	ld	r24, Z
 604:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		txRingBuffer[txHead]=0;
 608:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <txHead>
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	ec 5c       	subi	r30, 0xCC	; 204
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	10 82       	st	Z, r1
		txHead = (txHead+1)%BufferSize;
 614:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <txHead>
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	6b e3       	ldi	r22, 0x3B	; 59
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	0e 94 dd 05 	call	0xbba	; 0xbba <__divmodhi4>
 624:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <txHead>
 628:	05 c0       	rjmp	.+10     	; 0x634 <__vector_19+0x64>
	}

	else UCSR0B &= ~(1<<UDRIE0); //Empty txBuffer, disable UDRE interrupt
 62a:	e1 ec       	ldi	r30, 0xC1	; 193
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	8f 7d       	andi	r24, 0xDF	; 223
 632:	80 83       	st	Z, r24

}
 634:	ff 91       	pop	r31
 636:	ef 91       	pop	r30
 638:	bf 91       	pop	r27
 63a:	af 91       	pop	r26
 63c:	9f 91       	pop	r25
 63e:	8f 91       	pop	r24
 640:	7f 91       	pop	r23
 642:	6f 91       	pop	r22
 644:	5f 91       	pop	r21
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__subsf3>:
 650:	50 58       	subi	r21, 0x80	; 128

00000652 <__addsf3>:
 652:	bb 27       	eor	r27, r27
 654:	aa 27       	eor	r26, r26
 656:	0e 94 40 03 	call	0x680	; 0x680 <__addsf3x>
 65a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
 65e:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
 662:	38 f0       	brcs	.+14     	; 0x672 <__addsf3+0x20>
 664:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
 668:	20 f0       	brcs	.+8      	; 0x672 <__addsf3+0x20>
 66a:	39 f4       	brne	.+14     	; 0x67a <__addsf3+0x28>
 66c:	9f 3f       	cpi	r25, 0xFF	; 255
 66e:	19 f4       	brne	.+6      	; 0x676 <__addsf3+0x24>
 670:	26 f4       	brtc	.+8      	; 0x67a <__addsf3+0x28>
 672:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_nan>
 676:	0e f4       	brtc	.+2      	; 0x67a <__addsf3+0x28>
 678:	e0 95       	com	r30
 67a:	e7 fb       	bst	r30, 7
 67c:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_inf>

00000680 <__addsf3x>:
 680:	e9 2f       	mov	r30, r25
 682:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
 686:	58 f3       	brcs	.-42     	; 0x65e <__addsf3+0xc>
 688:	ba 17       	cp	r27, r26
 68a:	62 07       	cpc	r22, r18
 68c:	73 07       	cpc	r23, r19
 68e:	84 07       	cpc	r24, r20
 690:	95 07       	cpc	r25, r21
 692:	20 f0       	brcs	.+8      	; 0x69c <__addsf3x+0x1c>
 694:	79 f4       	brne	.+30     	; 0x6b4 <__addsf3x+0x34>
 696:	a6 f5       	brtc	.+104    	; 0x700 <__addsf3x+0x80>
 698:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_zero>
 69c:	0e f4       	brtc	.+2      	; 0x6a0 <__addsf3x+0x20>
 69e:	e0 95       	com	r30
 6a0:	0b 2e       	mov	r0, r27
 6a2:	ba 2f       	mov	r27, r26
 6a4:	a0 2d       	mov	r26, r0
 6a6:	0b 01       	movw	r0, r22
 6a8:	b9 01       	movw	r22, r18
 6aa:	90 01       	movw	r18, r0
 6ac:	0c 01       	movw	r0, r24
 6ae:	ca 01       	movw	r24, r20
 6b0:	a0 01       	movw	r20, r0
 6b2:	11 24       	eor	r1, r1
 6b4:	ff 27       	eor	r31, r31
 6b6:	59 1b       	sub	r21, r25
 6b8:	99 f0       	breq	.+38     	; 0x6e0 <__addsf3x+0x60>
 6ba:	59 3f       	cpi	r21, 0xF9	; 249
 6bc:	50 f4       	brcc	.+20     	; 0x6d2 <__addsf3x+0x52>
 6be:	50 3e       	cpi	r21, 0xE0	; 224
 6c0:	68 f1       	brcs	.+90     	; 0x71c <__addsf3x+0x9c>
 6c2:	1a 16       	cp	r1, r26
 6c4:	f0 40       	sbci	r31, 0x00	; 0
 6c6:	a2 2f       	mov	r26, r18
 6c8:	23 2f       	mov	r18, r19
 6ca:	34 2f       	mov	r19, r20
 6cc:	44 27       	eor	r20, r20
 6ce:	58 5f       	subi	r21, 0xF8	; 248
 6d0:	f3 cf       	rjmp	.-26     	; 0x6b8 <__addsf3x+0x38>
 6d2:	46 95       	lsr	r20
 6d4:	37 95       	ror	r19
 6d6:	27 95       	ror	r18
 6d8:	a7 95       	ror	r26
 6da:	f0 40       	sbci	r31, 0x00	; 0
 6dc:	53 95       	inc	r21
 6de:	c9 f7       	brne	.-14     	; 0x6d2 <__addsf3x+0x52>
 6e0:	7e f4       	brtc	.+30     	; 0x700 <__addsf3x+0x80>
 6e2:	1f 16       	cp	r1, r31
 6e4:	ba 0b       	sbc	r27, r26
 6e6:	62 0b       	sbc	r22, r18
 6e8:	73 0b       	sbc	r23, r19
 6ea:	84 0b       	sbc	r24, r20
 6ec:	ba f0       	brmi	.+46     	; 0x71c <__addsf3x+0x9c>
 6ee:	91 50       	subi	r25, 0x01	; 1
 6f0:	a1 f0       	breq	.+40     	; 0x71a <__addsf3x+0x9a>
 6f2:	ff 0f       	add	r31, r31
 6f4:	bb 1f       	adc	r27, r27
 6f6:	66 1f       	adc	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	c2 f7       	brpl	.-16     	; 0x6ee <__addsf3x+0x6e>
 6fe:	0e c0       	rjmp	.+28     	; 0x71c <__addsf3x+0x9c>
 700:	ba 0f       	add	r27, r26
 702:	62 1f       	adc	r22, r18
 704:	73 1f       	adc	r23, r19
 706:	84 1f       	adc	r24, r20
 708:	48 f4       	brcc	.+18     	; 0x71c <__addsf3x+0x9c>
 70a:	87 95       	ror	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f7 95       	ror	r31
 714:	9e 3f       	cpi	r25, 0xFE	; 254
 716:	08 f0       	brcs	.+2      	; 0x71a <__addsf3x+0x9a>
 718:	b0 cf       	rjmp	.-160    	; 0x67a <__addsf3+0x28>
 71a:	93 95       	inc	r25
 71c:	88 0f       	add	r24, r24
 71e:	08 f0       	brcs	.+2      	; 0x722 <__addsf3x+0xa2>
 720:	99 27       	eor	r25, r25
 722:	ee 0f       	add	r30, r30
 724:	97 95       	ror	r25
 726:	87 95       	ror	r24
 728:	08 95       	ret
 72a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
 72e:	60 f0       	brcs	.+24     	; 0x748 <__addsf3x+0xc8>
 730:	80 e8       	ldi	r24, 0x80	; 128
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	09 f4       	brne	.+2      	; 0x738 <__addsf3x+0xb8>
 736:	9e ef       	ldi	r25, 0xFE	; 254
 738:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
 73c:	28 f0       	brcs	.+10     	; 0x748 <__addsf3x+0xc8>
 73e:	40 e8       	ldi	r20, 0x80	; 128
 740:	51 e0       	ldi	r21, 0x01	; 1
 742:	71 f4       	brne	.+28     	; 0x760 <atan2+0x10>
 744:	5e ef       	ldi	r21, 0xFE	; 254
 746:	0c c0       	rjmp	.+24     	; 0x760 <atan2+0x10>
 748:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_nan>
 74c:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_zero>

00000750 <atan2>:
 750:	e9 2f       	mov	r30, r25
 752:	e0 78       	andi	r30, 0x80	; 128
 754:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
 758:	40 f3       	brcs	.-48     	; 0x72a <__addsf3x+0xaa>
 75a:	09 2e       	mov	r0, r25
 75c:	05 2a       	or	r0, r21
 75e:	b1 f3       	breq	.-20     	; 0x74c <__addsf3x+0xcc>
 760:	26 17       	cp	r18, r22
 762:	37 07       	cpc	r19, r23
 764:	48 07       	cpc	r20, r24
 766:	59 07       	cpc	r21, r25
 768:	38 f0       	brcs	.+14     	; 0x778 <atan2+0x28>
 76a:	0e 2e       	mov	r0, r30
 76c:	07 f8       	bld	r0, 7
 76e:	e0 25       	eor	r30, r0
 770:	69 f0       	breq	.+26     	; 0x78c <atan2+0x3c>
 772:	e0 25       	eor	r30, r0
 774:	e0 64       	ori	r30, 0x40	; 64
 776:	0a c0       	rjmp	.+20     	; 0x78c <atan2+0x3c>
 778:	ef 63       	ori	r30, 0x3F	; 63
 77a:	07 f8       	bld	r0, 7
 77c:	00 94       	com	r0
 77e:	07 fa       	bst	r0, 7
 780:	db 01       	movw	r26, r22
 782:	b9 01       	movw	r22, r18
 784:	9d 01       	movw	r18, r26
 786:	dc 01       	movw	r26, r24
 788:	ca 01       	movw	r24, r20
 78a:	ad 01       	movw	r20, r26
 78c:	ef 93       	push	r30
 78e:	0e 94 1e 04 	call	0x83c	; 0x83c <__divsf3_pse>
 792:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_round>
 796:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <atan>
 79a:	5f 91       	pop	r21
 79c:	55 23       	and	r21, r21
 79e:	39 f0       	breq	.+14     	; 0x7ae <atan2+0x5e>
 7a0:	2b ed       	ldi	r18, 0xDB	; 219
 7a2:	3f e0       	ldi	r19, 0x0F	; 15
 7a4:	49 e4       	ldi	r20, 0x49	; 73
 7a6:	50 fd       	sbrc	r21, 0
 7a8:	49 ec       	ldi	r20, 0xC9	; 201
 7aa:	0c 94 29 03 	jmp	0x652	; 0x652 <__addsf3>
 7ae:	08 95       	ret

000007b0 <atan>:
 7b0:	df 93       	push	r29
 7b2:	dd 27       	eor	r29, r29
 7b4:	b9 2f       	mov	r27, r25
 7b6:	bf 77       	andi	r27, 0x7F	; 127
 7b8:	40 e8       	ldi	r20, 0x80	; 128
 7ba:	5f e3       	ldi	r21, 0x3F	; 63
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	48 07       	cpc	r20, r24
 7c2:	5b 07       	cpc	r21, r27
 7c4:	18 f4       	brcc	.+6      	; 0x7cc <atan+0x1c>
 7c6:	d9 2f       	mov	r29, r25
 7c8:	0e 94 64 05 	call	0xac8	; 0xac8 <inverse>
 7cc:	9f 93       	push	r25
 7ce:	8f 93       	push	r24
 7d0:	7f 93       	push	r23
 7d2:	6f 93       	push	r22
 7d4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <square>
 7d8:	e8 e6       	ldi	r30, 0x68	; 104
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__fp_powser>
 7e0:	0e 94 2a 05 	call	0xa54	; 0xa54 <__fp_round>
 7e4:	2f 91       	pop	r18
 7e6:	3f 91       	pop	r19
 7e8:	4f 91       	pop	r20
 7ea:	5f 91       	pop	r21
 7ec:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3x>
 7f0:	dd 23       	and	r29, r29
 7f2:	51 f0       	breq	.+20     	; 0x808 <atan+0x58>
 7f4:	90 58       	subi	r25, 0x80	; 128
 7f6:	a2 ea       	ldi	r26, 0xA2	; 162
 7f8:	2a ed       	ldi	r18, 0xDA	; 218
 7fa:	3f e0       	ldi	r19, 0x0F	; 15
 7fc:	49 ec       	ldi	r20, 0xC9	; 201
 7fe:	5f e3       	ldi	r21, 0x3F	; 63
 800:	d0 78       	andi	r29, 0x80	; 128
 802:	5d 27       	eor	r21, r29
 804:	0e 94 40 03 	call	0x680	; 0x680 <__addsf3x>
 808:	df 91       	pop	r29
 80a:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>

0000080e <__divsf3>:
 80e:	0e 94 1b 04 	call	0x836	; 0x836 <__divsf3x>
 812:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
 816:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
 81a:	58 f0       	brcs	.+22     	; 0x832 <__divsf3+0x24>
 81c:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
 820:	40 f0       	brcs	.+16     	; 0x832 <__divsf3+0x24>
 822:	29 f4       	brne	.+10     	; 0x82e <__divsf3+0x20>
 824:	5f 3f       	cpi	r21, 0xFF	; 255
 826:	29 f0       	breq	.+10     	; 0x832 <__divsf3+0x24>
 828:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_inf>
 82c:	51 11       	cpse	r21, r1
 82e:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>
 832:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_nan>

00000836 <__divsf3x>:
 836:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
 83a:	68 f3       	brcs	.-38     	; 0x816 <__divsf3+0x8>

0000083c <__divsf3_pse>:
 83c:	99 23       	and	r25, r25
 83e:	b1 f3       	breq	.-20     	; 0x82c <__divsf3+0x1e>
 840:	55 23       	and	r21, r21
 842:	91 f3       	breq	.-28     	; 0x828 <__divsf3+0x1a>
 844:	95 1b       	sub	r25, r21
 846:	55 0b       	sbc	r21, r21
 848:	bb 27       	eor	r27, r27
 84a:	aa 27       	eor	r26, r26
 84c:	62 17       	cp	r22, r18
 84e:	73 07       	cpc	r23, r19
 850:	84 07       	cpc	r24, r20
 852:	38 f0       	brcs	.+14     	; 0x862 <__divsf3_pse+0x26>
 854:	9f 5f       	subi	r25, 0xFF	; 255
 856:	5f 4f       	sbci	r21, 0xFF	; 255
 858:	22 0f       	add	r18, r18
 85a:	33 1f       	adc	r19, r19
 85c:	44 1f       	adc	r20, r20
 85e:	aa 1f       	adc	r26, r26
 860:	a9 f3       	breq	.-22     	; 0x84c <__divsf3_pse+0x10>
 862:	35 d0       	rcall	.+106    	; 0x8ce <__divsf3_pse+0x92>
 864:	0e 2e       	mov	r0, r30
 866:	3a f0       	brmi	.+14     	; 0x876 <__divsf3_pse+0x3a>
 868:	e0 e8       	ldi	r30, 0x80	; 128
 86a:	32 d0       	rcall	.+100    	; 0x8d0 <__divsf3_pse+0x94>
 86c:	91 50       	subi	r25, 0x01	; 1
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	e6 95       	lsr	r30
 872:	00 1c       	adc	r0, r0
 874:	ca f7       	brpl	.-14     	; 0x868 <__divsf3_pse+0x2c>
 876:	2b d0       	rcall	.+86     	; 0x8ce <__divsf3_pse+0x92>
 878:	fe 2f       	mov	r31, r30
 87a:	29 d0       	rcall	.+82     	; 0x8ce <__divsf3_pse+0x92>
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	bb 1f       	adc	r27, r27
 884:	26 17       	cp	r18, r22
 886:	37 07       	cpc	r19, r23
 888:	48 07       	cpc	r20, r24
 88a:	ab 07       	cpc	r26, r27
 88c:	b0 e8       	ldi	r27, 0x80	; 128
 88e:	09 f0       	breq	.+2      	; 0x892 <__divsf3_pse+0x56>
 890:	bb 0b       	sbc	r27, r27
 892:	80 2d       	mov	r24, r0
 894:	bf 01       	movw	r22, r30
 896:	ff 27       	eor	r31, r31
 898:	93 58       	subi	r25, 0x83	; 131
 89a:	5f 4f       	sbci	r21, 0xFF	; 255
 89c:	3a f0       	brmi	.+14     	; 0x8ac <__divsf3_pse+0x70>
 89e:	9e 3f       	cpi	r25, 0xFE	; 254
 8a0:	51 05       	cpc	r21, r1
 8a2:	78 f0       	brcs	.+30     	; 0x8c2 <__divsf3_pse+0x86>
 8a4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_inf>
 8a8:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	e4 f3       	brlt	.-8      	; 0x8a8 <__divsf3_pse+0x6c>
 8b0:	98 3e       	cpi	r25, 0xE8	; 232
 8b2:	d4 f3       	brlt	.-12     	; 0x8a8 <__divsf3_pse+0x6c>
 8b4:	86 95       	lsr	r24
 8b6:	77 95       	ror	r23
 8b8:	67 95       	ror	r22
 8ba:	b7 95       	ror	r27
 8bc:	f7 95       	ror	r31
 8be:	9f 5f       	subi	r25, 0xFF	; 255
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__divsf3_pse+0x78>
 8c2:	88 0f       	add	r24, r24
 8c4:	91 1d       	adc	r25, r1
 8c6:	96 95       	lsr	r25
 8c8:	87 95       	ror	r24
 8ca:	97 f9       	bld	r25, 7
 8cc:	08 95       	ret
 8ce:	e1 e0       	ldi	r30, 0x01	; 1
 8d0:	66 0f       	add	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	bb 1f       	adc	r27, r27
 8d8:	62 17       	cp	r22, r18
 8da:	73 07       	cpc	r23, r19
 8dc:	84 07       	cpc	r24, r20
 8de:	ba 07       	cpc	r27, r26
 8e0:	20 f0       	brcs	.+8      	; 0x8ea <__divsf3_pse+0xae>
 8e2:	62 1b       	sub	r22, r18
 8e4:	73 0b       	sbc	r23, r19
 8e6:	84 0b       	sbc	r24, r20
 8e8:	ba 0b       	sbc	r27, r26
 8ea:	ee 1f       	adc	r30, r30
 8ec:	88 f7       	brcc	.-30     	; 0x8d0 <__divsf3_pse+0x94>
 8ee:	e0 95       	com	r30
 8f0:	08 95       	ret

000008f2 <__fixsfsi>:
 8f2:	0e 94 80 04 	call	0x900	; 0x900 <__fixunssfsi>
 8f6:	68 94       	set
 8f8:	b1 11       	cpse	r27, r1
 8fa:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>
 8fe:	08 95       	ret

00000900 <__fixunssfsi>:
 900:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_splitA>
 904:	88 f0       	brcs	.+34     	; 0x928 <__fixunssfsi+0x28>
 906:	9f 57       	subi	r25, 0x7F	; 127
 908:	98 f0       	brcs	.+38     	; 0x930 <__fixunssfsi+0x30>
 90a:	b9 2f       	mov	r27, r25
 90c:	99 27       	eor	r25, r25
 90e:	b7 51       	subi	r27, 0x17	; 23
 910:	b0 f0       	brcs	.+44     	; 0x93e <__fixunssfsi+0x3e>
 912:	e1 f0       	breq	.+56     	; 0x94c <__fixunssfsi+0x4c>
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	1a f0       	brmi	.+6      	; 0x924 <__fixunssfsi+0x24>
 91e:	ba 95       	dec	r27
 920:	c9 f7       	brne	.-14     	; 0x914 <__fixunssfsi+0x14>
 922:	14 c0       	rjmp	.+40     	; 0x94c <__fixunssfsi+0x4c>
 924:	b1 30       	cpi	r27, 0x01	; 1
 926:	91 f0       	breq	.+36     	; 0x94c <__fixunssfsi+0x4c>
 928:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_zero>
 92c:	b1 e0       	ldi	r27, 0x01	; 1
 92e:	08 95       	ret
 930:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__fp_zero>
 934:	67 2f       	mov	r22, r23
 936:	78 2f       	mov	r23, r24
 938:	88 27       	eor	r24, r24
 93a:	b8 5f       	subi	r27, 0xF8	; 248
 93c:	39 f0       	breq	.+14     	; 0x94c <__fixunssfsi+0x4c>
 93e:	b9 3f       	cpi	r27, 0xF9	; 249
 940:	cc f3       	brlt	.-14     	; 0x934 <__fixunssfsi+0x34>
 942:	86 95       	lsr	r24
 944:	77 95       	ror	r23
 946:	67 95       	ror	r22
 948:	b3 95       	inc	r27
 94a:	d9 f7       	brne	.-10     	; 0x942 <__fixunssfsi+0x42>
 94c:	3e f4       	brtc	.+14     	; 0x95c <__fixunssfsi+0x5c>
 94e:	90 95       	com	r25
 950:	80 95       	com	r24
 952:	70 95       	com	r23
 954:	61 95       	neg	r22
 956:	7f 4f       	sbci	r23, 0xFF	; 255
 958:	8f 4f       	sbci	r24, 0xFF	; 255
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	08 95       	ret

0000095e <__floatunsisf>:
 95e:	e8 94       	clt
 960:	09 c0       	rjmp	.+18     	; 0x974 <__floatsisf+0x12>

00000962 <__floatsisf>:
 962:	97 fb       	bst	r25, 7
 964:	3e f4       	brtc	.+14     	; 0x974 <__floatsisf+0x12>
 966:	90 95       	com	r25
 968:	80 95       	com	r24
 96a:	70 95       	com	r23
 96c:	61 95       	neg	r22
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	99 23       	and	r25, r25
 976:	a9 f0       	breq	.+42     	; 0x9a2 <__floatsisf+0x40>
 978:	f9 2f       	mov	r31, r25
 97a:	96 e9       	ldi	r25, 0x96	; 150
 97c:	bb 27       	eor	r27, r27
 97e:	93 95       	inc	r25
 980:	f6 95       	lsr	r31
 982:	87 95       	ror	r24
 984:	77 95       	ror	r23
 986:	67 95       	ror	r22
 988:	b7 95       	ror	r27
 98a:	f1 11       	cpse	r31, r1
 98c:	f8 cf       	rjmp	.-16     	; 0x97e <__floatsisf+0x1c>
 98e:	fa f4       	brpl	.+62     	; 0x9ce <__floatsisf+0x6c>
 990:	bb 0f       	add	r27, r27
 992:	11 f4       	brne	.+4      	; 0x998 <__floatsisf+0x36>
 994:	60 ff       	sbrs	r22, 0
 996:	1b c0       	rjmp	.+54     	; 0x9ce <__floatsisf+0x6c>
 998:	6f 5f       	subi	r22, 0xFF	; 255
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	16 c0       	rjmp	.+44     	; 0x9ce <__floatsisf+0x6c>
 9a2:	88 23       	and	r24, r24
 9a4:	11 f0       	breq	.+4      	; 0x9aa <__floatsisf+0x48>
 9a6:	96 e9       	ldi	r25, 0x96	; 150
 9a8:	11 c0       	rjmp	.+34     	; 0x9cc <__floatsisf+0x6a>
 9aa:	77 23       	and	r23, r23
 9ac:	21 f0       	breq	.+8      	; 0x9b6 <__floatsisf+0x54>
 9ae:	9e e8       	ldi	r25, 0x8E	; 142
 9b0:	87 2f       	mov	r24, r23
 9b2:	76 2f       	mov	r23, r22
 9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <__floatsisf+0x5e>
 9b6:	66 23       	and	r22, r22
 9b8:	71 f0       	breq	.+28     	; 0x9d6 <__floatsisf+0x74>
 9ba:	96 e8       	ldi	r25, 0x86	; 134
 9bc:	86 2f       	mov	r24, r22
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	60 e0       	ldi	r22, 0x00	; 0
 9c2:	2a f0       	brmi	.+10     	; 0x9ce <__floatsisf+0x6c>
 9c4:	9a 95       	dec	r25
 9c6:	66 0f       	add	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	da f7       	brpl	.-10     	; 0x9c4 <__floatsisf+0x62>
 9ce:	88 0f       	add	r24, r24
 9d0:	96 95       	lsr	r25
 9d2:	87 95       	ror	r24
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <__fp_inf>:
 9d8:	97 f9       	bld	r25, 7
 9da:	9f 67       	ori	r25, 0x7F	; 127
 9dc:	80 e8       	ldi	r24, 0x80	; 128
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	08 95       	ret

000009e4 <__fp_nan>:
 9e4:	9f ef       	ldi	r25, 0xFF	; 255
 9e6:	80 ec       	ldi	r24, 0xC0	; 192
 9e8:	08 95       	ret

000009ea <__fp_powser>:
 9ea:	df 93       	push	r29
 9ec:	cf 93       	push	r28
 9ee:	1f 93       	push	r17
 9f0:	0f 93       	push	r16
 9f2:	ff 92       	push	r15
 9f4:	ef 92       	push	r14
 9f6:	df 92       	push	r13
 9f8:	7b 01       	movw	r14, r22
 9fa:	8c 01       	movw	r16, r24
 9fc:	68 94       	set
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <__fp_powser+0x22>
 a00:	da 2e       	mov	r13, r26
 a02:	ef 01       	movw	r28, r30
 a04:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3x>
 a08:	fe 01       	movw	r30, r28
 a0a:	e8 94       	clt
 a0c:	a5 91       	lpm	r26, Z+
 a0e:	25 91       	lpm	r18, Z+
 a10:	35 91       	lpm	r19, Z+
 a12:	45 91       	lpm	r20, Z+
 a14:	55 91       	lpm	r21, Z+
 a16:	a6 f3       	brts	.-24     	; 0xa00 <__fp_powser+0x16>
 a18:	ef 01       	movw	r28, r30
 a1a:	0e 94 40 03 	call	0x680	; 0x680 <__addsf3x>
 a1e:	fe 01       	movw	r30, r28
 a20:	97 01       	movw	r18, r14
 a22:	a8 01       	movw	r20, r16
 a24:	da 94       	dec	r13
 a26:	69 f7       	brne	.-38     	; 0xa02 <__fp_powser+0x18>
 a28:	df 90       	pop	r13
 a2a:	ef 90       	pop	r14
 a2c:	ff 90       	pop	r15
 a2e:	0f 91       	pop	r16
 a30:	1f 91       	pop	r17
 a32:	cf 91       	pop	r28
 a34:	df 91       	pop	r29
 a36:	08 95       	ret

00000a38 <__fp_pscA>:
 a38:	00 24       	eor	r0, r0
 a3a:	0a 94       	dec	r0
 a3c:	16 16       	cp	r1, r22
 a3e:	17 06       	cpc	r1, r23
 a40:	18 06       	cpc	r1, r24
 a42:	09 06       	cpc	r0, r25
 a44:	08 95       	ret

00000a46 <__fp_pscB>:
 a46:	00 24       	eor	r0, r0
 a48:	0a 94       	dec	r0
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	14 06       	cpc	r1, r20
 a50:	05 06       	cpc	r0, r21
 a52:	08 95       	ret

00000a54 <__fp_round>:
 a54:	09 2e       	mov	r0, r25
 a56:	03 94       	inc	r0
 a58:	00 0c       	add	r0, r0
 a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_round+0xc>
 a5c:	88 23       	and	r24, r24
 a5e:	52 f0       	brmi	.+20     	; 0xa74 <__fp_round+0x20>
 a60:	bb 0f       	add	r27, r27
 a62:	40 f4       	brcc	.+16     	; 0xa74 <__fp_round+0x20>
 a64:	bf 2b       	or	r27, r31
 a66:	11 f4       	brne	.+4      	; 0xa6c <__fp_round+0x18>
 a68:	60 ff       	sbrs	r22, 0
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__fp_round+0x20>
 a6c:	6f 5f       	subi	r22, 0xFF	; 255
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	08 95       	ret

00000a76 <__fp_split3>:
 a76:	57 fd       	sbrc	r21, 7
 a78:	90 58       	subi	r25, 0x80	; 128
 a7a:	44 0f       	add	r20, r20
 a7c:	55 1f       	adc	r21, r21
 a7e:	59 f0       	breq	.+22     	; 0xa96 <__fp_splitA+0x10>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	71 f0       	breq	.+28     	; 0xaa0 <__fp_splitA+0x1a>
 a84:	47 95       	ror	r20

00000a86 <__fp_splitA>:
 a86:	88 0f       	add	r24, r24
 a88:	97 fb       	bst	r25, 7
 a8a:	99 1f       	adc	r25, r25
 a8c:	61 f0       	breq	.+24     	; 0xaa6 <__fp_splitA+0x20>
 a8e:	9f 3f       	cpi	r25, 0xFF	; 255
 a90:	79 f0       	breq	.+30     	; 0xab0 <__fp_splitA+0x2a>
 a92:	87 95       	ror	r24
 a94:	08 95       	ret
 a96:	12 16       	cp	r1, r18
 a98:	13 06       	cpc	r1, r19
 a9a:	14 06       	cpc	r1, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <__fp_split3+0xe>
 aa0:	46 95       	lsr	r20
 aa2:	f1 df       	rcall	.-30     	; 0xa86 <__fp_splitA>
 aa4:	08 c0       	rjmp	.+16     	; 0xab6 <__fp_splitA+0x30>
 aa6:	16 16       	cp	r1, r22
 aa8:	17 06       	cpc	r1, r23
 aaa:	18 06       	cpc	r1, r24
 aac:	99 1f       	adc	r25, r25
 aae:	f1 cf       	rjmp	.-30     	; 0xa92 <__fp_splitA+0xc>
 ab0:	86 95       	lsr	r24
 ab2:	71 05       	cpc	r23, r1
 ab4:	61 05       	cpc	r22, r1
 ab6:	08 94       	sec
 ab8:	08 95       	ret

00000aba <__fp_zero>:
 aba:	e8 94       	clt

00000abc <__fp_szero>:
 abc:	bb 27       	eor	r27, r27
 abe:	66 27       	eor	r22, r22
 ac0:	77 27       	eor	r23, r23
 ac2:	cb 01       	movw	r24, r22
 ac4:	97 f9       	bld	r25, 7
 ac6:	08 95       	ret

00000ac8 <inverse>:
 ac8:	9b 01       	movw	r18, r22
 aca:	ac 01       	movw	r20, r24
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	80 e8       	ldi	r24, 0x80	; 128
 ad2:	9f e3       	ldi	r25, 0x3F	; 63
 ad4:	0c 94 07 04 	jmp	0x80e	; 0x80e <__divsf3>

00000ad8 <__mulsf3>:
 ad8:	0e 94 7f 05 	call	0xafe	; 0xafe <__mulsf3x>
 adc:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
 ae0:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
 ae4:	38 f0       	brcs	.+14     	; 0xaf4 <__mulsf3+0x1c>
 ae6:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
 aea:	20 f0       	brcs	.+8      	; 0xaf4 <__mulsf3+0x1c>
 aec:	95 23       	and	r25, r21
 aee:	11 f0       	breq	.+4      	; 0xaf4 <__mulsf3+0x1c>
 af0:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_inf>
 af4:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__fp_nan>
 af8:	11 24       	eor	r1, r1
 afa:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>

00000afe <__mulsf3x>:
 afe:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
 b02:	70 f3       	brcs	.-36     	; 0xae0 <__mulsf3+0x8>

00000b04 <__mulsf3_pse>:
 b04:	95 9f       	mul	r25, r21
 b06:	c1 f3       	breq	.-16     	; 0xaf8 <__mulsf3+0x20>
 b08:	95 0f       	add	r25, r21
 b0a:	50 e0       	ldi	r21, 0x00	; 0
 b0c:	55 1f       	adc	r21, r21
 b0e:	62 9f       	mul	r22, r18
 b10:	f0 01       	movw	r30, r0
 b12:	72 9f       	mul	r23, r18
 b14:	bb 27       	eor	r27, r27
 b16:	f0 0d       	add	r31, r0
 b18:	b1 1d       	adc	r27, r1
 b1a:	63 9f       	mul	r22, r19
 b1c:	aa 27       	eor	r26, r26
 b1e:	f0 0d       	add	r31, r0
 b20:	b1 1d       	adc	r27, r1
 b22:	aa 1f       	adc	r26, r26
 b24:	64 9f       	mul	r22, r20
 b26:	66 27       	eor	r22, r22
 b28:	b0 0d       	add	r27, r0
 b2a:	a1 1d       	adc	r26, r1
 b2c:	66 1f       	adc	r22, r22
 b2e:	82 9f       	mul	r24, r18
 b30:	22 27       	eor	r18, r18
 b32:	b0 0d       	add	r27, r0
 b34:	a1 1d       	adc	r26, r1
 b36:	62 1f       	adc	r22, r18
 b38:	73 9f       	mul	r23, r19
 b3a:	b0 0d       	add	r27, r0
 b3c:	a1 1d       	adc	r26, r1
 b3e:	62 1f       	adc	r22, r18
 b40:	83 9f       	mul	r24, r19
 b42:	a0 0d       	add	r26, r0
 b44:	61 1d       	adc	r22, r1
 b46:	22 1f       	adc	r18, r18
 b48:	74 9f       	mul	r23, r20
 b4a:	33 27       	eor	r19, r19
 b4c:	a0 0d       	add	r26, r0
 b4e:	61 1d       	adc	r22, r1
 b50:	23 1f       	adc	r18, r19
 b52:	84 9f       	mul	r24, r20
 b54:	60 0d       	add	r22, r0
 b56:	21 1d       	adc	r18, r1
 b58:	82 2f       	mov	r24, r18
 b5a:	76 2f       	mov	r23, r22
 b5c:	6a 2f       	mov	r22, r26
 b5e:	11 24       	eor	r1, r1
 b60:	9f 57       	subi	r25, 0x7F	; 127
 b62:	50 40       	sbci	r21, 0x00	; 0
 b64:	9a f0       	brmi	.+38     	; 0xb8c <__mulsf3_pse+0x88>
 b66:	f1 f0       	breq	.+60     	; 0xba4 <__mulsf3_pse+0xa0>
 b68:	88 23       	and	r24, r24
 b6a:	4a f0       	brmi	.+18     	; 0xb7e <__mulsf3_pse+0x7a>
 b6c:	ee 0f       	add	r30, r30
 b6e:	ff 1f       	adc	r31, r31
 b70:	bb 1f       	adc	r27, r27
 b72:	66 1f       	adc	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	91 50       	subi	r25, 0x01	; 1
 b7a:	50 40       	sbci	r21, 0x00	; 0
 b7c:	a9 f7       	brne	.-22     	; 0xb68 <__mulsf3_pse+0x64>
 b7e:	9e 3f       	cpi	r25, 0xFE	; 254
 b80:	51 05       	cpc	r21, r1
 b82:	80 f0       	brcs	.+32     	; 0xba4 <__mulsf3_pse+0xa0>
 b84:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_inf>
 b88:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__fp_szero>
 b8c:	5f 3f       	cpi	r21, 0xFF	; 255
 b8e:	e4 f3       	brlt	.-8      	; 0xb88 <__mulsf3_pse+0x84>
 b90:	98 3e       	cpi	r25, 0xE8	; 232
 b92:	d4 f3       	brlt	.-12     	; 0xb88 <__mulsf3_pse+0x84>
 b94:	86 95       	lsr	r24
 b96:	77 95       	ror	r23
 b98:	67 95       	ror	r22
 b9a:	b7 95       	ror	r27
 b9c:	f7 95       	ror	r31
 b9e:	e7 95       	ror	r30
 ba0:	9f 5f       	subi	r25, 0xFF	; 255
 ba2:	c1 f7       	brne	.-16     	; 0xb94 <__mulsf3_pse+0x90>
 ba4:	fe 2b       	or	r31, r30
 ba6:	88 0f       	add	r24, r24
 ba8:	91 1d       	adc	r25, r1
 baa:	96 95       	lsr	r25
 bac:	87 95       	ror	r24
 bae:	97 f9       	bld	r25, 7
 bb0:	08 95       	ret

00000bb2 <square>:
 bb2:	9b 01       	movw	r18, r22
 bb4:	ac 01       	movw	r20, r24
 bb6:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__mulsf3>

00000bba <__divmodhi4>:
 bba:	97 fb       	bst	r25, 7
 bbc:	07 2e       	mov	r0, r23
 bbe:	16 f4       	brtc	.+4      	; 0xbc4 <__divmodhi4+0xa>
 bc0:	00 94       	com	r0
 bc2:	07 d0       	rcall	.+14     	; 0xbd2 <__divmodhi4_neg1>
 bc4:	77 fd       	sbrc	r23, 7
 bc6:	09 d0       	rcall	.+18     	; 0xbda <__divmodhi4_neg2>
 bc8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__udivmodhi4>
 bcc:	07 fc       	sbrc	r0, 7
 bce:	05 d0       	rcall	.+10     	; 0xbda <__divmodhi4_neg2>
 bd0:	3e f4       	brtc	.+14     	; 0xbe0 <__divmodhi4_exit>

00000bd2 <__divmodhi4_neg1>:
 bd2:	90 95       	com	r25
 bd4:	81 95       	neg	r24
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	08 95       	ret

00000bda <__divmodhi4_neg2>:
 bda:	70 95       	com	r23
 bdc:	61 95       	neg	r22
 bde:	7f 4f       	sbci	r23, 0xFF	; 255

00000be0 <__divmodhi4_exit>:
 be0:	08 95       	ret

00000be2 <__udivmodhi4>:
 be2:	aa 1b       	sub	r26, r26
 be4:	bb 1b       	sub	r27, r27
 be6:	51 e1       	ldi	r21, 0x11	; 17
 be8:	07 c0       	rjmp	.+14     	; 0xbf8 <__udivmodhi4_ep>

00000bea <__udivmodhi4_loop>:
 bea:	aa 1f       	adc	r26, r26
 bec:	bb 1f       	adc	r27, r27
 bee:	a6 17       	cp	r26, r22
 bf0:	b7 07       	cpc	r27, r23
 bf2:	10 f0       	brcs	.+4      	; 0xbf8 <__udivmodhi4_ep>
 bf4:	a6 1b       	sub	r26, r22
 bf6:	b7 0b       	sbc	r27, r23

00000bf8 <__udivmodhi4_ep>:
 bf8:	88 1f       	adc	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	5a 95       	dec	r21
 bfe:	a9 f7       	brne	.-22     	; 0xbea <__udivmodhi4_loop>
 c00:	80 95       	com	r24
 c02:	90 95       	com	r25
 c04:	bc 01       	movw	r22, r24
 c06:	cd 01       	movw	r24, r26
 c08:	08 95       	ret

00000c0a <__itoa_ncheck>:
 c0a:	bb 27       	eor	r27, r27
 c0c:	4a 30       	cpi	r20, 0x0A	; 10
 c0e:	31 f4       	brne	.+12     	; 0xc1c <__itoa_ncheck+0x12>
 c10:	99 23       	and	r25, r25
 c12:	22 f4       	brpl	.+8      	; 0xc1c <__itoa_ncheck+0x12>
 c14:	bd e2       	ldi	r27, 0x2D	; 45
 c16:	90 95       	com	r25
 c18:	81 95       	neg	r24
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__utoa_common>

00000c20 <__utoa_ncheck>:
 c20:	bb 27       	eor	r27, r27

00000c22 <__utoa_common>:
 c22:	fb 01       	movw	r30, r22
 c24:	55 27       	eor	r21, r21
 c26:	aa 27       	eor	r26, r26
 c28:	88 0f       	add	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	aa 1f       	adc	r26, r26
 c2e:	a4 17       	cp	r26, r20
 c30:	10 f0       	brcs	.+4      	; 0xc36 <__utoa_common+0x14>
 c32:	a4 1b       	sub	r26, r20
 c34:	83 95       	inc	r24
 c36:	50 51       	subi	r21, 0x10	; 16
 c38:	b9 f7       	brne	.-18     	; 0xc28 <__utoa_common+0x6>
 c3a:	a0 5d       	subi	r26, 0xD0	; 208
 c3c:	aa 33       	cpi	r26, 0x3A	; 58
 c3e:	08 f0       	brcs	.+2      	; 0xc42 <__utoa_common+0x20>
 c40:	a9 5d       	subi	r26, 0xD9	; 217
 c42:	a1 93       	st	Z+, r26
 c44:	00 97       	sbiw	r24, 0x00	; 0
 c46:	79 f7       	brne	.-34     	; 0xc26 <__utoa_common+0x4>
 c48:	b1 11       	cpse	r27, r1
 c4a:	b1 93       	st	Z+, r27
 c4c:	11 92       	st	Z+, r1
 c4e:	cb 01       	movw	r24, r22
 c50:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <strrev>

00000c54 <strrev>:
 c54:	dc 01       	movw	r26, r24
 c56:	fc 01       	movw	r30, r24
 c58:	67 2f       	mov	r22, r23
 c5a:	71 91       	ld	r23, Z+
 c5c:	77 23       	and	r23, r23
 c5e:	e1 f7       	brne	.-8      	; 0xc58 <strrev+0x4>
 c60:	32 97       	sbiw	r30, 0x02	; 2
 c62:	04 c0       	rjmp	.+8      	; 0xc6c <strrev+0x18>
 c64:	7c 91       	ld	r23, X
 c66:	6d 93       	st	X+, r22
 c68:	70 83       	st	Z, r23
 c6a:	62 91       	ld	r22, -Z
 c6c:	ae 17       	cp	r26, r30
 c6e:	bf 07       	cpc	r27, r31
 c70:	c8 f3       	brcs	.-14     	; 0xc64 <strrev+0x10>
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>
