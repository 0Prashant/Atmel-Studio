
externalcounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f1  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a2  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000127  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000158  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */ 

#define F_CPU 1000000
#include <avr/io.h>
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    PORTB = 0x01;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	88 bb       	out	0x18, r24	; 24
	DDRD = 0xFF;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  9e:	84 bb       	out	0x14, r24	; 20
	TCCR0 = 0x07;
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	83 bf       	out	0x33, r24	; 51
	TCCR1B = 0x05;
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	8e bd       	out	0x2e, r24	; 46
	TCNT0 = 0x00;
  a8:	12 be       	out	0x32, r1	; 50
	unsigned char num[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00100111,0b01111111,0b01101111};
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x32>
  bc:	ae 01       	movw	r20, r28
  be:	45 5f       	subi	r20, 0xF5	; 245
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
 */ 

#define F_CPU 1000000
#include <avr/io.h>
int main(void)
{
  c2:	9e 01       	movw	r18, r28
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char num[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00100111,0b01111111,0b01101111};
	while (1) 
    {
		for(unsigned char i=0;i<10;i++)
		{	
			PORTC = num[i];
  c8:	72 2f       	mov	r23, r18
  ca:	63 2f       	mov	r22, r19
 */ 

#define F_CPU 1000000
#include <avr/io.h>
int main(void)
{
  cc:	d9 01       	movw	r26, r18
	unsigned char num[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00100111,0b01111111,0b01101111};
	while (1) 
    {
		for(unsigned char i=0;i<10;i++)
		{	
			PORTC = num[i];
  ce:	8d 91       	ld	r24, X+
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	e7 2f       	mov	r30, r23
  d4:	f6 2f       	mov	r31, r22
			for(unsigned char j=0;j<10;j++)
			{
				TCNT1 = 0x0000;
  d6:	1d bc       	out	0x2d, r1	; 45
  d8:	1c bc       	out	0x2c, r1	; 44
				top:
				do
				{
					PORTD = num[j];
  da:	80 81       	ld	r24, Z
  dc:	82 bb       	out	0x12, r24	; 18
				}while(TCNT0<=0);
  de:	82 b7       	in	r24, 0x32	; 50
  e0:	88 23       	and	r24, r24
  e2:	d9 f3       	breq	.-10     	; 0xda <main+0x58>
				if(TCNT1<800)
  e4:	8c b5       	in	r24, 0x2c	; 44
  e6:	9d b5       	in	r25, 0x2d	; 45
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	93 40       	sbci	r25, 0x03	; 3
  ec:	10 f4       	brcc	.+4      	; 0xf2 <main+0x70>
				{
					TCNT0 = 0x00;
  ee:	12 be       	out	0x32, r1	; 50
					goto top;
  f0:	f4 cf       	rjmp	.-24     	; 0xda <main+0x58>
				}
				TCNT0=0x00;
  f2:	12 be       	out	0x32, r1	; 50
  f4:	31 96       	adiw	r30, 0x01	; 1
	while (1) 
    {
		for(unsigned char i=0;i<10;i++)
		{	
			PORTC = num[i];
			for(unsigned char j=0;j<10;j++)
  f6:	e4 17       	cp	r30, r20
  f8:	f5 07       	cpc	r31, r21
  fa:	69 f7       	brne	.-38     	; 0xd6 <main+0x54>
	TCCR1B = 0x05;
	TCNT0 = 0x00;
	unsigned char num[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00100111,0b01111111,0b01101111};
	while (1) 
    {
		for(unsigned char i=0;i<10;i++)
  fc:	a4 17       	cp	r26, r20
  fe:	b5 07       	cpc	r27, r21
 100:	31 f7       	brne	.-52     	; 0xce <main+0x4c>
 102:	e4 cf       	rjmp	.-56     	; 0xcc <main+0x4a>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
