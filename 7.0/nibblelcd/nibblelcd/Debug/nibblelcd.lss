
nibblelcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ff  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001aa  00000000  00000000  000007f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e4  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dd  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000173  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  7a:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcdenable>:
#define rs 0
#define rw 1
#define en 2
void lcdenable()
{
	PORTD |= 1<<en;
  82:	92 9a       	sbi	0x12, 2	; 18
	asm volatile ("nop");
  84:	00 00       	nop
	asm volatile ("nop");
  86:	00 00       	nop
	PORTD &= ~(1<<en);
  88:	92 98       	cbi	0x12, 2	; 18
  8a:	08 95       	ret

0000008c <lcdcheck>:
}
void lcdcheck()
{
	DDRA = 0x00;
  8c:	1a ba       	out	0x1a, r1	; 26
	PORTD |= 1<<rw;
  8e:	91 9a       	sbi	0x12, 1	; 18
	PORTD &= ~(1<<rs);
  90:	90 98       	cbi	0x12, 0	; 18
	while(PORTA >= 0x80)
  92:	df 9b       	sbis	0x1b, 7	; 27
  94:	04 c0       	rjmp	.+8      	; 0x9e <lcdcheck+0x12>
	{
	  lcdenable();
  96:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
void lcdcheck()
{
	DDRA = 0x00;
	PORTD |= 1<<rw;
	PORTD &= ~(1<<rs);
	while(PORTA >= 0x80)
  9a:	df 99       	sbic	0x1b, 7	; 27
  9c:	fc cf       	rjmp	.-8      	; 0x96 <lcdcheck+0xa>
	{
	  lcdenable();
	}
	DDRA = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret

000000a4 <lcdcommand>:
}
void lcdcommand(unsigned char comd)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	lcdcheck();
  a8:	0e 94 46 00 	call	0x8c	; 0x8c <lcdcheck>
	PORTD &= ~(1 << rs);
  ac:	90 98       	cbi	0x12, 0	; 18
	PORTD &= ~(1<< rw);
  ae:	91 98       	cbi	0x12, 1	; 18
	PORTA = comd & 0xF0;
  b0:	8c 2f       	mov	r24, r28
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	8b bb       	out	0x1b, r24	; 27
	lcdenable();
  b6:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	84 e1       	ldi	r24, 0x14	; 20
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <lcdcommand+0x18>
	_delay_us(60);
	PORTA = comd <<4;
  c0:	c2 95       	swap	r28
  c2:	c0 7f       	andi	r28, 0xF0	; 240
  c4:	cb bb       	out	0x1b, r28	; 27
	lcdenable();
  c6:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
	PORTA = 0;
  ca:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcdcommand+0x2c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcdcommand+0x32>
  d6:	00 00       	nop
	_delay_ms(10);

}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcddata>:
void lcddata(unsigned char dat)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	lcdcheck();
  e0:	0e 94 46 00 	call	0x8c	; 0x8c <lcdcheck>
	PORTD &= ~(1<< rw);
  e4:	91 98       	cbi	0x12, 1	; 18
	PORTD |= 1 << rs; 
  e6:	90 9a       	sbi	0x12, 0	; 18
	PORTA = dat & 0xF0;
  e8:	8c 2f       	mov	r24, r28
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	8b bb       	out	0x1b, r24	; 27
	lcdenable();
  ee:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
		//_delay_us(60);
	PORTA = dat<<4;
  f2:	c2 95       	swap	r28
  f4:	c0 7f       	andi	r28, 0xF0	; 240
  f6:	cb bb       	out	0x1b, r28	; 27
	lcdenable();
  f8:	0e 94 41 00 	call	0x82	; 0x82 <lcdenable>
	PORTA = 0;	
  fc:	1b ba       	out	0x1b, r1	; 27
	//_delay_ms(10);
}
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <lcdinitialise>:
void lcdinitialise()
{
	DDRD |= 1<<rs |1<<rw |1<<en ;
 102:	81 b3       	in	r24, 0x11	; 17
 104:	87 60       	ori	r24, 0x07	; 7
 106:	81 bb       	out	0x11, r24	; 17
 108:	8d e8       	ldi	r24, 0x8D	; 141
 10a:	92 e1       	ldi	r25, 0x12	; 18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcdinitialise+0xa>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcdinitialise+0x10>
 112:	00 00       	nop
	_delay_ms(19);
	lcdcommand(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcdinitialise+0x1c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <lcdinitialise+0x22>
 124:	00 00       	nop
	_delay_ms(2);
	lcdcommand(0x33);
 126:	83 e3       	ldi	r24, 0x33	; 51
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	90 e1       	ldi	r25, 0x10	; 16
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <lcdinitialise+0x2c>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcdinitialise+0x32>
	_delay_us(50);
	lcdcommand(0x32);
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdinitialise+0x3a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdinitialise+0x40>
	_delay_us(50);
	lcdcommand(0x28);
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 148:	90 e1       	ldi	r25, 0x10	; 16
 14a:	9a 95       	dec	r25
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcdinitialise+0x48>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcdinitialise+0x4e>
	_delay_us(50);
	lcdcommand(0x0E);
 150:	8e e0       	ldi	r24, 0x0E	; 14
 152:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcdinitialise+0x56>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcdinitialise+0x5c>
	_delay_us(50);
	lcdcommand(0x06);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	0e 94 52 00 	call	0xa4	; 0xa4 <lcdcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcdinitialise+0x66>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcdinitialise+0x6c>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <lcdprint>:
	_delay_ms(50);
}
void lcdprint(char *string)
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
	unsigned char i=0;
	while(string[i] != 0)
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	91 f0       	breq	.+36     	; 0x1a4 <lcdprint+0x32>
 180:	8c 01       	movw	r16, r24
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	8d ee       	ldi	r24, 0xED	; 237
 186:	92 e0       	ldi	r25, 0x02	; 2
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcdprint+0x16>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcdprint+0x1c>
 18e:	00 00       	nop
	{
		_delay_ms(3);
		lcddata(string[i]);
 190:	80 81       	ld	r24, Z
 192:	0e 94 6e 00 	call	0xdc	; 0xdc <lcddata>
		i++;
 196:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(50);
}
void lcdprint(char *string)
{
	unsigned char i=0;
	while(string[i] != 0)
 198:	f8 01       	movw	r30, r16
 19a:	ec 0f       	add	r30, r28
 19c:	f1 1d       	adc	r31, r1
 19e:	90 81       	ld	r25, Z
 1a0:	91 11       	cpse	r25, r1
 1a2:	f0 cf       	rjmp	.-32     	; 0x184 <lcdprint+0x12>
	{
		_delay_ms(3);
		lcddata(string[i]);
		i++;
	}
}
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <main>:
				_delay_ms(15);	
			q=1;
}*/
int main(void)
{
	lcdinitialise();
 1ac:	0e 94 81 00 	call	0x102	; 0x102 <lcdinitialise>
	lcdprint("HELLO");
	lcdgotoxy(6,3);
	lcdprint("HELLO");
	lcdgotoxy(6,4);
	lcdprint("HELLO");*/
    lcdprint(" HELLO");
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 b9 00 	call	0x172	; 0x172 <lcdprint>
	while (1) 
    {
		
    }
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0xc>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
